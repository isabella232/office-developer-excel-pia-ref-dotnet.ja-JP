<Type Name="WorksheetFunction" FullName="Microsoft.Office.Interop.Excel.WorksheetFunction">
  <TypeSignature Language="C#" Value="public interface WorksheetFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract WorksheetFunction" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.WorksheetFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface WorksheetFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class WorksheetFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020845-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ユーザーから呼び出Excelワークシート関数のコンテナーとして使用Visual Basic。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_WSFunction">
      <MemberSignature Language="C#" Value="public object _WSFunction (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _WSFunction([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction._WSFunction(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _WSFunction (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(169)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrInt">
      <MemberSignature Language="C#" Value="public double AccrInt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrInt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrInt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrInt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">発行日 - 証券の発行日を指定します。</param>
        <param name="Arg2">初回利払日 - 証券の初回利払日を指定します。</param>
        <param name="Arg3">受渡日 - 証券の受渡日を指定します。</param>
        <param name="Arg4">利率 - 証券の年利を指定します。</param>
        <param name="Arg5">額面 - 証券の額面価格を指定します。</param>
        <param name="Arg6">頻度 - 年間の利息支払回数を指定します。</param>
        <param name="Arg7">基準 - 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>定期的に利息が支払われる証券の未収利息額を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>次の表に、使用できる値を示します <paramref name="Arg5" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrIntM">
      <MemberSignature Language="C#" Value="public double AccrIntM (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrIntM([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrIntM(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrIntM (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の発行日を指定します。</param>
        <param name="Arg2">証券の満期日を指定します。</param>
        <param name="Arg3">証券の年利を指定します。</param>
        <param name="Arg4">証券の額面価格を指定します。額面を省略すると、$1,000 を指定したと見なされます。</param>
        <param name="Arg5">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>満期日に利息が支払われる証券の未収利息額を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>次の表に、使用できる値を示します <paramref name="Arg5" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>次の一覧には、ACCRINTM を操作するときに注意する必要がある情報が含まれます。</para>
          <list type="bullet">
            <item>
              <description>Excel では、日付は集計に使用できるようにシリアル値として格納されます。既定では、1900 年 1 月 1 日のシリアル値は 1、2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後であるためシリアル値は 39,448 になります。</description>
            </item>
            <item>
              <description>発行日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</description>
            </item>
            <item>
              <description>発行日または満期日に無効な日付を指定すると、エラーになります。</description>
            </item>
            <item>
              <description>rate ≤ 0 または par ≤ 0 の場合、ACCRINTM はエラーを生成します。 </description>
            </item>
            <item>
              <description>基準 &lt; 0 または基準 4 の場合 &gt; 、ACCRINTM はエラーを生成します。 </description>
            </item>
            <item>
              <description>満期日≥すると、ACCRINTM はエラーを生成します。 </description>
            </item>
            <item>
              <description>ACCRINTM 関数は次の数式で表されます。 </description>
            </item>
          </list>
          <para>各部分の意味は次のとおりです。</para>
          <para>A = 月単位でカウントされた見越し日数。 それぞれの値の意味は次のとおりです。</para>
          <para>A = 基準での指定に基づく利息計算期間の日数 (満期日に利息が支払われる証券については、発行日から満期日までの日数)、D = 利息計算の基準となる 1 年の日数</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public double Acos (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acos([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acos (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acos(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16483)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">求める角度のコサインの値を、-1 ～ 1 の範囲で指定します。</param>
        <summary>数値のアークコサインを返します。 arccosine は、コサインが . <paramref name="Arg1" /> 戻り値の角度は、0 (ゼロ) ～ PI の範囲のラジアンとなります。</summary>
        <returns>To be added.</returns>
        <remarks><para>結果をラジアンから度に変換する場合は、180/PI() を掛けるか、Degrees メソッドを使用します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public double Acosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16617)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 以上の実数を指定します。</param>
        <summary>数値の逆双曲線コサインを返します。 数値は 1 以上である必要があります。 逆双曲線コサインは、双曲線コサインが等しい値なので <paramref name="Arg1" /> 、Acosh(Cosh(number)) が等しくなります <paramref name="Arg1" /> 。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acot">
      <MemberSignature Language="C#" Value="public double Acot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16932)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">求める角度の逆余接。</param>
        <summary>数値の逆余接 (コタンジェントの逆関数) を 0 ～ Pi の範囲のラジアンで取得します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acoth">
      <MemberSignature Language="C#" Value="public double Acoth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acoth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acoth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acoth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acoth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16933)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余接を取得する角度を指定します。</param>
        <summary>数値の双曲線逆余接 (ハイパーボリック コタンジェントの逆関数) を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public double Aggregate (double Arg1, double Arg2, Microsoft.Office.Interop.Excel.Range Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Aggregate([in]float64 Arg1, [in]float64 Arg2, [in]class Microsoft.Office.Interop.Excel.Range Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Aggregate(System.Double,System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate (Arg1 As Double, Arg2 As Double, Arg3 As Range, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">集計方法: 使用する関数を示す 1 ～ 19 の数値を指定します。</param>
        <param name="Arg2">オプション: 関数の評価範囲のうちで無視する値を表す数値を指定します。</param>
        <param name="Arg3">参照 1: 集計値を求める関数に指定する複数の引数のうち、最初の引数の数値を指定します。</param>
        <param name="Arg4">参照 2 ～ 参照 30: 集計値を求める対象の 2 番目から 30 番目までの引数の数値を指定します。</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>リストまたはデータベースの集計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>次の制約は、引数の値に基づいて Ref 引数 (Arg3 - Arg 30) <b>にFunction_num</b> します。</para>
          <list type="table">
            <item>
              <term>1-13</term>
              <description>有効な型:任意のセル参照 Unions Intersections 定義済みの名前 構造化参照Invalid 型: 実績データ配列</description>
              <description>有効な型:任意のセル参照 Unions Intersections 定義済みの名前 構造化参照Invalid 型: 実績データ配列</description>
              <description>有効な型:任意のセル参照 Unions Intersections 定義済みの名前 構造化参照Invalid 型: 実績データ配列</description>
            </item>
            <item>
              <term>14-17</term>
              <description>有効な型:任意のセル参照 Unions Intersections 定義済みの名前 構造化参照 実際のデータ配列</description>
              <description>有効な型:任意のセル参照 Unions Intersections 定義済みの名前 構造化参照 実際のデータ配列</description>
              <description>参照は使用できません</description>
            </item>
          </list>
          <para>2 番目の ref 引数が必須の場合に指定されていないと、#VALUE! エラーが返されます。</para>
          <para>指定した参照の中に 3-D 参照が 1 つでもあると、エラー値 #VALUE! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorDegrc">
      <MemberSignature Language="C#" Value="public double AmorDegrc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorDegrc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorDegrc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorDegrc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16850)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">資産を購入した日付を指定します。</param>
        <param name="Arg3">最初の会計期が終了する日付を指定します。</param>
        <param name="Arg4">耐用年数が終了した時点での資産の価格を指定します。</param>
        <param name="Arg5">会計期 (会計年度) を指定します。</param>
        <param name="Arg6">減価償却率を指定します。</param>
        <param name="Arg7">1 年を何日として計算するかを表す数値を指定します。</param>
        <summary>各会計期における減価償却費を返します。この関数は、フランスの会計システムのために用意されています。</summary>
        <returns>To be added.</returns>
        <remarks><para>資産を会計期の途中で購入した場合、日割り計算による減価償却費が計上されます。 このメソッドは、資産の寿命に応じて減価償却係数が計算に適用される点を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 除き、次に類似しています。次の表で使用される値について説明します <paramref name="Arg7" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数</description>
            </item>
            <item>
              <term>3</term>
              <description>365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>この関数では、資産の耐用年数の最後の会計期までの減価償却費、または減価償却費の累積額が取得価額と残存価額の差よりも大きくなるまでの減価償却費が返されます。</para>
          <para>減価償却係数は、次のように定義されています。</para>
          <list type="table">
            <item>
              <term>3 ～ 4 年</term>
              <description>1.5</description>
            </item>
            <item>
              <term>5 ～ 6 年</term>
              <description>2</description>
            </item>
            <item>
              <term>6 年を超える年数</term>
              <description>2.5</description>
            </item>
          </list>
          <para>減価償却率は、最後から 1 つ前の期で 50% まで上昇し、最後の会計期で 100% まで上昇します。</para>
          <para>資産の耐用年数が 0 ～ 1 年、1 ～ 2 年、2 ～ 3 年、または 4 ～ 5 年の場合、エラー値 #NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorLinc">
      <MemberSignature Language="C#" Value="public double AmorLinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorLinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorLinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16851)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">資産を購入した日付を指定します。</param>
        <param name="Arg3">最初の会計期が終了する日付を指定します。</param>
        <param name="Arg4">耐用年数が終了した時点での資産の価格を指定します。</param>
        <param name="Arg5">会計期 (会計年度) を指定します。</param>
        <param name="Arg6">減価償却率を指定します。</param>
        <param name="Arg7">1 年を何日として計算するかを表す数値を指定します。</param>
        <summary>各会計期における減価償却費を返します。この関数は、フランスの会計システムのために用意されています。</summary>
        <returns>To be added.</returns>
        <remarks><para>会計期間の途中で資産を購入した場合、日次減価償却費が考慮されます。次の表に使用する値を示します <paramref name="Arg7" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数</description>
            </item>
            <item>
              <term>3</term>
              <description>365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public bool And (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool And([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.And(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16420)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストする 1 ~ 30 の条件で <b>、true</b> または false のいずれか <b>になります</b>。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数が <b>true</b> の場合は true を返 <b>します</b>。1 つ <b>以上の引数が false</b> の場合は false を <b>返します</b>。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数は、true や<b>false</b>などの論理値<b></b>に評価する必要があります。または、引数は論理値を含む配列または参照である必要があります。 </para>
          <para>引数として指定した配列や参照に、文字列または空白セルが含まれる場合、これらの値は無視されます。</para>
          <para>指定した範囲に論理値が含まれていない場合は、エラー値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクト修飾子なしで使用すると、このプロパティは、アプリケーションのオブジェクトを <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 表すオブジェクトMicrosoft Excelします。 オブジェクト修飾子と一緒に使用すると、このプロパティは、指定したオブジェクトの作成者を表す <see cref="T:Microsoft.Office.Interop.Excel.Application" /> オブジェクトを返します。 OLE オートメーション オブジェクトに対してこのプロパティを使用すると、オブジェクトのアプリケーションを取得できます。 値の取得のみ可能です。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arabic">
      <MemberSignature Language="C#" Value="public double Arabic (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Arabic([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Arabic(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Arabic (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Arabic(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16967)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するローマ数字を指定します。</param>
        <summary>ローマ数字をアラビア数字に変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public string Asc (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Asc([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Asc(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16598)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列または変換する文字列を含むセルの参照を指定します。文字列に全角文字が含まれない場合は、文字列は変換されません。</param>
        <summary>全角 (2 バイト) の文字を半角 (1 バイト) の文字に変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public double Asin (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asin([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asin (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asin(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">求める角度のサインの値を -1 ～ 1 の範囲で指定します。</param>
        <summary>数値のアークサインを返します。 アークサインは、サインが . <paramref name="Arg1" /> 戻り値の角度は、-PI/2 ～ PI/2 の範囲のラジアンとなります。</summary>
        <returns>To be added.</returns>
        <remarks><para>アークサインを度数で表す場合は、結果に 180/PI( ) を掛けるか、メソッドを使用 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public double Asinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">実数を指定します。</param>
        <summary>数値の逆双曲線正弦を返します。 逆双曲線正弦は双曲線正弦が等しい値なので <paramref name="Arg1" /> 、Asinh(Sinh(number)) は等しくなります <paramref name="Arg1" /> 。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public double Atan2 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atan2([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atan2 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atan2(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">点の x 座標を指定します。</param>
        <param name="Arg2">点の y 座標を指定します。</param>
        <summary>指定された x-y 座標のアークタンジェントを返します。アークタンジェントとは、x 軸から、原点 0 と x 座標、y 座標で表される点を結んだ直線までの角度のことです。戻り値の角度は、-PI ～ PI (ただし -PI を除く) の範囲のラジアンとなります。</summary>
        <returns>To be added.</returns>
        <remarks><para>戻り値が正の数なら x 軸から反時計回りの角度を表し、負の数なら x 軸から時計回りの角度を表します。</para>
          <para>
            <b>Atan2(a,b)</b> は <b>Atan(b/a)</b>と等しくなりますが <b>、Atan2</b>では 0 に等しくなります。 </para>
          <para>両方とも <paramref name="Arg1" /> <paramref name="Arg2" /> 0 の場合、Atan2 はエラー値を返します。 </para>
          <para>アークタンジェントを度数で表す場合は、結果に 180/PI( ) を掛けるか、メソッドを使用 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public double Atanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">-1 より大きく 1 より小さい実数を指定します。</param>
        <summary>数値の双曲線逆正接 (ハイパーボリック タンジェントの逆関数) を返します。数値は -1 より大きく 1 より小さい実数である必要があります。</summary>
        <returns>To be added.</returns>
        <remarks><para>逆双曲線正接は、双曲線正接が <b>Arg1</b>の値なので <b>、Atanh(Tanh(number)) が</b> 等しくなります <paramref name="Arg1" /> 。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AveDev">
      <MemberSignature Language="C#" Value="public double AveDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AveDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AveDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AveDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16653)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">絶対偏差の平均を求める数値データを指定します。引数は 1 ～ 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、単一配列や、配列への参照を引数として使用することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>データ全体の平均値に対するそれぞれのデータの絶対偏差の平均を返します。AveDev メソッドは、データの分散性を測定するときに使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>AveDev</b> は、入力データの測定単位の影響を受ける。 </para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、または空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>平均絶対偏差は、次の数式で表されます。</para>
          <para>図 1: 平均偏差の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public double Average (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Average([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Average(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Average (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">平均を求める数値データを指定します。引数は 1 ～ 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数の (数学的な) 平均値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。 セル参照に計算の一部として論理値や数値を表す文字列を含める場合は、AVERAGEA 関数を使用します。 </para>
          <para>Average <b>メソッド</b> は、統計的分布内の数値のグループの中心の位置である中心傾向を測定します。 中心傾向を表す指標としては、主に、次の 3 つが挙げられます。</para>
          <list type="bullet">
            <item>
              <description>平均 演算によって求める平均値であり、グループの各数値を加算してそれらの数値の個数で割ることにより計算します。たとえば、2、3、3、5、7、および 10 の平均は、30 を 6 で割った商、つまり 5 です。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、および 10 のメジアンは 4 です。</description>
            </item>
            <item>
              <description>モード 数値のグループの中で、最も頻出する数値です。たとえば、2、3、3、5、7、および 10 のモードは 3 です。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para>セルを平均化する場合は、空のセルと値 0 を含むセルの違いを念頭に置いておきます。特に、[表示] タブ ([オプション] コマンド、[ツール] メニュー) の [ゼロの値] チェック ボックスをオフにしている場合は特に重要です。 Empty cells are not counted, but zero values are.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIf">
      <MemberSignature Language="C#" Value="public double AverageIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16867)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">平均する 1 つまたは複数のセルを指定します。</param>
        <param name="Arg2">数値、式、セル参照、または平均化されるセルを定義するテキストの形式の条件。 たとえば、条件は &gt; 32、"32"、"32"、"apples"、または B4 として表されます。</param>
        <param name="Arg3">平均する実際のセルを指定します。何も指定しないと、範囲 (Arg1) が使用されます。</param>
        <summary>範囲内の検索条件に一致するすべてのセルの平均値 (算術平均) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>true または false を含む <b>範囲内</b> の <b>セルは</b> 無視されます。 </para>
          <para>セル範囲またはセル範囲が空average_range場合 <b>、AverageIf はそれを</b> 無視します。 </para>
          <para>条件内のセルが空の場合 <b>、AverageIf</b> は 0 の値として扱います。 </para>
          <para>範囲内のセルが条件を満たしていない場合 <b>、AverageIf</b> はエラー値を生成します。 </para>
          <para>You can use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para>平均範囲に含まれるセルの個数と形状は、必ずしも対応するセルと一致している必要はありません。平均の対象となる実際のセルは、平均範囲の左上のセルを基準にして決定されます。次にその例を示します。</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para><b>AverageIf メソッド</b>は、統計的分布内の数値のグループの中心の位置である中心傾向を測定します。 中心傾向を表す指標としては、主に、次の 3 つが挙げられます。</para>
          <list type="bullet">
            <item>
              <description>平均 演算によって求める平均値であり、グループの各数値を加算してそれらの数値の個数で割ることにより計算します。たとえば、2、3、3、5、7、および 10 の平均は、30 を 6 で割った商、つまり 5 です。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、および 10 のメジアンは 4 です。</description>
            </item>
            <item>
              <description>モード 数値のグループの中で、最も頻出する数値です。たとえば、2、3、3、5、7、および 10 のモードは 3 です。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIfs">
      <MemberSignature Language="C#" Value="public double AverageIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16868)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">対応する条件による評価の対象となる範囲を指定します。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>複数の検索条件に一致するすべてのセルの平均値 (算術平均) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セルが空のセルaverage_range場合 <b>、AverageIfs はそれを</b> 無視します。 </para>
          <para>条件範囲のセルが空の場合 <b>、AverageIfs は</b> 0 の値として扱います。 </para>
          <para>true を含む範囲内の <b>セルは</b> 1 として評価されます。false を含む <b>セルは</b> 0 (ゼロ) と評価されます。 </para>
          <para>セルに対して指定されたすべての検索条件が TRUE の場合にのみ、平均値の計算に平均範囲の各セルが使われます。</para>
          <para>セルが空average_range、数値に変換できないテキスト値が含まれている場合 <b>、AverageIfs は</b> エラーを生成します。 </para>
          <para>すべての条件を満たすセルがない場合 <b>、AverageIfs は</b> エラー値を生成します。 </para>
          <para>You can use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para>各検索条件範囲に含まれるセルの個数と形状は、必ずしも平均範囲のセルと一致している必要はありません。平均の対象となる実際のセルは、検索条件範囲の左上のセルを基準にして決定されます。次にその例を示します。</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para><b>AverageIfs 関数</b>は、統計的分布内の数値のグループの中心の位置である中心傾向を測定します。 中心傾向を表す指標としては、主に、次の 3 つが挙げられます。</para>
          <list type="bullet">
            <item>
              <description>平均 演算によって求める平均値であり、グループの各数値を加算してそれらの数値の個数で割ることにより計算します。たとえば、2、3、3、5、7、および 10 の平均は、30 を 6 で割った商、つまり 5 です。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、および 10 のメジアンは 4 です。</description>
            </item>
            <item>
              <description>モード 数値のグループの中で、最も頻出する数値です。たとえば、2、3、3、5、7、および 10 のモードは 3 です。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BahtText">
      <MemberSignature Language="C#" Value="public string BahtText (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BahtText([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BahtText(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BahtText (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BahtText(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16752)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列に変換する数値、数値を含むセルの参照、または戻り値が数値となる数式を指定します。</param>
        <summary>数値をタイ語の文字列に変換し、バーツを表す接尾文字列を付加します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base (double Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base([in]float64 Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Base(System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Base (Arg1 As Double, Arg2 As Double, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16955)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する数値を指定します。</param>
        <param name="Arg2">数値を変換する基数を指定します。</param>
        <param name="Arg3">返される文字列の最小長を指定します。先頭の 0 が省略された場合は追加されません。</param>
        <summary>数値を特定の基数 (底) を持つ文字列式に変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI">
      <MemberSignature Language="C#" Value="public double BesselI (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselI([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselI(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselI (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselI(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">ベッセル関数の次数を指定します。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <summary>修正ベッセル関数 In(x) を返します。この関数は、純虚数を引数としたときのベッセル関数 Jn に相当します。</summary>
        <returns>To be added.</returns>
        <remarks><para>If x is nonnumeric, BesselI returns the #VALUE! error value. </para>
          <para>If n is nonnumeric, BesselI generates an error value. </para>
          <para>n &lt; 0 の場合、BesselI はエラー値を生成します。 </para>
          <para>変数を x とする n 次の修正ベッセル関数は、次の数式で表されます。</para>
          <para>図 1: 変数 x の Bessel 関数</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselJ">
      <MemberSignature Language="C#" Value="public double BesselJ (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselJ([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselJ(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselJ (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselJ(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16809)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">ベッセル関数の次数を指定します。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <summary>ベッセル関数 Jn(x) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>x が数値以外の場合 <b>、BesselJ は</b> エラー値を生成します。 </para>
          <para>n が数値以外の場合 <b>、BesselJ</b> はエラー値を返します。 </para>
          <para>n &lt; 0 の場合 <b>、BesselJ は</b> エラー値を生成します。 </para>
          <para>変数を x とする n 次のベッセル関数は、次の数式で表されます。 </para>
          <para>図 1: 変数 x の Bessel 関数</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>図 2: ガンマ関数</para>
          <para> </para>
          <para> </para>
          <para>はガンマ関数を表します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselK">
      <MemberSignature Language="C#" Value="public double BesselK (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselK([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselK(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselK (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselK(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16810)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">ベッセル関数の次数を指定します。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <summary>修正ベッセル関数 Kn(x) を返します。この関数は、純虚数を引数としたときのベッセル関数 Jn と Yn の和に相当します。</summary>
        <returns>To be added.</returns>
        <remarks><para>x が数値以外の場合 <b>、BesselK は</b> エラー値を生成します。 </para>
          <para>n が数値以外の場合 <b>、BesselK は</b> エラー値を生成します。 </para>
          <para>n &lt; 0 の場合 <b>、BesselK は</b> エラー値を生成します。 </para>
          <para>変数を x とする n 次の修正ベッセル関数は、次の数式で表されます。 </para>
          <para>図 1: 変数 x の Bessel 関数</para>
          <para> </para>
          <para> </para>
          <para>ここで Jn と Yn は、それぞれ BESSELJ 関数と BESSELY 関数を表します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselY">
      <MemberSignature Language="C#" Value="public double BesselY (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselY([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselY(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselY (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselY(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">ベッセル関数の次数を指定します。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <summary>ベッセル関数 Yn(x) を返します。この関数は、ウェーバー関数、またはノイマン関数とも呼ばれます。</summary>
        <returns>To be added.</returns>
        <remarks><para>x が数値以外の場合 <b>、BesselY は</b> エラー値を生成します。 </para>
          <para>n が数値以外の場合 <b>、BesselY は</b> エラー値を生成します。 </para>
          <para>n &lt; 0 の場合 <b>、BesselY は</b> エラー値を生成します。 </para>
          <para>変数を x とする n 次のベッセル関数は、次の数式で表されます。 </para>
          <para>図 1: 変数 x の Bessel 関数</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Dist">
      <MemberSignature Language="C#" Value="public double Beta_Dist (double Arg1, double Arg2, double Arg3, bool Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16909)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">区間 A (Arg4) ～ B (Arg5) の範囲で、関数を使用して検証する瞬間を指定します。</param>
        <param name="Arg2">確率分布に対するαパラメーターを指定します。</param>
        <param name="Arg3">確率分布に対するβパラメーターを指定します。</param>
        <param name="Arg4">関数形式: 関数値の形式を、論理値で指定します。 累積値が <b>true の場合は</b>、BETA です。DIST は累積分布関数を返します。false <b>の場合</b>、確率密度関数を返します。</param>
        <param name="Arg5">x の区間の下限を指定します。この引数は省略することができます。</param>
        <param name="Arg6">x の区間の上限を指定します。この引数は省略することができます。</param>
        <summary>β分布の累積分布関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>β分布は、複数の標本を対象に割合の変化を分析する場合などに使用します。たとえば、複数の人が 1 日のうちにテレビを見ている時間の割合を算出するときは、この関数を使用します。</para>
          <list type="bullet">
            <item>
              <description>引数が数値以外の場合は <b>、Beta_Dist</b> を返#VALUE! が返されます。</description>
            </item>
            <item>
              <description>アルファ値が 0 ≤またはベータ値が 0 ≤ <b>場合、Beta_Dist</b> 値が生成されます。</description>
            </item>
            <item>
              <description>x &lt; A、x &gt; B、または A <b></b> = B の場合、Beta_Dist値が生成されます。</description>
            </item>
            <item>
              <description>A と B (下限と上限) の値を省略すると、Beta_Dist は標準 <b>の</b> 累積ベータ分布を使用し、A = 0 と B = 1 になります。</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Inv">
      <MemberSignature Language="C#" Value="public double Beta_Inv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">β確率分布に伴う確率を指定します。</param>
        <param name="Arg2">確率分布に対するαパラメーターを指定します。</param>
        <param name="Arg3">確率分布に対するβパラメーターを指定します。</param>
        <param name="Arg4">x の区間の下限を指定します。この引数は省略することができます。</param>
        <param name="Arg5">x の区間の上限を指定します。この引数は省略することができます。</param>
        <summary>指定したβ分布の累積分布関数の逆関数の値を返します。つまり、確率 = Beta_Dist(x,...) であるとき、Beta_Inv(確率,...) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>β分布は、プロジェクトの立案時に、予測される完成日数と公差によって完了可能日時を計算するために使用できます。</para>
          <list type="bullet">
            <item>
              <description>引数が数値以外の場合 <b>、Beta_Inv値</b> が生成されます。</description>
            </item>
            <item>
              <description>アルファ値≤ベータ値が 0 ≤場合、Beta_Inv値 <b>が</b> 生成されます。</description>
            </item>
            <item>
              <description>確率が 0 または≤ 1 の場合、Beta_Inv &gt; 値が生成されます。 <b></b></description>
            </item>
            <item>
              <description>A と B (下限と上限) の値を省略すると、Beta_Inv は標準 <b>の</b> 累積ベータ分布を使用し、A = 0 と B = 1 になります。</description>
            </item>
          </list>
          <para>確率の値を指定すると <b>、Beta_Inv</b> は、Beta_Dist(x、アルファ、ベータ、TRUE、A、B) = 確率などの値 x を求める必要があります。 したがって、データの精度 <b>Beta_Inv</b> の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> 。 <b>Beta_Inv</b> は反復検索手法を使用します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaDist">
      <MemberSignature Language="C#" Value="public double BetaDist (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16654)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">区間 A (Arg4) ～ B (Arg5) の範囲で、関数を使用して検証する瞬間を指定します。</param>
        <param name="Arg2">確率分布に対するパラメーターを指定します。</param>
        <param name="Arg3">確率分布に対するパラメーターを指定します。</param>
        <param name="Arg4">x の区間の下限を指定します。この引数は省略することができます。</param>
        <param name="Arg5">x の区間の上限を指定します。この引数は省略することができます。</param>
        <summary>β分布の累積分布関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> してください。</para>
          <para>β分布は、複数の標本を対象に割合の変化を分析する場合などに使用します。たとえば、複数の人が 1 日のうちにテレビを見ている時間の割合を算出するときは、この関数を使用します。</para>
          <list type="bullet">
            <item>
              <description>引数が数値以外の場合 <b>、BetaDist は</b> 引数を返#VALUE! が返されます。</description>
            </item>
            <item>
              <description>アルファ値≤ 0 またはベータ≤場合 <b>、BetaDist</b> はエラー値を生成します。</description>
            </item>
            <item>
              <description>x &lt; A、x &gt; B、または A = B の場合 <b>、BetaDist は</b> エラー値を生成します。</description>
            </item>
            <item>
              <description>A と B の値を省略すると <b>、BetaDist</b> は標準の累積ベータ分布を使用し、A = 0 と B = 1 になります。</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaInv">
      <MemberSignature Language="C#" Value="public double BetaInv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaInv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16656)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">β確率分布に伴う確率を指定します。</param>
        <param name="Arg2">確率分布に対するαパラメーターを指定します。</param>
        <param name="Arg3">確率分布に対するβパラメーターを指定します。</param>
        <param name="Arg4">x の区間の下限を指定します。この引数は省略することができます。</param>
        <param name="Arg5">x の区間の上限を指定します。この引数は省略することができます。</param>
        <summary>指定したβ分布の累積分布関数の逆関数の値を返します。つまり、確率 = BetaDist(x,...) であるとき、BetaInv(確率,...) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> してください。</para>
          <para>β分布は、プロジェクトの立案時に、予測される完成日数と公差によって、完了可能日時を計算するために使用できます。</para>
          <list type="bullet">
            <item>
              <description>引数が数値以外の場合 <b>、BetaInv は</b> エラー値を生成します。</description>
            </item>
            <item>
              <description>アルファ値≤ 0 またはベータ≤場合 <b>、BetaInv</b> はエラー値を生成します。 </description>
            </item>
            <item>
              <description>確率が 0 または≤ 1 の場合 &gt; <b>、BetaInv</b> はエラー値を生成します。 </description>
            </item>
            <item>
              <description>A と B の値を省略すると <b>、BetaInv</b> は標準の累積ベータ分布を使用し、A = 0 と B = 1 になります。</description>
            </item>
          </list>
          <para>確率の値を指定すると <b>、BetaInv</b> は、その値 x を求めて、BetaDist(x、α、ベータ、A、B) = 確率を求める。 したがって <b>、BetaInv の精度は</b> 、 の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" /> 。 <b>BetaInv は反復</b> 検索手法を使用します。 100 回反復計算を繰り返しても計算結果が収束しない場合は、エラー値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Dec">
      <MemberSignature Language="C#" Value="public string Bin2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Bin2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16777)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する 2 進数を指定します。数値に指定できる文字数は 10 文字 (10 ビット) までです。数値の最上位のビットは符号を表し、残りの 9 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <summary>2 進数を 10 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値に 2 進数以外の値、または 10 文字 (10 ビット) 以上の値を指定すると、エラー値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Hex">
      <MemberSignature Language="C#" Value="public string Bin2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16779)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する 2 進数を指定します。数値に指定できる文字数は 10 文字 (10 ビット) までです。数値の最上位のビットは符号を表し、残りの 9 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">16 進表記するときに使用する文字数 (桁数) を指定します。 場所を省略すると <b>、Bin2Hex は</b> 必要な最小文字数を使用します。 桁数を指定することによって、変換結果の先頭に 0 (ゼロ) を表示することができます。</param>
        <summary>2 進数を 16 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が有効なバイナリ番号でない場合、または数値に 10 文字 (10 ビット) を超える値が含まれている場合 <b>、Bin2Hex</b> はエラーを生成します。 </para>
          <para>数値が負の場合 <b>、Bin2Hex は</b> 場所を無視し、10 文字の 16 進数を返します。 </para>
          <para><b>Bin2Hex に複数</b>の文字が必要な場合は、エラーが生成されます。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合 <b>、Bin2Hex は</b> エラーを生成します。 </para>
          <para>場所が負の場合 <b>、Bin2Hex は</b> エラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Oct">
      <MemberSignature Language="C#" Value="public string Bin2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16778)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する 2 進数を指定します。数値に指定できる文字数は 10 文字 (10 ビット) までです。数値の最上位のビットは符号を表し、残りの 9 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">16 進表記するときに使用する文字数 (桁数) を指定します。 場所を省略すると <b>、Bin2Oct は</b> 必要な最小文字数を使用します。 桁数を指定することによって、変換結果の先頭に 0 (ゼロ) を表示することができます。</param>
        <summary>2 進数を 8 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が有効なバイナリ番号でない場合、または数値に 10 文字 (10 ビット) を超える値が含まれている場合 <b>、Bin2Oct</b> はエラーを生成します。 </para>
          <para>数値が負の場合 <b>、Bin2Oct は</b> 場所を無視し、10 文字の 8 進数を返します。 </para>
          <para><b>Bin2Oct に複数</b>の文字が必要な場合は、エラーが生成されます。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合 <b>、Bin2Oct は</b> エラーを生成します。 </para>
          <para>場所が負の場合 <b>、Bin2Oct は</b> エラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist">
      <MemberSignature Language="C#" Value="public double Binom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">成功数: 試行回数に含まれる成功の回数を指定します。</param>
        <param name="Arg2">試行回数: 独立試行の回数を指定します。</param>
        <param name="Arg3">成功率: 1 回の試行が成功する確率を指定します。</param>
        <param name="Arg4">関数形式: 関数値の形式を、論理値で指定します。 累積が<b>True</b>の場合、メソッドは累積分布関数を返します。これは、number_s 成功が多い確率です。False の場合、確率質量関数が返されます。これは、number_s 成功がある確率です。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> <b></b></param>
        <summary>二項分布の確率関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>Binom_Dist</b>メソッドは、一定の数のテストまたは試行で問題が発生した場合、試行の結果が成功または失敗のみである場合、試用版が独立している場合、および実験全体で成功の確率が一定の場合に使用します。 For example, the <b>Binom_Dist</b> method can calculate the probability that two of the next three babies born are male. </para>
          <list type="bullet">
            <item>
              <description>成功数、試行回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</description>
            </item>
            <item>
              <description>データnumber_s試行、またはprobability_s数値以外の場合、Binom_Dist <b>エラーが</b> 発生します。 </description>
            </item>
            <item>
              <description>0 number_s &lt; 試行number_s &gt; 場合、Binom_Distメソッドはエラーを生成します。 <b></b> </description>
            </item>
            <item>
              <description>0 probability_s &lt; または &gt; 1 probability_s場合、Binom_Distメソッドは<b></b>エラーを生成します。 二項確率密度関数は、次の数式で表されます。 </description>
            </item>
          </list>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>は COMBIN(n,x) を表します。</para>
          <para>二項累積分布関数は、次の数式で表されます。</para>
          <para>図 3: 累積二項分布</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist_Range">
      <MemberSignature Language="C#" Value="public double Binom_Dist_Range (double Arg1, double Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist_Range([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist_Range(System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist_Range (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16958)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">独立試行の回数を指定します。</param>
        <param name="Arg2">各試行が成功する確率を指定します。</param>
        <param name="Arg3">試行における成功数を指定します。</param>
        <param name="Arg4">指定した場合、この関数は、成功した試行の数が Arg3 と Arg4 の間の値になる確率を返します。</param>
        <summary>二項分布を使用した試行結果の確率を返します。</summary>
        <returns>Double</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Inv">
      <MemberSignature Language="C#" Value="public double Binom_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">試行回数: ベルヌーイ試行の回数を指定します。</param>
        <param name="Arg2">成功率: 1 回の試行が成功する確率を指定します。</param>
        <param name="Arg3">α: 基準値を指定します。</param>
        <summary>二項分布の確率関数の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Trials、Probability_s、または Alpha が数値以外の場合、Binom_Inv <b>メソッドは</b> エラーを生成します。 </para>
          <para>試行回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>Trials &lt; 0 の<b></b>場合、Binom_Invメソッドはエラーを生成します。 </para>
          <para>&lt;0 Probability_sまたは 1 Probability_s &gt; 場合、Binom_Invメソッドはエラー<b></b>を生成します。 </para>
          <para>アルファ &lt; 0 またはアルファ &gt; 1<b></b>の場合、Binom_Invメソッドはエラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BinomDist">
      <MemberSignature Language="C#" Value="public double BinomDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BinomDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16657)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">試行における成功数を指定します。</param>
        <param name="Arg2">独立試行の回数を指定します。</param>
        <param name="Arg3">各試行が成功する確率を指定します。</param>
        <param name="Arg4">関数の形式を決定する論理値。 累積値が <b>true の</b>場合 <b>、BinomDist</b> は累積分布関数を返します。これは、成功した場合に最も多number_sです。false <b>の</b>場合、確率質量関数が返されます。これは、成功した確率number_sします。</param>
        <summary>二項分布の確率関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>BinomDist</b>は、テストまたは試験の固定数に関する問題、試験の結果が成功または失敗のみである場合、試用版が独立している場合、および実験全体で成功の確率が一定である場合に使用します。 たとえば <b>、BinomDist は</b> 、次に生まれた 3 人の赤ちゃんの 2 人が男性である確率を計算できます。 </para>
          <para>成功数、試行回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>データnumber_s試用、またはprobability_s数値以外の場合 <b>、BinomDist</b> はエラーを生成します。 </para>
          <para>0 number_s &lt; 試用number_s &gt; <b>場合、BinomDist は</b> エラーを生成します。 </para>
          <para>0 probability_s &lt; または &gt; 1 probability_s場合 <b>、BinomDist は</b> エラーを生成します。 </para>
          <para>二項確率密度関数は、次の数式で表されます。 </para>
          <para>図 1: 二項確率質量関数</para>
          <para> </para>
          <para> </para>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>は COMBIN(n,x) を表します。</para>
          <para>二項累積分布関数は、次の数式で表されます。</para>
          <para>図 3: 累積二項分布</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitand">
      <MemberSignature Language="C#" Value="public double Bitand (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitand([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitand(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitand (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitand(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16946)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <param name="Arg2">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <summary>2 つの数値の 'Bitwise And' を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitlshift">
      <MemberSignature Language="C#" Value="public double Bitlshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitlshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitlshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitlshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitlshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16949)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <param name="Arg2">取得するバイト数。</param>
        <summary>左に移動数ビット (shift_amount) 移動する数値を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitor">
      <MemberSignature Language="C#" Value="public double Bitor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16947)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <param name="Arg2">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <summary>2 つの数値のビット単位 OR を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitrshift">
      <MemberSignature Language="C#" Value="public double Bitrshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitrshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitrshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitrshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitrshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16950)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <param name="Arg2">取得するバイト数。</param>
        <summary>右に移動数ビット (shift_amount) 移動する数値を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitxor">
      <MemberSignature Language="C#" Value="public double Bitxor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitxor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitxor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitxor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitxor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16948)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <param name="Arg2">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <summary>2 つの数値のビット単位 "排他的 OR" を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public double Ceiling (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ceiling(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16672)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 丸めの対象となる数値を指定します。</param>
        <param name="Arg2">基準値: 倍数の基準となる数値を指定します。</param>
        <summary>指定された基準値の倍数のうち、最も近い値に数値を切り上げます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" /> してください。</para>
          <para>たとえば、原価 442 円の部品に値段を付ける場合に、1 円単位の端数を出さないようにするには、数式 Ceiling(4.42,0.05) を使って、値を最も近い 10 円単位の値に丸めることができます。</para>
          <para>引数に数値以外の値を指定すると、エラー値が返されます。<b></b></para>
          <para>数値の符号に関係なく、切り上げられた値の絶対値は、数値より大きくなります。数値が既に基準値の倍数になっている場合は、その値が返されます。</para>
          <para>数値と基準値の符号が異なる場合は、エラー値が返されます。<b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Math">
      <MemberSignature Language="C#" Value="public double Ceiling_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">丸める数値。</param>
        <param name="Arg2">数値を丸める対象の倍数。</param>
        <param name="Arg3">指定され、かつ 0 以外の場合、この関数は 0 とは逆の方向に切り上げます。</param>
        <summary>数値を最も近い整数、または最も近い基準値の倍数に切り上げます。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Precise">
      <MemberSignature Language="C#" Value="public double Ceiling_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16930)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 丸めの対象となる数値を指定します。</param>
        <param name="Arg2">基準値: 倍数の基準となる数値を指定します。</param>
        <summary>指定された基準値の倍数のうち、最も近い値に数値を丸めます。</summary>
        <returns>To be added.</returns>
        <remarks><para>たとえば、原価 442 円の部品に値段を付ける場合に、1 円単位の端数を出さないようにするには、数式 Ceiling(4.42,0.05) を使って、値を最も近い 10 円単位の値に丸めることができます。</para>
          <para><b>Ceiling_Precise</b> メソッドで切り上げと切り捨てのどちらが行われるかは、数値と基準値の引数の符号によって決まります。</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>切り捨て</description>
            </item>
            <item>
              <term>+/+</term>
              <description>切り上げ</description>
            </item>
            <item>
              <term>-/+</term>
              <description>切り捨て</description>
            </item>
            <item>
              <term>+/-</term>
              <description>切り上げ</description>
            </item>
          </list>
          <para>引数に数値以外の値を指定すると、エラー値が返されます。<b></b></para>
          <para>数値が既に基準値の倍数になっている場合は、その値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiDist">
      <MemberSignature Language="C#" Value="public double ChiDist (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiDist([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiDist (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiDist(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16658)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">自由度を指定します。</param>
        <summary>カイ 2 乗分布の片側確率の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" /> 参照してください。</para>
          <para>2 の分布は 2 テストに関連付けられる。 観測値と期待値を比較するには、 2 テストを使用します。</para>
          <para>たとえば、ある植物の遺伝子実験で、次の世代の花には一定の色の組み合わせが発生するという仮説を立てたとします。ここで、予測された色と観察の結果を比較することにより、仮説の妥当性を検定することができます。</para>
          <para>いずれかの引数が数値以外の場合 <b>、ChiDist は</b> エラーを生成します。 </para>
          <para>x が負の場合 <b>、ChiDist は</b> エラーを生成します。 </para>
          <para>自由度に小数点以下の値を指定しても切り捨てられます。</para>
          <para>&lt;1 degrees_freedomまたは &gt; 10^10 degrees_freedom場合<b>、ChiDist は</b>エラーを生成します。 </para>
          <para>
            <b>ChiDist は</b> ChiDist = P(X x) として計算され &gt; 、X は 2 ランダム変数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiInv">
      <MemberSignature Language="C#" Value="public double ChiInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16659)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">χ2 分布に伴う確率を指定します。</param>
        <param name="Arg2">自由度を指定します。</param>
        <summary>カイ 2 乗分布の片側確率の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" /> 参照してください。</para>
          <para>確立 = ChiDist(x,...) であるとき、ChiInv(確率,...) = x という関係が成り立ちます。この関数は、実測値と期待値を比較して、仮説の妥当性を検定するために使います。</para>
          <para>いずれかの引数が数値以外の場合 <b>、ChiInv は</b> エラーを生成します。 </para>
          <para>確率 &lt; 0 または確率 &gt; 1 の場合 <b>、ChiInv は</b> エラーを生成します。 </para>
          <para>自由度に小数点以下の値を指定しても切り捨てられます。</para>
          <para>&lt;1 degrees_freedomまたは 10^10 degrees_freedom ≥場合<b>、ChiInv</b>はエラーを生成します。</para>
          <para>確率の値を指定すると <b>、ChiInv</b> は、ChiDist(x, degrees_freedom) = 確率などの値 x を求める。 したがって <b>、ChiInv の精度は</b> 、 の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" /> 。 <b>ChiInv は反復</b> 検索手法を使用します。 64 回反復計算を繰り返しても計算結果が収束しない場合は、エラー値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16911)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 分布を計算する値を指定します。</param>
        <param name="Arg2">自由度: 自由度を指定します。</param>
        <param name="Arg3">累積 - 関数の形式を決定する論理値。 累積的な値 <b>が true の</b>場合、CHISQ_DIST関数を返します。false <b>の場合</b>、確率密度関数を返します。</param>
        <summary>カイ 2 乗分布を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数に数値以外の値を指定すると、エラー値 #VALUE! が返されます。 </para>
          <para>x に負の数を指定すると、エラー値 #NUM! が返されます。 </para>
          <para>自由度に整数以外の値を指定すると、小数点以下が切り捨てられます。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16912)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">自由度を指定します。</param>
        <summary>カイ 2 乗分布の右側確率の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>2 の分布は 2 テストに関連付けられる。 観測値と期待値を比較するには、 2 テストを使用します。</para>
          <para>たとえば、ある植物の遺伝子実験で、次の世代の花には一定の色の組み合わせが発生するという仮説を立てたとします。ここで、予測された色と観察の結果を比較することにより、仮説の妥当性を検定することができます。</para>
          <para>いずれかの引数が数値以外の <b>場合ChiSq_Dist_RTエラー</b> が発生します。 </para>
          <para>x が負の <b>場合、ChiSq_Dist_RT</b> が生成されます。 </para>
          <para>自由度に小数点以下の値を指定しても切り捨てられます。</para>
          <para>1 degrees_freedom &lt; または &gt; 10^10 degrees_freedom場合<b></b>、エラー ChiSq_Dist_RT生成されます。 <b>ChiSq_Dist_RT</b> は、x が 2 ランダム変数である ChiSq_Dist_RT = P(X &gt; x) として計算されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16913)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: カイ 2 乗分布における確率を指定します。</param>
        <param name="Arg2">自由度: 自由度を指定します。</param>
        <summary>カイ 2 乗分布の左側確率の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合 <b>、ChiSq_Invを</b> 返#VALUE! が返されます。 </para>
          <para>確率 &lt; 0 または確率 &gt; 1<b></b>の場合、ChiSq_Invを返#NUM! が返されます。 </para>
          <para>自由度に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16914)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">χ2 分布に伴う確率を指定します。</param>
        <param name="Arg2">自由度を指定します。</param>
        <summary>カイ 2 乗分布の右側確率の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>確率 = ChiSq_Dist_RT(x,...) であるとき、ChiSq_Inv_RT(確率,...) = x という関係が成り立ちます。 この関数は、実測値と期待値を比較して、仮説の妥当性を検定するために使います。</para>
          <para>いずれかの引数が数値以外の <b>場合ChiSq_Inv_RTエラー</b> が発生します。 </para>
          <para>確率 &lt; 0 または確率 &gt; 1<b></b>の場合、ChiSq_Inv_RTが生成されます。 </para>
          <para>自由度に小数点以下の値を指定しても切り捨てられます。</para>
          <para>&lt;1 degrees_freedomまたは 10^10 degrees_freedom ≥場合、エラー ChiSq_Inv_RT<b></b>生成されます。</para>
          <para>確率の値を指定すると、ChiSq_Inv_RTは、ChiSq_Dist_RT(x, degrees_freedom) = 確率などの値 x を求める必要があります。 <b></b> したがって、データの精度 <b>ChiSq_Inv_RT</b> の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> 。 <b>ChiSq_Inv_RTは</b> 、反復検索手法を使用します。 64 回反復計算を繰り返しても計算結果が収束しない場合は、エラー値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Test">
      <MemberSignature Language="C#" Value="public double ChiSq_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16874)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">期待値に対する検定の実測値が入力されているデータ範囲を指定します。</param>
        <param name="Arg2">期待値が入力されているデータ範囲を指定します。実測値と期待値では、行方向の値の合計と列方向の値の合計がそれぞれ等しくなっている必要があります。</param>
        <summary>カイ 2 乗 (χ2) 検定を行います。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiSq_Test</b> は、統計量のカイ 2 乗 ( 2) 分布の値と適切な自由度を返します。 2 のテストを使用して、仮説の結果が実験によって検証されるかどうかを判断できます。</para>
          <para>データ actual_rangeとexpected_range数が異なる場合は、ChiSq_Test/A エラー値<b></b>#N返します。 </para>
          <para>2 テストでは、最初に次の数式を使用して 2 統計量を計算します。 </para>
          <para>図 1: x 二乗検定の数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <list type="bullet">
            <item>
              <description>Aij = i 番目の行の j 番目の列の実際の頻度</description>
            </item>
            <item>
              <description>Eij = i 番目の行の j 番目の列の予想される頻度</description>
            </item>
            <item>
              <description>r = 数値または行</description>
            </item>
            <item>
              <description>c = 列数</description>
            </item>
          </list>
          <para>低い値 数式から見て、 2 は常に正または 0 で、i,j ごとに Aij = Eij の場合にのみ 0 です。</para>
          <para>
            <b>ChiSq_Test</b> は、 2 統計量の値が、少なくとも上記の数式で計算された値と同じ高い確率で、独立性を前提として偶然に発生した可能性を返します。 この確率を計算 <b>する場合</b> 、ChiSq_Testは自由度 df の適切な数の 2 分布を使用します。 r &gt; 1 と c &gt; 1 の場合、df = (r - 1)(c - 1)。 r = 1 と c 1 の場合、df = c - 1、または r 1 と c = 1 の場合は &gt; df = r - &gt; 1 です。 r = c= 1 の場合は、エラー値が返されます。</para>
          <para>Eij の <b>ChiSq_Test</b> 小さ過ぎない場合は、アプリケーションの使用が最も適切です。 Eij の値がそれぞれ 5 以上の場合に使用するよう推奨する統計学者もいます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiTest">
      <MemberSignature Language="C#" Value="public double ChiTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16690)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">期待値に対する検定の実測値が入力されているデータ範囲を指定します。</param>
        <param name="Arg2">重要:この関数は、精度が向上し、その名前が使用状況をよりよく反映する 1 つ以上の新しい関数に置き換えました。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" /> してください。 期待値が入力されているデータ範囲を指定します。実測値と期待値では、行方向の値の合計と列方向の値の合計がそれぞれ等しくなっている必要があります。</param>
        <summary>カイ 2 乗 (χ2) 検定を行います。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiTest</b> は、統計量のカイ 2 乗 ( 2) 分布の値と適切な自由度を返します。 2 のテストを使用して、仮説の結果が実験によって検証されるかどうかを判断できます。</para>
          <para>データ actual_rangeとexpected_rangeデータ ポイントの数が異なる場合 <b>、ChiTest</b> はエラー値#Nを返します。 </para>
          <para>2 テストでは、最初に次の数式を使用して 2 統計量を計算します。 </para>
          <para>図 1: x 二乗検定の数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <list type="bullet">
            <item>
              <description>Aij = i 番目の行の j 番目の列の実際の頻度</description>
            </item>
            <item>
              <description>Eij = i 番目の行の j 番目の列の予想される頻度</description>
            </item>
            <item>
              <description>r = 数値または行</description>
            </item>
            <item>
              <description>c = 列数</description>
            </item>
          </list>
          <para> </para>
          <para>低い値 数式から見て、 2 は常に正または 0 で、i,j ごとに Aij = Eij の場合にのみ 0 です。</para>
          <para>
            <b>ChiTest</b> は、上記の数式で計算された値が独立性を前提として偶然に発生した可能性がある 2 統計量の値が少なくとも高い確率を返します。 この確率を計算する場合 <b>、ChiTest</b> は自由度 df の適切な数の 2 分布を使用します。 r &gt; 1 と c &gt; 1 の場合、df = (r - 1)(c - 1)。 r = 1 と c 1 の場合、df = c - 1、または r 1 と c = 1 の場合は &gt; df = r - &gt; 1 です。 r = c= 1 の場合は、エラー値が返されます。</para>
          <para><b>ChiTest の使用は</b>、Eij のサイズが小さすぎる場合に最も適しています。 Eij の値がそれぞれ 5 以上の場合に使用するよう推奨する統計学者もいます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public object Choose (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Choose([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Choose(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16484)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">引数リストの何番目の値を選択するかを指定します。 Arg1 には、1 ～ 29 の数値、または 1 ～ 29 の数値を返す数式またはセル参照を指定します。</param>
        <param name="Arg2">引数 Select が Arg1 に基づいて実行する値またはアクションを選択する 1 ~ 29 の値の引数。 これらの引数には、数値、セル参照、名前、数式、関数、または文字列を指定できます。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>インデックス <paramref name="Arg1" /> として使用して、値の引数の一覧から値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>1 <paramref name="Arg1" /> の場合は <b>、値</b> 1 を返します。値が 2 の場合は、 <b>値</b> 2 を返します。次に、値 2 を返します。 </para>
          <para>リスト <paramref name="Arg1" /> 内の最後の値の数が 1 未満の場合は、 <b>エラー</b> が発生します。 </para>
          <para>分 <paramref name="Arg1" /> 数の場合は、使用する前に最も小さい整数に切り詰められます。 </para>
          <para>配列 <paramref name="Arg1" /> の場合、Choose が評価された場合、すべての <b>値</b> が評価されます。 </para>
          <para>Choose の値の <b>引数には</b> 、範囲参照と単一の値を指定できます。 たとえば、次の数式を使用します。</para>
          <para>=SUM(Choose(2,A1:A10,B1:B10,C1:C10))</para>
          <para>次の値に評価されます。</para>
          <para>=SUM(B1:B10)</para>
          <para>次に、範囲 B1:B10 の値に基づいて値を返します。</para>
          <para>最初 <b>に Choose</b> 関数が評価され、参照 B1:B10 が返されます。 SUM 関数は、引数として Choose 関数の結果である B1:B10 を使用して評価されます。 <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public string Clean (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Clean([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Clean (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Clean(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">印刷できない文字を削除するワークシートの文字データを指定します。</param>
        <summary>印刷できない文字を文字列から削除します。</summary>
        <returns>To be added.</returns>
        <remarks><para>オペレーティング <b>システムで</b> 印刷されない可能性がある文字を含む他のアプリケーションからインポートされたテキストに対してクリーンを使用します。 たとえば、Clean を使用<b></b>すると、データ ファイルの先頭と末尾で頻繁に使用され、印刷できない低レベルのコンピューター コードを削除できます。</para>
          <para>
            <b>重要</b>: <b>Clean 関数</b> は、7 ビット ASCII コードの最初の 32 文字の印刷不能文字 (値 0 ~ 31) をテキストから削除するように設計されています。 Unicode 文字セットでは、印刷できない文字が追加されています (値 127、129、141、143、144、および 157)。 それ自体では <b>、Clean 関数</b> は、これらの追加の印刷以外の文字を削除しません。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combin">
      <MemberSignature Language="C#" Value="public double Combin (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combin([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combin(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combin (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combin(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16660)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">項目数。</param>
        <param name="Arg2">組み合わせる 1 組に含まれる項目の数 (抜き取り数) を指定します。</param>
        <summary>すべての項目から指定された個数を選択するときの組み合わせの数を返します。 Combin <b>を使用</b> して、特定の数のアイテムのグループの総数を決定します。</summary>
        <returns>To be added.</returns>
        <remarks><para>整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>いずれかの引数が数値以外の場合 <b>、Combin</b> はエラーを生成します。 </para>
          <para>数値 &lt; 0、number_chosen &lt; 0、または数値number_chosenすると &lt; <b>、Combin</b> はエラーを生成します。 </para>
          <para>順列では、選択した項目の順序に意味があるのに対し、組み合わせでは、項目の順序に意味はありません。</para>
          <para>総数 = n、抜き取り数 = k とすると、組み合わせの総数は、次の数式で表されます。 </para>
          <para>図 1: 組み合わせの数</para>
          <para> </para>
          <para> </para>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combina">
      <MemberSignature Language="C#" Value="public double Combina (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combina([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combina(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combina (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combina(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16952)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">項目の合計数を指定します。</param>
        <param name="Arg2">組み合わせる 1 組に含まれる項目の数 (抜き取り数) を指定します。</param>
        <summary>すべての項目から指定された個数を選択するときの組み合わせ (反復あり) の数を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public string Complex (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Complex([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Complex (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16795)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数の実数係数を指定します。</param>
        <param name="Arg2">複素数の虚数係数を指定します。</param>
        <param name="Arg3">複素数の虚数部分の単位として、文字 "i" または "j" を指定します。虚数単位を省略すると、"i" を指定したと見なされます。</param>
        <summary>実数係数および虚数係数を "x+yi" または "x+yj" の形式の複素数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>複素数を処理するための関数では、虚数単位として "i" または "j" のいずれかを使用できますが、大文字の "I" と "J" を使用すると、エラーになります。複数の引数を指定する場合は、虚数単位を統一する必要があります。</para>
          <para>数値 <paramref name="Arg1" /> 以外の場合 <b>、Complex は</b> エラーを生成します。 </para>
          <para>数値 <paramref name="Arg2" /> 以外の場合 <b>、Complex は</b> エラーを生成します。 </para>
          <para>"i" でも "j" でもない場合 <paramref name="Arg3" /> <b>、Complex</b> はエラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public double Confidence (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16661)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">信頼度を計算するために使用する有意水準 (α) を指定します。信頼度は 100 * (1- α)% で計算されます。つまり、α = 0.05 であるとき、信頼度は 95% になります。</param>
        <param name="Arg2">データ範囲に対する母集団の標準偏差を指定します。これは、既知であると仮定されます。</param>
        <param name="Arg3">標本数を指定します。</param>
        <summary>母集団の平均に対する信頼区間を求めます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" /> 参照してください。</para>
          <para>信頼区間は、値の範囲です。 サンプル平均 x は、この範囲の中心に位置し、範囲は x ± <b>です</b>。 たとえば、x がメールを通じて注文された製品の配送時間のサンプル平均である場合、x ± <b>Confidence</b> は一部の母集団平均です。 この範囲の母集団平均 μ0 の場合、サンプル平均を x よりもさらに高くする確率は α より大きくなります。母集団平均 μ0 (この範囲ではない) の場合、サンプル平均を x よりもさらに取得する確率は α 未満です。 つまり、x、standard_dev、および size を使用して、母集団平均が μ0 という仮説の有意水準アルファで 2 尾検定を構築すると仮定します。 次に、μ0 が信頼区間にある場合、その仮説を棄却し、μ0 が信頼区間に含めない場合は、その仮説を棄却します。 信頼区間では、次のパッケージが信頼区間にある配信時間がかかる確率 1 アルファが存在する可能性を推定できます。 </para>
          <para>引数が数値以外の場合 <b>、Confidence</b> はエラーを生成します。 </para>
          <para>アルファ値が 0 または≤ 1 の場合 <b>≥、Confidence</b> はエラーを生成します。 </para>
          <para>0 standard_dev ≤場合 <b>、Confidence</b> はエラーを生成します。 </para>
          <para>標本数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>サイズ &lt; 1 の場合 <b>、Confidence は</b> エラーを生成します。 </para>
          <para>アルファが 0.05 と仮定する場合は、標準の法線曲線 (1 - α) または 95% の領域を計算する必要があります。 この値は 1.96 ±です。 したがって、信頼区間は次の値になります。 </para>
          <para>図 1: 信頼区間</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_Norm">
      <MemberSignature Language="C#" Value="public double Confidence_Norm (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_Norm([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_Norm (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_Norm(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16872)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">信頼度を計算するために使用する有意水準 (α) を指定します。信頼度は 100 * (1- α)% で計算されます。つまり、α = 0.05 であるとき、信頼度は 95% になります。</param>
        <param name="Arg2">データ範囲に対する母集団の標準偏差を指定します。これは、既知であると仮定されます。</param>
        <param name="Arg3">標本数を指定します。</param>
        <summary>母集団の平均に対する信頼区間を求めます。</summary>
        <returns>To be added.</returns>
        <remarks><para>信頼区間は、値の範囲です。 サンプル平均 x は、この範囲の中心に位置し、範囲は x <b>±Confidence_Norm。</b> たとえば、x がメールで注文された製品の配送時間のサンプル平均である場合、x ±Confidence_Norm<b></b>は、さまざまな母集団平均です。 この範囲の母集団平均 μ0 の場合、サンプル平均を x よりもさらに高くする確率は α より大きくなります。母集団平均 μ0 (この範囲ではない) の場合、サンプル平均を x よりもさらに取得する確率は α 未満です。 つまり、x、standard_dev、および size を使用して、母集団平均が μ0 という仮説の有意水準アルファで 2 尾検定を構築すると仮定します。 次に、μ0 が信頼区間にある場合、その仮説を棄却し、μ0 が信頼区間に含めない場合は、その仮説を棄却します。 信頼区間では、次のパッケージが信頼区間にある配信時間がかかる確率 1 – アルファがあるという推論は許可されない。</para>
          <para>引数が数値以外の場合 <b>、Confidence_Normが</b> 生成されます。 </para>
          <para>アルファ値≤ 0 またはアルファ ≥ 1 の場合 <b>Confidence_Normエラーが</b> 生成されます。 </para>
          <para>0 standard_dev ≤ <b>すると、Confidence_Norm</b> が生成されます。 </para>
          <para>標本数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>サイズ &lt; 1<b></b>の場合Confidence_Normエラーが発生します。 </para>
          <para>アルファが 0.05 と見なされる場合は、標準の法線曲線 (1 - α) または 95% の領域を計算します。 この値は 1.96 ±です。 したがって、信頼区間は次の値になります。 </para>
          <para>図 1: 信頼区間</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_T">
      <MemberSignature Language="C#" Value="public double Confidence_T (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_T([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_T (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_T(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16873)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">α: 信頼度を計算するために使用する有意水準を指定します。信頼度は 100 * (1 - α)% で計算されます。つまり、α = 0.05 であるとき、信頼度は 95% になります。</param>
        <param name="Arg2">標準偏差: データ範囲に対する母集団の標準偏差を指定します。これは、既知であると仮定されます。</param>
        <param name="Arg3">標本数: 標本数を指定します。</param>
        <summary>スチューデントの t 分布を使用して、母集団の平均に対する信頼区間を求めます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合は <b>、Confidence_T</b> を返#VALUE! が返されます。 </para>
          <para>アルファ値≤ 0 またはアルファ ≥ 1 の場合、Confidence_T <b>を返</b> #NUM! が返されます。 </para>
          <para>0 standard_dev ≤場合は <b>、Confidence_T</b> を返#NUM! が返されます。 </para>
          <para>標本数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>size が 1 の場合 <b>、Confidence_T/0</b> #DIV返します。 が返されます。 </para>
          <para>size が 1 の場合 <b>、Confidence_T/0</b> #DIV返します。 が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public double Convert (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Convert([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Convert(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (Arg1 As Object, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Convert(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16852)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する値を指定します。</param>
        <param name="Arg2">数値の単位を指定します。</param>
        <param name="Arg3">変換後の単位を指定します。 <b>Convert</b> は、以下の 「備考」セクションにfrom_unitおよびto_unitのテキスト値 (二重引用符で囲む) を受け入れる。</param>
        <summary>数値の単位を変換します。 たとえば、 <b>変換では</b> 、距離の表をマイル数でキロメートルの距離のテーブルに変換できます。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>グラム</term>
              <description>"g"</description>
            </item>
            <item>
              <term>スラグ</term>
              <description>"sg"</description>
            </item>
            <item>
              <term>ポンド (常衡)</term>
              <description>"lbm"</description>
            </item>
            <item>
              <term>U (原子質量単位)</term>
              <description>"u"</description>
            </item>
            <item>
              <term>オンス (常衡)</term>
              <description>"ozm"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>メートル</term>
              <description>"m"</description>
            </item>
            <item>
              <term>法定マイル</term>
              <description>"mi"</description>
            </item>
            <item>
              <term>海里</term>
              <description>"Nmi"</description>
            </item>
            <item>
              <term>インチ</term>
              <description>"in"</description>
            </item>
            <item>
              <term>フィート</term>
              <description>"ft"</description>
            </item>
            <item>
              <term>ヤード</term>
              <description>"yd"</description>
            </item>
            <item>
              <term>オングストローム</term>
              <description>"ang"</description>
            </item>
            <item>
              <term>パイカ (1/72 インチ)</term>
              <description>"Pica"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>年</term>
              <description>"yr"</description>
            </item>
            <item>
              <term>日</term>
              <description>"day"</description>
            </item>
            <item>
              <term>時</term>
              <description>"hr"</description>
            </item>
            <item>
              <term>分</term>
              <description>"mn"</description>
            </item>
            <item>
              <term>秒</term>
              <description>"sec"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>パスカル</term>
              <description>"Pa" (または "p")</description>
            </item>
            <item>
              <term>気圧</term>
              <description>"atm" (または "at")</description>
            </item>
            <item>
              <term>ミリメートル Hg</term>
              <description>"mmHg"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>ニュートン</term>
              <description>"N"</description>
            </item>
            <item>
              <term>ダイン</term>
              <description>"dyn" (または "dy")</description>
            </item>
            <item>
              <term>ポンド フォース</term>
              <description>"lbf"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>ジュール</term>
              <description>"J"</description>
            </item>
            <item>
              <term>エルグ</term>
              <description>"e"</description>
            </item>
            <item>
              <term>カロリー (物理化学的熱量)</term>
              <description>"c"</description>
            </item>
            <item>
              <term>カロリー (生理学的代謝熱量)</term>
              <description>"cal"</description>
            </item>
            <item>
              <term>電子ボルト</term>
              <description>"eV" (または "ev")</description>
            </item>
            <item>
              <term>馬力時</term>
              <description>"HPh" (または "hh")</description>
            </item>
            <item>
              <term>ワット時</term>
              <description>"Wh" (または "wh")</description>
            </item>
            <item>
              <term>フィートポンド</term>
              <description>"flb"</description>
            </item>
            <item>
              <term>BTU (英国熱量単位)</term>
              <description>"BTU" (または "btu")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>馬力</term>
              <description>"HP" (または "h")</description>
            </item>
            <item>
              <term>ワット</term>
              <description>"W" (または "w")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>テスラ</term>
              <description>"T"</description>
            </item>
            <item>
              <term>ガウス</term>
              <description>"ga"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>摂氏</term>
              <description>"C" (または "cel")</description>
            </item>
            <item>
              <term>華氏</term>
              <description>"F" (または "fah")</description>
            </item>
            <item>
              <term>絶対温度</term>
              <description>"K" (または "kel")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>ティースプーン</term>
              <description>"tsp"</description>
            </item>
            <item>
              <term>テーブルスプーン</term>
              <description>"tbs"</description>
            </item>
            <item>
              <term>オンス</term>
              <description>"oz"</description>
            </item>
            <item>
              <term>カップ</term>
              <description>"cup"</description>
            </item>
            <item>
              <term>パイント (米)</term>
              <description>"pt" (または "us_pt")</description>
            </item>
            <item>
              <term>パイント (英)</term>
              <description>"uk_pt"</description>
            </item>
            <item>
              <term>クォート</term>
              <description>"qt"</description>
            </item>
            <item>
              <term>ガロン</term>
              <description>"gal"</description>
            </item>
            <item>
              <term>リットル</term>
              <description>"l" (または "lt")</description>
            </item>
          </list>
          <para>次に示す 10 のべき乗に対応する略語は、変換前単位または変換後単位に前置することができます。</para>
          <list type="table">
            <item>
              <term>exa</term>
              <description>1E+18</description>
              <description>"E"</description>
            </item>
            <item>
              <term>peta</term>
              <description>1E+15</description>
              <description>"P"</description>
            </item>
            <item>
              <term>tera</term>
              <description>1E+12</description>
              <description>"T"</description>
            </item>
            <item>
              <term>giga</term>
              <description>1E+09</description>
              <description>"G"</description>
            </item>
            <item>
              <term>mega</term>
              <description>1E+06</description>
              <description>"M"</description>
            </item>
            <item>
              <term>kilo</term>
              <description>1E+03</description>
              <description>"k"</description>
            </item>
            <item>
              <term>hecto</term>
              <description>1E+02</description>
              <description>"h"</description>
            </item>
            <item>
              <term>dekao</term>
              <description>1E+01</description>
              <description>"e"</description>
            </item>
            <item>
              <term>deci</term>
              <description>1E-01</description>
              <description>"d"</description>
            </item>
            <item>
              <term>centi</term>
              <description>1E-02</description>
              <description>"c"</description>
            </item>
            <item>
              <term>milli</term>
              <description>1E-03</description>
              <description>"m"</description>
            </item>
            <item>
              <term>micro</term>
              <description>1E-06</description>
              <description>"u"</description>
            </item>
            <item>
              <term>nano</term>
              <description>1E-09</description>
              <description>"n"</description>
            </item>
            <item>
              <term>pico</term>
              <description>1E-12</description>
              <description>"p"</description>
            </item>
            <item>
              <term>femto</term>
              <description>1E-15</description>
              <description>"f"</description>
            </item>
            <item>
              <term>atto</term>
              <description>1E-18</description>
              <description>"a"</description>
            </item>
          </list>
          <para>入力データ型が正しくない場合 <b>、Convert は</b> エラーを生成します。 </para>
          <para>単位が存在しない場合 <b>、Convert は</b> エラーを生成します。 </para>
          <para>単位が省略された単位プレフィックスをサポートしていない場合 <b>、Convert</b> はエラーを生成します。 </para>
          <para>単位が異なるグループにある場合 <b>、Convert は</b> エラーを生成します。 </para>
          <para>単位名と略語の大文字と小文字は区別されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Correl">
      <MemberSignature Language="C#" Value="public double Correl (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Correl([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Correl(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correl (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correl(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データが入力されたセル範囲を指定します。</param>
        <param name="Arg2">もう一方のデータが入力されたセル範囲を指定します。</param>
        <summary>セル範囲とセル範囲の相関係数 <paramref name="Arg1" /> を <paramref name="Arg2" /> 返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>相関係数は、2 つの特性の関係を判断するときに使用します。たとえば、各地域の平均気温とエアコンの普及率の相関関数を調べることができます。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、または空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>データ <paramref name="Arg1" /> ポイント <paramref name="Arg2" /> の数が異なる場合 <b>、Correl は</b> エラーを生成します。 </para>
          <para>値が空の場合、または空の場合、または値の s (標準偏差) が 0 の場合 <paramref name="Arg1" /> <paramref name="Arg2" /> <b>、Correl は</b> エラーを生成します。 </para>
          <para>相関関数は次の数式で計算できます。</para>
          <para>図 1: 相関係数の数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 Average(Arg1)、y は標本平均 Average(Arg2) です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public double Cosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余弦を求める実数を指定します。</param>
        <summary>数値の双曲線余弦 (ハイパーボリック コサイン) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>双曲線余弦は、次の数式で表されます。 </para>
          <para>図 1: 双曲線コサインの数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cot">
      <MemberSignature Language="C#" Value="public double Cot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16934)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">コタンジェントを求める角度をラジアンで指定します。</param>
        <summary>角度のコタンジェントを返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coth">
      <MemberSignature Language="C#" Value="public double Coth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Coth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Coth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Coth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16935)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余接を求める角度をラジアンを単位として指定します。</param>
        <summary>数値の双曲線コタンジェントを返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public double Count (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Count([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Count (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">任意のデータ型を使用し、任意の値、名前付きのセル範囲、配列、またはセル参照を指定します。引数は 1 ～ 30 個まで指定できます。ただし、計算の対象となるのは数値だけです。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストの各項目に含まれる数値の個数の合計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Count <b>を</b> 使用して、数値フィールド内の数値の範囲または配列内のエントリ数を取得します。 </para>
          <para>Count メソッドでは、数値、日付、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>エラー値、数値に変換できない文字列は無視されます。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>論理値、テキスト値、エラー値をカウントする場合は、関数を使用 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountA">
      <MemberSignature Language="C#" Value="public double CountA (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountA([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountA (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16553)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">値、あるいは値を含む名前、配列、またはセル参照を指定します。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストの各項目に含まれるデータの個数の合計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>CountA <b>を使用</b> して、範囲または配列内のデータを含むセルの数をカウントします。</para>
          <para>CountA メソッドでは、エラー値や空白文字列 ("") を含め、すべてのデータ型の値が計算の対象となります。ただし、空白セルだけは計算の対象となりません。</para>
          <para>引数に配列またはセル範囲の参照を指定した場合、そこに含まれる数値だけが計算の対象となります。配列またはセル範囲の参照に含まれる空白セルと文字列は無視されます。</para>
          <para>論理値、テキスト値、エラー値をカウントする必要がない場合は、関数を使用 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountBlank">
      <MemberSignature Language="C#" Value="public double CountBlank (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountBlank([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountBlank(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountBlank (Arg1 As Range) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountBlank(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">空白セルの個数を求めるセル範囲を指定します。</param>
        <summary>指定された範囲に含まれる空白セルの個数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>空白文字列 ("") を返す数式が入力されているセルも計算の対象となります。ただし、数値の 0 を含むセルは計算の対象となりません。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIf">
      <MemberSignature Language="C#" Value="public double CountIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIf(Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIf (Arg1 As Range, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountIf(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">セルの個数を求めるセル範囲を指定します。</param>
        <param name="Arg2">計算の対象となるセルを定義する条件を数値、式、セル参照、または文字列で指定します。 たとえば、条件は &gt; 32、"32"、"32"、"apples"、または B4 として表されます。</param>
        <summary>指定された範囲に含まれるセルのうち、検索条件に一致するセルの個数を返します。</summary>
        <returns><see cref="T:System.Double" /> を返します。</returns>
        <remarks><para>検索条件では、半角の疑問符 (?) または半角のアスタリスク (*) をワイルドカード文字として使用することができます。ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。ワイルドカード文字ではなく、通常の文字として疑問符やアスタリスクを検索する場合は、その文字の前に、"~*" のように半角のティルダ (~) を付けます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIfs">
      <MemberSignature Language="C#" Value="public double CountIfs (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIfs(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIfs (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">対応する条件による評価の対象となる範囲を指定します。</param>
        <param name="Arg2">計算の対象となるセルを定義する条件を数値、式、セル参照、または文字列で指定します。 たとえば、条件は &gt; 32、"32"、"32"、"apples"、または B4 として表されます。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>指定された範囲に含まれるセルのうち、複数の検索条件に一致するセルの個数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セルに対して指定されたすべての検索条件が TRUE の場合にのみ、範囲内の各セルの個数を計算します。</para>
          <para>引数のセルが空のセルの場合 <b>、CountIfs は</b> 0 の値として扱います。 </para>
          <para>You can use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDayBs">
      <MemberSignature Language="C#" Value="public double CoupDayBs (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDayBs([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDayBs(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDayBs (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16836)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>利払期間の第 1 日目から受渡日までの日数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>次の表に、 の値の一覧を示します <paramref name="Arg4" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 30 年後に当たる 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、CoupDayBs は</b> エラーを生成します。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合 <b>、CoupDayBs</b> はエラーを生成します。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、CoupDayBs は</b> エラーを生成します。 </para>
          <para>満期日≥場合 <b>、CoupDayBs は</b> エラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDays">
      <MemberSignature Language="C#" Value="public double CoupDays (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDays([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDays(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDays (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16837)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>受渡日を含む利払期間内の日数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>次の表に使用する値を示します <paramref name="Arg4" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 30 年後に当たる 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、CoupDays は</b> エラーを生成します。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合 <b>、CoupDays は</b> エラーを生成します。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、CoupDays は</b> エラーを生成します。 </para>
          <para>満期日≥場合 <b>、CoupDays は</b> エラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDaysNc">
      <MemberSignature Language="C#" Value="public double CoupDaysNc (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDaysNc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDaysNc(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDaysNc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16838)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>受渡日から次の利払日までの日数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>次の表に使用する値を示します <paramref name="Arg4" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、CoupDaysNc は</b> エラーを生成します。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合 <b>、CoupDaysNc</b> はエラーを生成します。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、CoupDaysNc は</b> エラーを生成します。 </para>
          <para>満期日≥場合 <b>、CoupDaysNc は</b> エラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNcd">
      <MemberSignature Language="C#" Value="public double CoupNcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16839)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>受渡日後の次の利払日を数値で返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>次の表に使用する値を示します <paramref name="Arg4" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、CoupNcd は</b> エラーを生成します。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合 <b>、CoupNcd は</b> エラーを生成します。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、CoupNcd は</b> エラーを生成します。 </para>
          <para>満期日≥場合 <b>、CoupNcd は</b> エラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNum">
      <MemberSignature Language="C#" Value="public double CoupNum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16840)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>受渡日と満期日の間に利息が支払われる回数を返します。端数が出た場合は切り上げられます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>次の表に使用する値を示します <paramref name="Arg4" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、CoupNum は</b> エラーを生成します。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合 <b>、CoupNum</b> はエラーを生成します。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、CoupNum は</b> エラーを生成します。 </para>
          <para>満期日≥場合 <b>、CoupNum は</b> エラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupPcd">
      <MemberSignature Language="C#" Value="public double CoupPcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupPcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupPcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupPcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16841)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>決済日より前のクーポンの日付を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>次の表に使用する値を示します <paramref name="Arg4" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、CoupPcd は</b> エラーを生成します。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合 <b>、CoupPcd</b> はエラーを生成します。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、CoupPcd は</b> エラーを生成します。 </para>
          <para>満期日≥場合 <b>、CoupPcd は</b> エラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covar">
      <MemberSignature Language="C#" Value="public double Covar (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covar([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covar(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covar (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covar(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16692)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">整数のデータが入力されている一方のセル範囲を指定します。</param>
        <param name="Arg2">整数のデータが入力されているもう一方のセル範囲を指定します。</param>
        <summary>共分散を返します。共分散とは、2 組の対応するデータ間での標準偏差の積の平均値です。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッドを <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" /> 参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" /> してください。</para>
          <para>共分散を利用することによって、2 組のデータの相関関係を分析することができます。たとえば、ある社会集団を対象に、収入と最終学歴の相関関係を調べることができます。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>データ <paramref name="Arg1" /> ポイント <paramref name="Arg2" /> の数が異なる場合 <b>、Covar は</b> エラーを生成します。 </para>
          <para>どちらかまたは <paramref name="Arg1" /> 空 <paramref name="Arg2" /> の場合 <b>、Covar は</b> エラーを生成します。 </para>
          <para>共分散は、次の数式で表されます。 </para>
          <para>図 1: 共分散の数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(配列 1)、y は標本平均 AVERAGE(配列 2)、n は標本数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_P">
      <MemberSignature Language="C#" Value="public double Covariance_P (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_P([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_P (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_P(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">整数のデータが入力されている一方のセル範囲を指定します。</param>
        <param name="Arg2">整数のデータが入力されているもう一方のセル範囲を指定します。</param>
        <summary>母集団の共分散を返します。共分散とは、2 組の対応するデータ間での標準偏差の積の平均値です。</summary>
        <returns>To be added.</returns>
        <remarks><para>2 <b>Covariance_P</b> データ セット間の関係を決定するには、次の情報を使用します。 たとえば、ある社会集団を対象に、収入と最終学歴の相関関係を調べることができます。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>データ <paramref name="Arg1" /> ポイント <paramref name="Arg2" /> の数が異なる場合<b></b>はCovariance_Pエラーが発生します。 </para>
          <para>どちらかまたは <paramref name="Arg1" /> 空 <paramref name="Arg2" /> の場合は <b>Covariance_P</b> エラーが発生します。 </para>
          <para>共分散は、次の数式で表されます。 </para>
          <para>図 1: 共分散の数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(配列 1)、y は標本平均 AVERAGE(配列 2)、n は標本数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_S">
      <MemberSignature Language="C#" Value="public double Covariance_S (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_S([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_S (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_S(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 整数のデータが入力されている一方のセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 整数のデータが入力されているもう一方のセル範囲を指定します。</param>
        <summary>標本の共分散を返します。共分散とは、2 組の対応するデータ間での標準偏差の積の平均値です。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>array1 と array2 のデータ ポイント数<b></b>が異なる場合、Covariance_S/A エラー値#N返します。 </para>
          <para>array1 または array2 のどちらかが空の場合、または各データ ポイント<b></b>が 1 つしか含Covariance_S、#DIV/0 を返します。 が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このオブジェクトを作成したアプリケーションを示す、32 ビットの整数値を返します。 読み取り専用 <b>の整数</b> (整数C#)。</summary>
        <value>To be added.</value>
        <remarks><para>Microsoft Excel で作成されたオブジェクトの場合は、文字列 XCEL を表す 16 進数の 5843454C を返します。<b>Creator</b> プロパティは、Macintosh 版 Excel でのみ使用できます。Macintosh では各アプリケーションに 4 文字のシグネチャが定められています。たとえば、Excel のシグネチャは XCEL です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CritBinom">
      <MemberSignature Language="C#" Value="public double CritBinom (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CritBinom([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CritBinom(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CritBinom (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CritBinom(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16662)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">ベルヌーイ試行の回数を指定します。</param>
        <param name="Arg2">1 回の試行が成功する確率を指定します。</param>
        <param name="Arg3">基準値を指定します。</param>
        <summary>累積二項分布の値が基準値以上になるような最小の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>この関数は、品質保証計算などに使用します。 たとえば <b>、CritBinom</b> を使用して、ロット全体を拒否せずにアセンブリ ラインの実行から外れ得る不良部品の最大数を特定します。</para>
          <para>引数が数値以外の場合 <b>、CritBinom は</b> エラーを生成します。 </para>
          <para>試行回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>試行 &lt; 0 の場合 <b>、CritBinom は</b> エラーを生成します。 </para>
          <para>0 または probability_s &lt; 1 の場合 &gt; <b>probability_s、CritBinom は</b> エラーを生成します。 </para>
          <para>アルファ &lt; 0 またはアルファ &gt; 1 の場合 <b>、CritBinom は</b> エラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Csc">
      <MemberSignature Language="C#" Value="public double Csc (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csc([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csc(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csc (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csc(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16936)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">コセカントを求める角度 (ラジアン)。</param>
        <summary>角度のコセカントを返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Csch">
      <MemberSignature Language="C#" Value="public double Csch (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csch([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csch(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csch (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csch(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16937)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余割を求める角度をラジアンで指定します。</param>
        <summary>角度の双曲線余割 (ハイパーボリック コセカント) を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumIPmt">
      <MemberSignature Language="C#" Value="public double CumIPmt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumIPmt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumIPmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumIPmt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumIPmt(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16832)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">貸付期間を通じて一定の利率を指定します。</param>
        <param name="Arg2">貸付期間全体での支払回数の合計を指定します。</param>
        <param name="Arg3">現在の貸付額、つまり将来行われる一連の支払いを、現時点で一括支払いした場合の合計金額を指定します。</param>
        <param name="Arg4">計算の対象となる最初の期を指定します。最初の期から順に、1 から始まる番号が割り当てられます。</param>
        <param name="Arg5">計算の対象となる最後の期を指定します。</param>
        <param name="Arg6">支払いがいつ行われるかを、数値の 0 または 1 で指定します。</param>
        <summary>開始から終了までの期間内で貸付金に対して支払われる利息の累計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>次の表に、で使用される値を示します <paramref name="Arg6" /> 。</para>
          <list type="table">
            <item>
              <term>0 (ゼロ)</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。 年利 12% の 4 年ローンで毎月の支払いを行う場合は、レートに 12%/12、4*12 を使用します <paramref name="Arg2" /> 。 同じローンで年間支払いを行う場合は、レートに 12%、4 を使用します <paramref name="Arg2" /> 。 </para>
          <para>
            <paramref name="Arg2" /><paramref name="Arg4" />、、 <paramref name="Arg5" /> および型は整数に切り捨てられて表示されます。 </para>
          <para>rate ≤ 0、≤、 <paramref name="Arg2" /> または 0 ≤ <paramref name="Arg3" /> 場合 <b>、CumIPmt</b> はエラーを生成します。 </para>
          <para><paramref name="Arg4" /> &lt; <paramref name="Arg5" /> &lt; 1、1、または <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> <b>、CumIPmt がエラー</b>を生成する場合。 </para>
          <para>0 または 1 以外の数値の場合 <paramref name="Arg6" /> <b>、CumIPmt は</b> エラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CumPrinc">
      <MemberSignature Language="C#" Value="public double CumPrinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumPrinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumPrinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumPrinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumPrinc(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16831)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">貸付期間を通じて一定の利率を指定します。</param>
        <param name="Arg2">貸付期間全体での支払回数の合計を指定します。</param>
        <param name="Arg3">現在の貸付額、つまり将来行われる一連の支払いを、現時点で一括支払いした場合の合計金額を指定します。</param>
        <param name="Arg4">計算の対象となる最初の期を指定します。最初の期から順に、1 から始まる番号が割り当てられます。</param>
        <param name="Arg5">計算の対象となる最後の期を指定します。</param>
        <param name="Arg6">計算の対象となる最後の期を指定します。</param>
        <summary>開始から終了までの期間に、貸付金に対して支払われる元金の累計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>次の表に、で使用される値を示します <paramref name="Arg6" /> 。</para>
          <list type="table">
            <item>
              <term>0 (ゼロ)</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。 年利 12% の 4 年ローンで毎月の支払いを行う場合は、レートに 12%/12、4*12 を使用します <paramref name="Arg2" /> 。 同じローンで年間支払いを行う場合は、レートに 12%、4 を使用します <paramref name="Arg2" /> 。 </para>
          <para>
            <paramref name="Arg2" /><paramref name="Arg4" />、、 <paramref name="Arg5" /> および型は整数に切り捨てられて表示されます。 </para>
          <para>rate ≤ 0、≤ <paramref name="Arg2" /> 0、または ≤ <paramref name="Arg3" /> 場合 <b>、CumPrinc</b> はエラーを生成します。 </para>
          <para><paramref name="Arg4" /> &lt; <paramref name="Arg5" /> &lt; 1、1、または <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> <b>、CumPrinc がエラー</b>を生成する場合。 </para>
          <para>0 または 1 以外の数値の場合 <paramref name="Arg6" /> <b>、CumPrinc は</b> エラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DAverage">
      <MemberSignature Language="C#" Value="public double DAverage (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DAverage([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DAverage(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAverage (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DAverage(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16426)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">関数の中で使用する列を指定します。半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す、引用符なしの番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を指定します。</param>
        <param name="Arg3">指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの平均値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、entry は検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public double Days (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Days(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16957)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">start_date(Arg2) および end_date (Arg1) には、間の日数を求める 2 つの日付を指定します。</param>
        <param name="Arg2">start_date(Arg2) および end_date (Arg1) には、間の日数を求める 2 つの日付を指定します。</param>
        <summary>2 つの日付の間の日数を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Days360">
      <MemberSignature Language="C#" Value="public double Days360 (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days360([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days360(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days360 (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16604)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">間の日数を求める 2 つの日付を指定します。開始日 (Arg1) に終了日 (Arg2) 以降の日付を指定すると、負の値が返されます。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。</param>
        <param name="Arg2">間の日数を求める 2 つの日付を指定します。開始日 (Arg1) に終了日 (Arg2) 以降の日付を指定すると、負の値が返されます。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。</param>
        <param name="Arg3">計算で米国またはヨーロッパのメソッドを使用するかどうかを指定するブール値。</param>
        <summary>1 年を 360 日 (30 日×12) として、支払いの計算などによく使用される 2 つの日付の間の日数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>会計システムが 30 日間の 12 か月に基づく場合に支払いを計算するには、この関数を使用します。次の表に、 の値を示します <paramref name="Arg3" /> 。</para>
          <list type="table">
            <item>
              <term>
                <b>false</b> または省略</term>
              <description>NASD 方式。開始日が、ある月の 31 日になる場合、同じ月の 30 日として計算が行われます。終了日が、ある月の 31 日になる場合は、開始日が 30 日でない限り、その翌月の 1 日として計算が行われます。2 月の 28 日と 29 日は、いずれも 2 月 30 日と見なされます。</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>ヨーロッパ方式。開始日または終了日が、ある月の 31 日になる場合、同じ月の 30 日として計算が行われます。</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Db">
      <MemberSignature Language="C#" Value="public double Db (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Db([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Db(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Db (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">取得価額: 資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">残存価額: 耐用年数が終了した時点での資産の価格を指定します。</param>
        <param name="Arg3">耐用年数: 資産を使用できる年数、つまり償却の対象となる資産の寿命年数を指定します。</param>
        <param name="Arg4">期間: 減価償却費を求める期を指定します。期間は耐用年数と同じ単位で指定する必要があります。</param>
        <param name="Arg5">月: 資産を購入した期 (年度) の月数を指定します。省略すると、12 を指定したと見なされます。</param>
        <summary>定率法 (Fixed-declining Balance Method) を利用して、特定の期における資産の減価償却費を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>固定定率法は、減価償却費を一定の割合で計算します。 DB では、次の数式を使用して期間の減価償却費を計算します。</para>
          <para>(コスト - 以前の期間からの減価償却費の合計) * レート</para>
          <para>各部分の意味は次のとおりです。</para>
          <para>rate = 1 - ((salvage / cost) ^ (1 / life))、小数点以下 3 桁に四捨五入</para>
          <para>最初と最後の期間の減価償却は特別なケースです。 最初の期間、DB は次の数式を使用します。</para>
          <para>cost * rate * month / 12</para>
          <para>最後の期間、DB は次の数式を使用します。</para>
          <para>((コスト - 以前の期間からの減価償却費の合計) * rate * (12 - month)) / 12</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dbcs">
      <MemberSignature Language="C#" Value="public string Dbcs (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dbcs([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dbcs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dbcs (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Dbcs(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16599)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列または変換する文字列を含むセルの参照を指定します。</param>
        <summary>文字列内の半角 (1 バイト) 文字を全角 (2 バイト) 文字に変換します。 関数の名前 (および変換する文字) は、言語設定によって異なります。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DCount">
      <MemberSignature Language="C#" Value="public double DCount (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCount([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCount(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCount (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCount(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16424)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの中で数値が入力されているセルの個数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、エントリは検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DCountA">
      <MemberSignature Language="C#" Value="public double DCountA (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCountA([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCountA(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCountA (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCountA(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16583)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの中の空白でないセルの個数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、エントリは検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ddb">
      <MemberSignature Language="C#" Value="public double Ddb (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ddb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ddb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16528)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">取得価額: 資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">残存価額: 耐用年数が終了した時点での資産の価格を指定します。0 (ゼロ) を指定することもできます。</param>
        <param name="Arg3">耐用年数: 資産を使用できる年数、つまり償却の対象となる資産の寿命年数を指定します。</param>
        <param name="Arg4">期間: 減価償却費を求める期を指定します。期間は耐用年数と同じ単位で指定する必要があります。</param>
        <param name="Arg5">率: 償却率を指定します。率を省略すると、2 を指定したと見なされ、倍額定率法で計算が行われます。</param>
        <summary>倍額定率法 (Double-declining Balance Method) を使用して、特定の期における資産の減価償却費を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 5 つの引数はすべて正の数値である必要があります。</para>
          <para>倍額定率法では、指定された償却率で減価償却費が計算されます。 減価償却費は、最初の期が最も多く、その後の期では急速に減少します。 <b>Ddb は</b> 、次の数式を使用して、期間の減価償却費を計算します。</para>
          <code>Min( (cost - total depreciation from prior periods) * (factor/life), (cost - salvage -  total depreciation from prior periods) )
</code>
          <para>倍額定率法を使用しない場合は、率を指定します。</para>
          <para>減価償却費が定率残高計算より大きい場合に、直線減価償却方法に切り替える場合は、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" /> この関数を使用します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Bin">
      <MemberSignature Language="C#" Value="public string Dec2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 10 進の整数を指定します。 数値が負の場合、有効な場所の値は無視され <b>、Dec2Bin</b> は最も重要なビットが符号ビットである 10 文字 (10 ビット) のバイナリ番号を返します。 2 進数の最上位のビットは符号を表し、残りの 9 ビットは数値の大きさを表します。 負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">桁数: 8 進表記するときに使用する文字数 (桁数) を指定します。 場所を省略すると <b>、Dec2Bin は</b> 必要な最小文字数を使用します。 桁数を指定することによって、変換結果の先頭に 0 (ゼロ) を表示することができます。</param>
        <summary>10 進数を 2 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値 &lt; -512 または数値 &gt; 511 の場合 <b>、Dec2Bin</b> は値を返#NUM! が返されます。 </para>
          <para>数値が数値以外の場合 <b>、Dec2Bin</b> は数値を返#VALUE! が返されます。 </para>
          <para><b>Dec2Bin が複数の</b>場所の文字を必要とする場合は、文字列を返#NUM! が返されます。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合 <b>、Dec2Bin</b> は数値を返#VALUE! が返されます。 </para>
          <para>場所が 0 または負の場合 <b>、Dec2Bin</b> は値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Hex">
      <MemberSignature Language="C#" Value="public string Dec2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16772)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 10 進の整数を指定します。 数値が負の場合、場所は無視され <b>、Dec2Hex</b> は 10 文字 (40 ビット) の 16 進数を返します。最も重要なビットは符号ビットです。 16 進数の最上位のビットは符号を表し、残りの 39 ビットは数値の大きさを表します。 負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">桁数: 8 進表記するときに使用する文字数 (桁数) を指定します。 場所を省略すると <b>、Dec2Hex は</b> 必要な最小文字数を使用します。 桁数を指定することによって、変換結果の先頭に 0 (ゼロ) を表示することができます。</param>
        <summary>10 進数を 16 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値 &lt; -549,755,813,888 の場合、または番号 &gt; 549,755,813,887 の場合 <b>、Dec2Hex</b> は値を返#NUM! が返されます。 </para>
          <para>数値が数値以外の場合 <b>、Dec2Hex</b> は数値を返#VALUE! が返されます。 </para>
          <para><b>Dec2Hex に複数</b>の文字が必要な場合は、文字列を返#NUM! が返されます。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合 <b>、Dec2Hex</b> は数値を返#VALUE! が返されます。 </para>
          <para>場所が負の場合 <b>、Dec2Hex は</b> 値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Oct">
      <MemberSignature Language="C#" Value="public string Dec2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16773)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 10 進の整数を指定します。 数値が負の場合、場所は無視され <b>、Dec2Oct</b> は、最も重要なビットが符号ビットである 10 文字 (30 ビット) の 8 進数を返します。 8 進数の最上位のビットは符号を表し、残りの 29 ビットは数値の大きさを表します。 負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">桁数: 8 進表記するときに使用する文字数 (桁数) を指定します。 場所を省略すると <b>、Dec2Oct は</b> 必要な最小文字数を使用します。 桁数を指定することによって、変換結果の先頭に 0 (ゼロ) を表示することができます。</param>
        <summary>10 進数を 8 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値 &lt; -536,870,912、または番号 &gt; 536,870,911 の場合 <b>、Dec2Oct</b> は値を返#NUM! が返されます。 </para>
          <para>数値が数値以外の場合 <b>、Dec2Oct</b> は数値を返#VALUE! が返されます。 </para>
          <para><b>Dec2Oct に複数</b>の文字が必要な場合は、文字列を返#NUM! が返されます。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合 <b>、Dec2Oct は</b> 数値を返#VALUE! が返されます。 </para>
          <para>場所が負の場合 <b>、Dec2Oct は</b> 値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Decimal">
      <MemberSignature Language="C#" Value="public double Decimal (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Decimal([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Decimal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decimal (Arg1 As String, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Decimal(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16956)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する数値を指定します。</param>
        <param name="Arg2">変換する数値の基数を指定します。</param>
        <summary>指定された底の数値の文字列式を 10 進数に変換します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Degrees">
      <MemberSignature Language="C#" Value="public double Degrees (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Degrees([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Degrees (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Degrees(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16727)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">角度: 度に変換する角度を指定します。</param>
        <summary>ラジアンを度に変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public double Delta (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Delta([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Delta(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delta (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16802)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1: 一方の数値を指定します。</param>
        <param name="Arg2">数値 2: もう一方の数値を指定します。数値 2 を省略すると、0 を指定したと見なされます。</param>
        <summary>2 つの値が等しいかどうかを調べます。数値 1 = 数値 2 のとき 1 を返し、それ以外の場合は 0 を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>一連の値をフィルター処理するには、この関数を使用します。 たとえば、複数のデルタ関数を合計<b></b>して、等しいペアの数を計算します。 この関数は、Kronecker Delta 関数とも呼ばれる。</para>
          <para>数値 1 が数値以外の場合、 <b>デルタ</b> は数値を返#VALUE! が返されます。 </para>
          <para>数値 2 が数値以外の場合、 <b>デルタ</b> は数値を返#VALUE! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DevSq">
      <MemberSignature Language="C#" Value="public double DevSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DevSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DevSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DevSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16702)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 偏差の平方和を求める数値を指定します。引数は 1 ～ 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、単一配列や、配列への参照を引数として使用することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>標本の平均値に対する各データの偏差の平方和を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。 </para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。 </para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。 </para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。 </para>
          <para>偏差の平方和は、次の数式で表されます。 </para>
          <para>図 1: 二乗偏差の合計の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DGet">
      <MemberSignature Language="C#" Value="public object DGet (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DGet([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DGet(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DGet (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DGet(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの列から指定された条件を満たす 1 つの値を抽出します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、エントリは検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Disc">
      <MemberSignature Language="C#" Value="public double Disc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Disc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Disc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Disc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16819)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">現在価値: 額面 $ 100 に対する証券の価値を指定します。</param>
        <param name="Arg4">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg5">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>証券に対する割引率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。 </para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 30 年後に当たる 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効なシリアル日付番号でない場合 <b>、Disc</b> は日付を返#VALUE! が返されます。 </para>
          <para>pr ≤ 0 の場合、または引き換≤ 0 の場合は、 <b>ディスク</b> は 0 を返#NUM。 が返されます。 </para>
          <para>基準 &lt; 0 または基準 4 の場合は、 &gt; <b>ディスク</b> はデータを#NUM! が返されます。 </para>
          <para>満期日に≥場合 <b>、Disc</b> は満期日を返#NUM! が返されます。 </para>
          <para>
            <b>ディスク</b> は次のように計算されます。 </para>
          <para>図 1: Disc メソッドを計算するための数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>B = 年単位での日数。</para>
          <para>B = 利息計算の基礎となる 1 年の日数、DSM = 受渡日から満期日までの日数</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMax">
      <MemberSignature Language="C#" Value="public double DMax (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMax([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMax(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMax (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMax(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16428)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの最大値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、エントリは検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMin">
      <MemberSignature Language="C#" Value="public double DMin (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMin([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMin(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMin (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMin(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16427)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの最小値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、エントリは検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dollar">
      <MemberSignature Language="C#" Value="public string Dollar (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dollar([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dollar (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16397)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 数値、数値を含むセルの参照、または戻り値が数値となる数式を指定します。</param>
        <param name="Arg2">桁数: 小数点以下の桁数を指定します。桁数に負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) で四捨五入されます。桁数を省略すると、0 を指定したと見なされます。</param>
        <summary>数値を文字列形式に変換し、通貨記号を適用します。この関数の名前および適用される記号は、使用する言語の設定によって異なります。</summary>
        <returns>To be added.</returns>
        <remarks><para>[セル] コマンド ([書式] メニュー) を使用して数値を含むセルを書式設定し <b>、Dollar</b> 関数を使用して数値を直接書式設定する場合の主な違いは <b>、Dollar</b> が結果をテキストに変換することです。 A number formatted with the Cells command is still a number. テキスト値として入力された数値は、計算<b></b>時に数値に変換Microsoft Excel、数式で Dollar で書式設定された数値を引き続き使用できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarDe">
      <MemberSignature Language="C#" Value="public double DollarDe (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarDe([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarDe(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarDe (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarDe(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16827)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">分子: 分数として表された数値を指定します。</param>
        <param name="Arg2">分母: 分数の分母となる整数を指定します。</param>
        <summary>分数で表されたドル単位の価格を、小数表示に変換します。分数で表された証券の価格などを、小数で表す場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>分母に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>分数が 0 未満の場合 <b>、DollarDe</b> は値を#NUM! が返されます。 </para>
          <para>分数が 0 の場合 <b>、DollarDe</b> は #DIV/0 を返します。 が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarFr">
      <MemberSignature Language="C#" Value="public double DollarFr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarFr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarFr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarFr (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarFr(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16828)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">小数値: 小数で表された数値を指定します。</param>
        <param name="Arg2">分母: 分数の分母となる整数を指定します。</param>
        <summary>小数で表されたドル単位の価格を、分数表示に変換します。証券の価格などを分数で表す場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>分母に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>分数が 0 未満の場合 <b>、DollarFr</b> は値を返#NUM! が返されます。 </para>
          <para>分数が 0 の場合 <b>、DollarFr</b> は #DIV/0 を返します。 が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DProduct">
      <MemberSignature Language="C#" Value="public double DProduct (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DProduct([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DProduct(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DProduct (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DProduct(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16573)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す、引用符なしの番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの積を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、エントリは検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDev">
      <MemberSignature Language="C#" Value="public double DStDev (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDev([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDev(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDev (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDev(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16429)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードを標本と見なして、母集団の標準偏差を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、エントリは検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDevP">
      <MemberSignature Language="C#" Value="public double DStDevP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDevP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDevP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDevP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDevP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードを母集団全体と見なして、母集団の標準偏差を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、エントリは検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DSum">
      <MemberSignature Language="C#" Value="public double DSum (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DSum([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DSum(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DSum (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DSum(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16425)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの合計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、エントリは検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy19">
      <MemberSignature Language="C#" Value="public object Dummy19 (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dummy19([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy19(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy19 (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2827)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>内部使用のために予約されています。 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy21">
      <MemberSignature Language="C#" Value="public double Dummy21 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Dummy21([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy21(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy21 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Dummy21(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2826)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <summary>内部使用のために予約されています。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Duration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Duration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16842)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">利率: 証券の年利を指定します。</param>
        <param name="Arg4">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg5">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg6">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>額面を $100 と見なした証券のマコーレー デュレーションを返します。デュレーションは、キャッシュ フローの現在価値の加重平均として定義され、利回りの変化に対する債券価格の反応の指標として使用されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、頻度、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、Duration</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>クーポン &lt; 0 または yld 0 の場合 &lt; は <b>、Duration</b> は値を#NUM! が返されます。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合 <b>、Duration</b> は値を#NUM! が返されます。 </para>
          <para>基準 &lt; が 0 の場合、または基準 &gt; 4 の場合 <b>、Duration</b> は値を返#NUM。 が返されます。 </para>
          <para>満期日に≥場合 <b>、Duration</b> は満期日を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVar">
      <MemberSignature Language="C#" Value="public double DVar (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVar([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVar(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVar (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVar(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16431)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードを標本と見なして、母集団の分散を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、エントリは検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVarP">
      <MemberSignature Language="C#" Value="public double DVarP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVarP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVarP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVarP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVarP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードを母集団全体と見なして、母集団の分散を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. テキストまたは値の等値比較演算子を指定するには、条件範囲の適切なセルに、文字列式として条件を入力します。 </para>
          <para>=''=entry''</para>
          <para>ここで、エントリは検索するテキストまたは値です。 以下に例を示します。</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EDate">
      <MemberSignature Language="C#" Value="public double EDate (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EDate([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EDate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EDate (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EDate(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16833)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を表す日付を指定します。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。日付を文字列として入力した場合、エラーが発生することがあります。</param>
        <param name="Arg2">月: 開始日から起算した月数を指定します。月に正の数を指定すると、起算日より後の日付を返し、負の数を指定すると、起算日より前の日付を返します。</param>
        <summary>開始日から起算して、指定された月数だけ前または後の日付に対応するシリアル値を返します。このメソッドを使用すると、伝票の発行日と同じ日に当たる支払日や満期日の日付を計算することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>有効start_date日付でない場合 <b>、EDate</b> は日付を返#VALUE! が返されます。 </para>
          <para>月に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public double Effect (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Effect([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Effect (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Effect(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16830)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">名目利率: 名目年利率を指定します。</param>
        <param name="Arg2">複利計算回数: 1 年あたりの複利計算回数を指定します。</param>
        <summary>指定された名目年利率と 1 年あたりの複利計算回数を基に、実効年利率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>複利計算回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>いずれかの引数が数値以外の場合 <b>、Effect</b> は引数を返#VALUE! が返されます。 </para>
          <para>0 nominal_rate ≤場合、または npery &lt; 1 の場合 <b>、Effect</b> は値を#NUM! が返されます。 </para>
          <para>
            <b>効果</b> は次のように計算されます。 </para>
          <para>図 1: 効果メソッドを計算するための数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeURL">
      <MemberSignature Language="C#" Value="public object EncodeURL (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EncodeURL([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EncodeURL(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeURL (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EncodeURL(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16981)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">エンコードするテキスト。</param>
        <summary>引数が URL エンコードされます。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EoMonth">
      <MemberSignature Language="C#" Value="public double EoMonth (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EoMonth([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EoMonth(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EoMonth (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EoMonth(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16834)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を表す日付を指定します。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。日付を文字列として入力した場合、エラーが発生することがあります。</param>
        <param name="Arg2">月: 開始日から起算した月数を指定します。月に正の数を指定すると、起算日より後の日付を返し、負の数を指定すると、起算日より前の日付を返します。</param>
        <summary>開始日から起算して、指定された月数だけ前または後の月の最終日に対応するシリアル値を返します。このメソッドを使用すると、月末に発生する満期日や支払日を計算することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>有効start_date日付でない場合 <b>、EoMonth は</b> 日付を返#NUM。 が返されます。 </para>
          <para>月start_dateが無効な日付になる場合 <b>、EoMonth</b> は日付を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public double Erf (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16807)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lower_limit - <b>Erf</b>を統合する下限です。</param>
        <param name="Arg2">Upper_limit - <b>Erf</b>を統合する上限です。 省略すると、Erf は 0 と 2 の間で統合lower_limit。</param>
        <summary>下限～上限の範囲で、誤差関数の積分値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" /> してください。</para>
          <para>数値lower_limit場合 <b>、Erf は</b> 数値を返#VALUE! が返されます。 </para>
          <para>負lower_limit場合 <b>、Erf は</b> 値を返#NUM! が返されます。 </para>
          <para>数値upper_limit場合 <b>、Erf は</b> 数値を返#VALUE! が返されます。 </para>
          <para>負upper_limit場合 <b>、Erf は</b> 値を返#NUM! が返されます。 </para>
          <para>図 1: Erf メソッドを計算するための数式</para>
          <para> </para>
          <para> </para>
          <para>図 2: Erf メソッドを計算するための数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf_Precise">
      <MemberSignature Language="C#" Value="public double Erf_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Erf_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16927)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">下限: 誤差関数を積分するときの下限値を指定します。</param>
        <summary>0 ～下限の範囲で、誤差関数の積分値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>下限に数値以外の値を指定すると、エラー値が返されます。<b></b> 下限に負の値を指定すると、エラー値が返されます。<b></b></para>
          <para>図 1: メソッドの計算Erf_Precise式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC">
      <MemberSignature Language="C#" Value="public double ErfC (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16808)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">最初の引数を指定します。</param>
        <summary>指定したパラメーター～無限大の範囲で、相補誤差関数の積分値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" /> してください。</para>
          <para>この関数が使用できない場合は、その関数を#NAME。エラーが発生した場合は、Analysis ToolPak アドインをインストールして読み込む必要があります。</para>
          <para>パラメーターが数値以外の場合 <b>、ErfC は</b> 値を返#VALUE! が返されます。</para>
          <para>パラメーターが負の場合 <b>、ErfC は</b> 値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC_Precise">
      <MemberSignature Language="C#" Value="public double ErfC_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">計算する値を指定します。</param>
        <summary>指定した値～無限大の範囲で、相補誤差関数の積分値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数に数値以外の値を指定すると、エラー値が返されます。<b></b></para>
          <para>指定した値が負の場合 <b>、ErfC_Precise</b> が生成されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Even">
      <MemberSignature Language="C#" Value="public double Even (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Even([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Even(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Even (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Even(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16663)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 切り上げの対象となる数値を指定します。</param>
        <summary>指定した数値を最も近い偶数に切り上げた値を返します。この関数を使用して 2 つ 1 組のアイテムを処理することができます。たとえば、梱包容器を表す列に 1 つまたは 2 つのアイテムを入力する場合、アイテムの個数を偶数に切り上げることで、容器の収納量を把握できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が数値以外の場合 <b>、Even</b> は数値を返#VALUE! が返されます。 </para>
          <para>数値の符号に関係なく、切り上げられた値の絶対値は、数値より大きくなります。数値が既に偶数の値になっている場合、切り上げは行われません。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Expon_Dist">
      <MemberSignature Language="C#" Value="public double Expon_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Expon_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Expon_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Expon_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: 関数に代入する値を指定します。</param>
        <param name="Arg2">λ: パラメーターの値を指定します。</param>
        <param name="Arg3">関数形式: 計算に使用する指数関数の形式を論理値で指定します。 累積的な値 <b>が true の</b>場合 <b>、Expon_Dist</b> 関数が返されます。false <b>の場合</b>、確率密度関数を返します。</param>
        <summary>指数分布関数を返します。このメソッドは、銀行の ATM で現金を引き出すのにかかる時間など、イベントの間隔をモデル化する場合に使用します。たとえば、EXPON_DIST メソッドを使って、ある処理が 1 分以内に終了する確率を算出することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>x またはラムダが数値以外の場合 <b>、Expon_Distを</b> 返#VALUE! が返されます。 </para>
          <para>x &lt; 0 の場合 <b>、Expon_Dist</b> を返#NUM! が返されます。 </para>
          <para>ラムダ値≤ 0 の場合 <b>、Expon_Dist</b> を返#NUM! が返されます。 </para>
          <para>確率密度関数は、次の数式で表されます。 </para>
          <para>図 1: 確率密度関数の数式</para>
          <para> </para>
          <para> </para>
          <para>累積分布関数は、次の数式で表されます。</para>
          <para>図 2: 累積分布関数の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponDist">
      <MemberSignature Language="C#" Value="public double ExponDist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ExponDist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ExponDist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExponDist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ExponDist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16664)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: 関数に代入する値を指定します。</param>
        <param name="Arg2">λ: パラメーターの値を指定します。</param>
        <param name="Arg3">関数形式: 計算に使用する指数関数の形式を論理値で指定します。 累積値が<b>true の場合</b><b>、ExponDist は</b>累積分布関数を返します。false<b>の場合</b>、確率密度関数を返します。</param>
        <summary>指数分布関数を返します。 <b>ExponDist を</b>使用して、自動銀行の出金に要する時間など、イベント間の時間をモデル化します。 たとえば <b>、ExponDist</b> を使用して、プロセスに 1 分かかる確率を判断できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" /> してください。</para>
          <para>x またはラムダが数値以外の場合 <b>、ExponDist</b> は値を返#VALUE! が返されます。 </para>
          <para>x &lt; 0 の場合 <b>、ExponDist は</b> 値を返#NUM! が返されます。 </para>
          <para>ラムダ値≤ 0 の場合 <b>、ExponDist は</b> 値を#NUM! が返されます。 </para>
          <para>確率密度関数は、次の数式で表されます。 </para>
          <para>図 1: 確率密度関数の数式</para>
          <para> </para>
          <para> </para>
          <para>累積分布関数は、次の数式で表されます。</para>
          <para>図 2: 累積分布関数の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist">
      <MemberSignature Language="C#" Value="public double F_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16915)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">Deg_freedom1: 自由度の分子を指定します。</param>
        <param name="Arg3">Deg_freedom2: 自由度の分母を指定します。</param>
        <param name="Arg4">累積 - 関数の形式を決定する論理値。 累積的な値 <b>が true の</b>場合 <b>、F_Dist</b> 関数を返します。false <b>の場合</b>、確率密度関数を返します。</param>
        <summary>F 分布の確率関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合は <b>、F_Dist</b> を返#VALUE! が返されます。 </para>
          <para>x が負の場合 <b>、F_Dist</b> を返#NUM! が返されます。 </para>
          <para>deg_freedom1 または deg_freedom2 に正数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>1 deg_freedom1 &lt; 場合 <b>、F_Dist</b> を返#NUM! が返されます。 </para>
          <para>1 deg_freedom &lt; 場合は <b>、F_Dist</b> を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist_RT">
      <MemberSignature Language="C#" Value="public double F_Dist_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">自由度 1: 自由度の分子を指定します。</param>
        <param name="Arg3">自由度 2: 自由度の分母を指定します。</param>
        <summary>F 分布の右側確率関数の値を返します。この関数を使用すると、2 組のデータを比較して、ばらつきが両者で異なるかどうかを調べることができます。たとえば、テストの成績を男女別に分析して、男子生徒の成績と女子生徒の成績のばらつきが異なるかどうかを検定することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合は <b>、F_Dist_RT</b> を返#VALUE! が返されます。 </para>
          <para>x が負の場合は <b>、F_Dist_RT</b> を返#NUM! が返されます。 </para>
          <para>自由度 1 または自由度 2 に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>&lt;1 degrees_freedom1または 10^10 degrees_freedom1 ≥場合は、F_Dist_RTを<b></b>返#NUM! が返されます。 </para>
          <para>&lt;1 degrees_freedom2または 10^10 degrees_freedom2 ≥場合は、F_Dist_RTを<b></b>返#NUM! が返されます。 </para>
          <para>
            <b>F_Dist_RT</b> は F_DIST_RT=P( F x) として計算されます。ここで、F は、自由度が degrees_freedom1 および degrees_freedom2 の F 分布を持つランダム &gt; 変数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv">
      <MemberSignature Language="C#" Value="public double F_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16917)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: F 累積分布に関連する確率を指定します。</param>
        <param name="Arg2">Deg_freedom1: 自由度の分子を指定します。</param>
        <param name="Arg3">Deg_freedom2: 自由度の分母を指定します。</param>
        <summary>F 分布の確率関数の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合は <b>、F_Inv</b> を返#VALUE! が返されます。 </para>
          <para>確率 &lt; 0 または確率 1 の場合、F_Inv &gt; を返#NUM! <b></b> が返されます。 </para>
          <para>deg_freedom1 または deg_freedom2 に正数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>&lt;1 deg_freedom1または 1 の場合 &lt; deg_freedom2、F_Invを<b></b>返#NUM。 が返されます。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv_RT">
      <MemberSignature Language="C#" Value="public double F_Inv_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16918)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: F 累積分布に関連する確率を指定します。</param>
        <param name="Arg2">自由度 1: 自由度の分子を指定します。</param>
        <param name="Arg3">自由度 2: 自由度の分母を指定します。</param>
        <summary>F 分布の右側確率関数の逆関数の値を返します。つまり、確率 = F_DIST_RT(x,...) であるとき、F_INV_RT(確率,...) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>F 確率分布は、2 組のデータのばらつきを比較する F 検定で使用されます。たとえば、合衆国と日本の労働者の年収を比較し、両国で年収の分布に類似性があるかどうかを分析することができます。</para>
          <para>引数が数値以外の場合は <b>、F_Inv_RT</b> を返#VALUE! が返されます。 </para>
          <para>確率 &lt; 0 または確率 1 の場合、F_Inv_RT &gt; を返#NUM! <b></b> が返されます。 </para>
          <para>自由度 1 または自由度 2 に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>&lt;1 degrees_freedom1または 10^10 degrees_freedom1 ≥場合は、F_Inv_RTを<b></b>返#NUM! が返されます。 </para>
          <para>&lt;1 degrees_freedom2または 10^10 degrees_freedom2 ≥場合は、F_Inv_RTを<b></b>返#NUM! が返されます。</para>
          <para>
            <b>F_Inv_RT</b> F 分布から重要な値を返す場合に使用できます。 たとえば、ANOVA 関数の戻り値には、F 統計量、F 確率、有意水準が 0.05 である F 境界値に対するデータが含まれることがよくあります。 F のクリティカル値を返す場合は、有意水準を確率引数として使用<b></b>して、F_Inv_RT。</para>
          <para>確率の値を指定すると、F_Inv_RTは、F_DIST_RT(x、degrees_freedom1、degrees_freedom2) = 確率などの値 x を求める。 <b></b> したがって、データの精度 <b>F_Inv_RT</b> の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> 。 <b>F_Inv_RTは</b> 反復検索手法を使用します。 64 回反復計算を繰り返しても計算結果が収束しない場合、エラー値 #N/A が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Test">
      <MemberSignature Language="C#" Value="public double F_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16875)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 比較対象となる一方のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 比較対象となるもう一方のデータを含む配列またはセル範囲を指定します。</param>
        <summary>F 検定の結果を返します。F 検定により、配列 1 と配列 2 とのデータのばらつきに有意な差が認められない両側確率が返されます。この関数を利用すると、2 つの高等学校で同じテストを実施した場合、両校の生徒の成績に有意な差が認められるかどうかを調べることができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>array1 または array2 のデータ ポイント数が 2 未満の場合、または array1 または array2<b></b>の分散が 0 の場合、F_Test は #DIV/0 を返します。 が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public double Fact (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fact([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fact(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fact (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fact(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 階乗を求める正の数値を指定します。数値に整数以外の値を指定すると、小数点以下が切り捨てられます。数値に負の数を指定すると、エラー値 #NUM! が返されます。</param>
        <summary>数値の階乗を返します。 数値の要因は、1 *2 3**... number に等* しくなります。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactDouble">
      <MemberSignature Language="C#" Value="public double FactDouble (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FactDouble([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FactDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FactDouble (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FactDouble(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16799)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 二重階乗を求める数値を指定します。数値に整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <summary>数値の二重階乗を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が数値以外の場合 <b>、FactDouble は</b> 数値を返#VALUE! が返されます。 </para>
          <para>数値が負の場合 <b>、FactDouble は</b> 値を#NUM! が返されます。 </para>
          <para>数値に偶数を指定した場合は、次の数式が成立します。 </para>
          <para>図 1: even の数式</para>
          <para> </para>
          <para> </para>
          <para>数値に奇数を指定した場合は、次の数式が成立します。</para>
          <para>図 2: 奇数の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FDist">
      <MemberSignature Language="C#" Value="public double FDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16665)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">自由度 1: 自由度の分子を指定します。</param>
        <param name="Arg3">自由度 2: 自由度の分母を指定します。</param>
        <summary>F 分布の確率関数の値を返します。この関数を使用すると、2 組のデータを比較して、ばらつきが両者で異なるかどうかを調べることができます。たとえば、テストの成績を男女別に分析して、男子生徒の成績と女子生徒の成績のばらつきが異なるかどうかを検定することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> 参照してください。</para>
          <para>引数が数値以外の場合 <b>、FDist は</b> 引数を返#VALUE! が返されます。 </para>
          <para>x が負の場合 <b>、FDist は</b> 値を返#NUM! が返されます。 </para>
          <para>自由度 1 または自由度 2 に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>&lt;1 degrees_freedom1または 10^10 degrees_freedom1 ≥場合<b>、FDist</b>は値を#NUM! が返されます。 </para>
          <para>&lt;1 degrees_freedom2または 10^10 degrees_freedom2 ≥場合<b>、FDist</b>は値を#NUM! が返されます。 </para>
          <para>
            <b>FDist は</b> FDIST=P( F x) として計算されます。ここで、F は、自由度が degrees_freedom1 および degrees_freedom2 の F 分布を持つランダム変数 &gt; です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterXML">
      <MemberSignature Language="C#" Value="public object FilterXML (string Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FilterXML([in]string Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FilterXML(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterXML (Arg1 As String, Arg2 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FilterXML(System::String ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16979)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">有効な xml 文字列。</param>
        <param name="Arg2">XPath クエリ文字列。</param>
        <summary>返された XML (通常は <b>WebService</b> 関数呼び出しから返された XML) から特定のデータを取得します。</summary>
        <returns><b>VARIANT</b></returns>
        <remarks><para>XPath パラメーターは 1024 文字に制限されています。</para>
          <para><b>FILTERXML</b> 関数が返す結果は、ユーザー指定のデータ ロケールを介して解析されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public double Find (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Find([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16508)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">ワークシートの名前を指定します。</param>
        <param name="Arg2">範囲の名前を指定します。</param>
        <param name="Arg3">検索を調整する引数の名前を指定します。</param>
        <summary>ワークシートで特定の情報を検索します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindB">
      <MemberSignature Language="C#" Value="public double FindB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FindB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16589)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検索文字列: 検索する文字列を指定します。</param>
        <param name="Arg2">対象: 検索文字列を含む文字列を指定します。</param>
        <param name="Arg3">開始位置: 検索を開始する位置を指定します。対象の先頭文字から検索を開始するときは 1 を指定します。開始位置を省略すると、1 を指定したと見なされます。</param>
        <summary><see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /><b>FindB は、2</b>番目のテキスト文字列内の 1 つのテキスト文字列を検索し、2 番目のテキスト文字列の最初の文字から最初のテキスト文字列の開始位置の番号を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 1 バイト文字セット (SBCS) を使用する言語で使用することを目的としていますが <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>、FindB</b> は 2 バイト文字セット (DBCS) を使用する言語で使用することを目的としています。 コンピューターの既定の言語の設定に応じて、戻り値は次のようになります。</para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> 既定の言語設定に関係なく、1 バイトまたは 2 バイトの各文字は常に 1 としてカウントされます。</description>
            </item>
            <item>
              <description>
                <b>FindB</b> は、DBCS をサポートする言語の編集を有効にし、既定の言語として設定すると、各 2 バイト文字を 2 としてカウントします。 それ以外の場合 <b>、FindB</b> は各文字を 1 としてカウントします。</description>
            </item>
          </list>
          <para>DBCS をサポートする言語には、日本語、簡体字中国語、繁体字中国語、および韓国語があります。</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /><b>FindB では大文字</b>と小文字が区別され、ワイルドカード文字は使用できません。 大文字と小文字を区別する検索を行いたくない場合や、ワイルドカード文字を使用しない場合は、 を使用 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" /> できます <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> 。 </para>
          <para>"find_text" (空のテキスト) の場合は、検索文字列の最初の文字 (つまり、1 または 1) の番号start_num <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> 一致します。 </para>
          <para>検索文字列にワイルドカード文字を使うことはできません。</para>
          <para>このfind_textに表示されない場合 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>、FindB</b> はwithin_textを返#VALUE! が返されます。 </para>
          <para>値start_num 0 より大きくなって <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>、FindB</b> が値を返#VALUE! が返されます。 </para>
          <para>指定start_numの長さより大きい場合 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>、FindB</b> はwithin_text値を返#VALUE! が返されます。 </para>
          <para>指定start_numをスキップするには、次のコマンドを使用します。 例 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> として、テキスト文字列 "AYF0093" を使用するとします。YoungMensApparel」 テキスト文字列の説明部分の最初の "Y" の番号を検索するには、start_num を 8 に設定して、テキストのシリアル番号部分が検索されない。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> 文字 8 で始まり、次find_textの文字を検索し、数値 9 を返します。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> 常に、1 より大きい場合はスキップするwithin_text数をカウントし、start_numの開始から文字数を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FInv">
      <MemberSignature Language="C#" Value="public double FInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: F 累積分布に関連する確率を指定します。</param>
        <param name="Arg2">自由度 1: 自由度の分子を指定します。</param>
        <param name="Arg3">自由度 2: 自由度の分母を指定します。</param>
        <summary>F 分布の確率関数の逆関数の値を返します。つまり、確率 = FDIST(x,...) であるとき、FINV(確率,...) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" /> 参照してください。</para>
          <para>F 確率分布は、2 組のデータのばらつきを比較する F 検定で使用されます。たとえば、合衆国と日本の労働者の年収を比較し、両国で年収の分布に類似性があるかどうかを分析することができます。</para>
          <para>引数が数値以外の場合 <b>、FInv</b> は引数を返#VALUE! が返されます。 </para>
          <para>確率 &lt; 0 または確率 &gt; 1 の場合 <b>、FInv</b> は値を返#NUM! が返されます。 </para>
          <para>自由度 1 または自由度 2 に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>&lt;1 degrees_freedom1または 10^10 degrees_freedom1 ≥場合<b>、FInv</b>は値を返#NUM。 が返されます。 </para>
          <para>&lt;1 degrees_freedom2または 10^10 degrees_freedom2 ≥場合<b>、FInv</b>は値を返#NUM。 が返されます。</para>
          <para>
            <b>FInv は</b> 、F 分布から重要な値を返す場合に使用できます。 たとえば、ANOVA 関数の戻り値には、F 統計量、F 確率、有意水準が 0.05 である F 境界値に対するデータが含まれることがよくあります。 F のクリティカル値を返す場合は、有意水準を FInv の確率引数 <b>として使用します</b>。</para>
          <para>確率の値を指定すると <b>、FInv</b> は FDIST(x、degrees_freedom1、degrees_freedom2) = 確率などの値 x を求める。 したがって <b>、FInv の精度は</b> 、 の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" /> 。 <b>FInv は反復</b> 検索手法を使用します。 64 回反復計算を繰り返しても計算結果が収束しない場合、エラー値 #N/A が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fisher">
      <MemberSignature Language="C#" Value="public double Fisher (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fisher([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fisher(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fisher (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fisher(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16667)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 変換の対象となる数値を指定します。</param>
        <summary>x に対するフィッシャー変換の値を返します。この関数を使うと、非対称分布を正規分布に変換することができます。この関数は、相関係数の仮説検定を行うときに使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>x が数値以外の場合 <b>、Fisher</b> は値を#VALUE! が返されます。 </para>
          <para>x が -1 の≤場合、または x が 1 の場合 <b>≥、Fisher</b> は値を返#NUM! が返されます。 </para>
          <para>フィッシャー変換は、次の数式で表されます。</para>
          <para>図 1: Fisher 変換の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FisherInv">
      <MemberSignature Language="C#" Value="public double FisherInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FisherInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FisherInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FisherInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FisherInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16668)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">y: 逆変換の対象となる値を指定します。</param>
        <summary>フィッシャー変換の逆関数を返します。このメソッドは、データ範囲または配列間の相関を分析する場合に使用します。y = FISHER(x) であるとき、FISHERINV(y) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>y が数値以外の場合 <b>、FisherInv は</b> 値を#VALUE! が返されます。 </para>
          <para>フィッシャー変換の逆関数は、次の数式で表されます。</para>
          <para>図 1: 逆フィッシャー変換の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixed">
      <MemberSignature Language="C#" Value="public string Fixed (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Fixed([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fixed(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fixed (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 四捨五入して文字列に変換する数値を指定します。</param>
        <param name="Arg2">桁数: 小数点以下の桁数を指定します。指定した桁数に四捨五入します。</param>
        <param name="Arg3">No_commas - true の場合、Fixed<b></b>が返されるテキスト<b></b>にコンマを含めない論理値です。</param>
        <summary>数値を四捨五入し、ピリオド (.) とコンマ (,) を使って書式設定した文字列に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel で扱うことができる数値の最大有効桁数は 15 桁ですが、桁数には 127 までの整数を指定することができます。</para>
          <para>桁数に負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) で四捨五入されます。</para>
          <para>桁数を省略すると、0 を指定したと見なされます。</para>
          <para>引数no_commas false または <b>省略</b> すると、返されるテキストには通常どおりコンマが含まれます。 </para>
          <para>[セル] コマンド ([書式] メニュー) を使用して数値を含むセルを書式設定し、FIXED 関数を使用して数値を直接書式設定する主な違いは <b>、Fixed</b> が結果をテキストに変換することです。 A number formatted with the Cells command is still a number.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public double Floor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Floor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16669)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 対象となる数値を指定します。</param>
        <param name="Arg2">基準値: 倍数の基準となる数値を指定します。</param>
        <summary>指定された基準値の倍数のうち、最も近い値に数値を切り捨てます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" /> してください。</para>
          <para>いずれかの引数が数値以外の場合 <b>、Floor</b> は引数を#VALUE! が返されます。 </para>
          <para>数値と有意性に異なる記号がある場合 <b>、Floor</b> は値を#NUM! が返されます。 </para>
          <para>数値の符号に関係なく、値は 0 から調整すると切り捨てされます。 数値が既に基準値の倍数になっている場合は、その値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Math">
      <MemberSignature Language="C#" Value="public double Floor_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16976)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">丸める数値。</param>
        <param name="Arg2">数値を丸める対象の倍数。</param>
        <param name="Arg3">0 以外の数値が指定されると、この関数は 0 に丸めます。</param>
        <summary>最も近い整数値、または基準値の倍数のうちで最も近い値に切り下げます。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Precise">
      <MemberSignature Language="C#" Value="public double Floor_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16931)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 対象となる数値を指定します。</param>
        <param name="Arg2">基準値: 倍数の基準となる数値を指定します。</param>
        <summary>指定された基準値の倍数のうち、最も近い値に数値を丸めます。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>Floor_Precise</b> メソッドで切り上げと切り捨てのどちらが行われるかは、数値と基準値の引数の符号によって決まります。</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>切り上げ</description>
            </item>
            <item>
              <term>+/+</term>
              <description>切り捨て</description>
            </item>
            <item>
              <term>-/+</term>
              <description>切り上げ</description>
            </item>
            <item>
              <term>+/-</term>
              <description>切り捨て</description>
            </item>
          </list>
          <para>いずれかの引数が数値以外の場合 <b>、Floor_Preciseメソッド</b> はエラーを生成します。 </para>
          <para>数値が既に基準値の倍数になっている場合は、その値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Forecast">
      <MemberSignature Language="C#" Value="public double Forecast (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Forecast([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Forecast(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Forecast (Arg1 As Double, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Forecast(double Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16693)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - 値を予測するデータ ポイント。</param>
        <param name="Arg2">Known_y - 依存する配列またはデータ範囲。</param>
        <param name="Arg3">Known_x - 独立した配列またはデータ範囲。</param>
        <summary>既知の値を使用し、将来の値を予測します。予測する値は、x の値に対する y の値です。既知の x と既知の y から得られる回帰線上で、x の値に対する従属変数 (y) の値を予測します。この関数を使うと、将来の売上高、商品在庫量、消費動向などを予測できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>x が数値以外の場合 <b>、Forecast</b> は数値を返#VALUE! が返されます。 </para>
          <para>データ known_yと known_xが空の場合、または異なる数のデータ ポイントが含まれている場合 <b>、Forecast</b> はエラー値 #N値を返します。 </para>
          <para>データの分散が 0 known_xの場合 <b>、Forecast</b> は値 #DIV/0 を返します。 が返されます。 </para>
          <para>Forecast の数式 <b>は</b> a+bx で、次の式を使用します。 </para>
          <para>図 1: Forecast メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>そして：</para>
          <para>図 2: Forecast メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x と y は AVERAGE(known_x) と AVERAGE(既知の y's) を意味します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public object Frequency (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Frequency([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Frequency(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Frequency (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Frequency(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16636)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データ配列: 頻度調査の対象となるデータを含む配列またはセル範囲を指定します。 値data_array場合 <b>、Frequency</b> はゼロの配列を返します。</param>
        <param name="Arg2">区間配列: データ配列で指定したデータをグループ化するため、値の間隔を配列またはセル範囲として指定します。 指定bins_array値が含まれている場合 <b>、Frequency</b> は値の要素数をdata_array。</param>
        <summary>範囲内でのデータの頻度分布を、縦方向の数値の配列として返します。 たとえば、[頻度] <b>を使用</b> して、スコアの範囲内にあるテスト スコアの数をカウントします。 Frequency は <b>配列</b> を返すので、配列の数式として入力する必要があります。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>返</b> される分布を表示する隣接セルの範囲を選択した後、周波数は配列数式として入力されます。 </para>
          <para>返された配列要素の個数は、区間配列の個数より 1 つだけ多くなっています。 この追加された配列要素には、最も高い間隔を超えた値の個数が返されます。 たとえば、3 つのセルに入力される 3 つの範囲の値 (間隔) を数える<b></b>場合は、結果の [頻度] を 4 つのセルに入力してください。 余分のセルには、3 つ目の間隔を超えたデータ配列の値の個数が返されます。 </para>
          <para>
            <b>頻度は</b> 空白のセルとテキストを無視します。 </para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public double FTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16694)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 比較対象となる一方のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 比較対象となるもう一方のデータを含む配列またはセル範囲を指定します。</param>
        <summary>F 検定の結果を返します。F 検定により、配列 1 と配列 2 とのデータのばらつきに有意な差が認められない両側確率が返されます。この関数を利用すると、2 つの高等学校で同じテストを実施した場合、両校の生徒の成績に有意な差が認められるかどうかを調べることができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" /> してください。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>array1 または array2 のデータ ポイント数が 2 未満の場合、または array1 または array2 の分散が 0 の場合 <b>、FTest</b> は #DIV/0 を返します。 が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fv">
      <MemberSignature Language="C#" Value="public double Fv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。</param>
        <param name="Arg2">期間: 投資期間全体での支払い回数の合計を指定します。</param>
        <param name="Arg3">定期支払額: 毎回の支払額を指定します。投資期間内に支払額を変更することはできません。通常、定期支払額には元金と利息が含まれますが、その他の手数料や税金は含まれません。定期支払額を省略した場合は、現在価値を必ず指定してください。</param>
        <param name="Arg4">現在価値: 現在の投資額、または、将来行われる一連の支払いを現時点で一括払いした場合の合計金額を指定します。現在価値を省略した場合は 0 (ゼロ) を指定したと見なされ、定期支払額を指定する必要があります。</param>
        <param name="Arg5">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。支払期日を省略すると、0 を指定したと見なされます。</param>
        <summary>定額の支払いを定期的に行い、利率が一定であると仮定して、投資の将来価値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>Fv</b>の引数の詳細と、年金関数の詳細については、を参照してください <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> 。</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。</para>
          <para>すべての引数に関して、定額預金の支払いのような出金は負の数で表し、配当金のような入金は正の数で表します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FVSchedule">
      <MemberSignature Language="C#" Value="public double FVSchedule (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FVSchedule([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FVSchedule(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FVSchedule (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FVSchedule(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">元金: 投資の現在価値を指定します。</param>
        <param name="Arg2">利率配列: 投資期間内の変動金利を配列として指定します。</param>
        <summary>投資期間内の一連の金利を複利計算することにより、初期投資の元金の将来価値を返します。このメソッドは、金利が変動または調整されるような投資の将来価値を計算する場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>スケジュール内の値には、数値または空白のセルを指定できます。その他の値を指定すると、#VALUE! <b>FVSchedule のエラー値</b>。 空白のセルは、ゼロ (関心なし) として取られます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public double Gamma (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16959)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">ガンマを計算する対象の値。</param>
        <summary>Gamma 関数の値を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Dist">
      <MemberSignature Language="C#" Value="public double Gamma_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: ガンマ分布のパラメーターを指定します。 beta = 1 の場合 <b>、Gamma_Dist</b> ガンマ分布を返します。</param>
        <param name="Arg4">関数形式: 関数値の形式を、論理値で指定します。 累積的な値 <b>が true の</b>場合 <b>、Gamma_Dist</b> 関数を返します。false <b>の場合</b>、確率密度関数を返します。</param>
        <summary>ガンマ分布関数の値を返します。この関数を使うと、正規分布に従わないデータの分析を行うことができます。ガンマ分布は待ち行列分析などで使用されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>x、α、または beta が数値以外の場合は、Gamma_Dist <b>を返</b> #VALUE! が返されます。 </para>
          <para>x &lt; 0 の場合 <b>、Gamma_Dist</b> を返#NUM! が返されます。 </para>
          <para>アルファ値≤ 0 の場合、または beta ≤ 0 の場合 <b>Gamma_Distを返</b> #NUM! が返されます。 </para>
          <para>ガンマ確率密度関数は、次の数式で表されます。 </para>
          <para>図 1: ガンマ確率密度関数</para>
          <para> </para>
          <para> </para>
          <para>また、標準ガンマ確率密度関数は、次の数式で表されます。</para>
          <para>図 2: 標準ガンマ確率密度関数</para>
          <para> </para>
          <para> </para>
          <para>アルファ = 1 の場合、 <b>次Gamma_Dist</b> 指数分布を返します。</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para>正の整数 n の場合、α = n/2、beta = 2、累積 = <b>true</b>の場合 <b>、Gamma_Dist</b> は n 自由度 (1 - CHIDIST(x)) を返します。 </para>
          <para>アルファが正の整数の場合 <b>、Gamma_Dist</b> は Erlang 分布とも呼ばれる。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Inv">
      <MemberSignature Language="C#" Value="public double Gamma_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: ガンマ確率分布における確率を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: ガンマ分布のパラメーターを指定します。 beta = 1 の場合 <b>、Gamma_Inv</b> ガンマ分布を返します。</param>
        <summary>ガンマ分布の累積分布関数の逆関数の値を返します。つまり、確率 = GAMMA_DIST(x,...) であるとき、GAMMA_INV(確率,...) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>この関数は、正規分布に従わないと見られる変数を分析する場合に使います。</para>
          <para>引数が text の場合 <b>、Gamma_Inv</b> を返#VALUE! が返されます。 </para>
          <para>確率 &lt; 0 または確率 1 の場合、Gamma_Inv &gt; を返#NUM! <b></b> が返されます。 </para>
          <para>アルファ値≤ 0 の場合、またはベータ版≤ 0 の場合 <b>Gamma_Invを返</b> #NUM! が返されます。</para>
          <para>確率の値を指定すると、Gamma_Invは、GAMMA_DIST(x、α、ベータ、TRUE) = 確率などの値 x を求める必要があります。 <b></b> したがって、データの精度 <b>Gamma_Inv</b> の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> 。 <b>Gamma_Inv</b> は反復検索手法を使用します。 100 回反復計算を繰り返しても計算結果が収束しない場合、エラー値 #N/A が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaDist">
      <MemberSignature Language="C#" Value="public double GammaDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16670)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: ガンマ分布のパラメーターを指定します。 beta = 1 の場合 <b>、GammaDist は</b> 標準ガンマ分布を返します。</param>
        <param name="Arg4">関数形式: 関数値の形式を、論理値で指定します。 累積値が<b>true の場合</b><b>、GammaDist は</b>累積分布関数を返します。false<b>の場合</b>、確率密度関数を返します。</param>
        <summary>ガンマ分布関数の値を返します。この関数を使うと、正規分布に従わないデータの分析を行うことができます。ガンマ分布は待ち行列分析などで使用されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 ただし、下位互換性が必要ない場合は、機能をより正確に記述するために、今後は新しい関数の使用を検討する必要があります。新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> してください。</para>
          <para>x、α、または beta が数値以外の場合 <b>、GammaDist</b> は数値を返#VALUE! が返されます。 </para>
          <para>x &lt; 0 の場合 <b>、GammaDist は</b> 次の値を#NUM! が返されます。 </para>
          <para>アルファ値≤ 0 の場合、または beta ≤ 0 の場合 <b>、GammaDist</b> は値を#NUM! が返されます。 </para>
          <para>ガンマ確率密度関数は、次の数式で表されます。 </para>
          <para>図 1: ガンマ確率密度関数</para>
          <para> </para>
          <para> </para>
          <para>また、標準ガンマ確率密度関数は、次の数式で表されます。</para>
          <para>図 2: 標準ガンマ確率密度関数</para>
          <para> </para>
          <para> </para>
          <para>アルファ = 1 の場合 <b>、GammaDist は</b> 次の指数分布を返します。</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para>正の整数 n の場合、α = n/2、beta = 2、累積 = <b>true</b>の場合 <b>、GammaDist</b> は n 自由度 (1 - CHIDIST(x)) を返します。 </para>
          <para>α が正の整数の場合 <b>、GammaDist</b> は Erlang 分布とも呼ばれる。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaInv">
      <MemberSignature Language="C#" Value="public double GammaInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16671)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: ガンマ確率分布における確率を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: ガンマ分布のパラメーターを指定します。 beta = 1 の場合 <b>、GammaInv は</b> 標準ガンマ分布を返します。</param>
        <summary>ガンマ分布の累積分布関数の逆関数の値を返します。つまり、確率 = GAMMADIST(x,...) であるとき、GAMMAINV(確率,...) = x となるような x の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 ただし、下位互換性が必要ない場合は、機能をより正確に記述するために、今後は新しい関数の使用を検討する必要があります。新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" /> してください。</para>
          <para>この関数は、正規分布に従わないと見られる変数を分析する場合に使います。</para>
          <para>引数が text の場合 <b>、GammaInv</b> は引数を返#VALUE! が返されます。 </para>
          <para>確率 &lt; 0 または確率 &gt; 1 の場合 <b>、GammaInv</b> は値を返#NUM! が返されます。 </para>
          <para>アルファ値≤ 0 の場合、または beta ≤ 0 の場合 <b>、GammaInv</b> は値を#NUM! が返されます。</para>
          <para>確率の値を指定すると <b>、GammaInv</b> は、その値 x を求めて、GAMMADIST(x、α、ベータ、TRUE) = 確率を求める。 したがって <b>、GammaInv の精度は</b> 、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" /> の精度に依存します。 <b>GammaInv は反復</b> 検索手法を使用します。 64 回反復計算を繰り返しても計算結果が収束しない場合、エラー値 #N/A が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn">
      <MemberSignature Language="C#" Value="public double GammaLn (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16655)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <summary>ガンマ関数Γ(x) の値の自然対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" /> してください。</para>
          <para>x が数値以外の場合 <b>、GammaLn</b> は数値を返#VALUE! が返されます。 </para>
          <para>x が 0 の <b>≤、GammaLn</b> は値を返#NUM! が返されます。 </para>
          <para>i を整数とするとき、自然対数の底 e の GAMMALN(i) 乗は (i-1)! と等しくなります。</para>
          <para>
            <b>GammaLn</b> は次のように計算されます。 </para>
          <para>図 1: GammaLn メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn_Precise">
      <MemberSignature Language="C#" Value="public double GammaLn_Precise (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn_Precise([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn_Precise (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn_Precise(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16929)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <summary>ガンマ関数Γ(x) の値の自然対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>x に数値以外の値を指定すると、エラー値が返されます。<b></b></para>
          <para>x ≤ 0 の場合 <b>、GammaLn_Preciseメソッド</b> はエラーを生成します。 </para>
          <para>i を整数とするとき、自然対数の底 e の GAMMALN(i) 乗は (i-1)! と等しくなります。</para>
          <para>GammaLn メソッドの値は、次の数式で計算されます。 </para>
          <para>図 1: メソッドの数式GammaLn_Preciseします。</para>
          <para> </para>
          <para> </para>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gauss">
      <MemberSignature Language="C#" Value="public double Gauss (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gauss([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gauss(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gauss (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gauss(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16961)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">分布を求める値を指定します。</param>
        <summary>標準正規分布の累積分布関数より小さい 0.5 を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gcd">
      <MemberSignature Language="C#" Value="public double Gcd (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gcd(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gcd (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 最大公約数を求める数値を指定します。引数は 1 ～ 29 個まで指定できます。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>複数の整数の最大公約数を返します。最大公約数とは、引数の数値 1、数値 2 … に指定されたすべての整数に共通する約数の中で、最も大きい約数をいいます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合 <b>、Gcd は</b> 引数を返#VALUE! が返されます。 </para>
          <para>引数が 0 未満の場合 <b>、Gcd は</b> 引数を返#NUM! が返されます。 </para>
          <para>1 はあらゆる整数の約数となります。</para>
          <para>素数には、その数自体と 1 以外に約数がありません。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeoMean">
      <MemberSignature Language="C#" Value="public double GeoMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeoMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeoMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeoMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16703)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 相乗平均を計算するため、最大 30 個までの数値を指定できます。半角のコンマ (,) で区切られた引数の代わりに、数値配列または配列に対するセル参照を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>正の数から成る配列またはセル範囲のデータの相乗平均を返します。GeoMean メソッドを利用すると、利率が変動する場合の複利計算で、平均成長率を計算することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ ポイントが 0 ≤場合 <b>、GeoMean は</b> データを#NUM! が返されます。 </para>
          <para>相乗平均は次の式で与えられます。 </para>
          <para>図 1: 幾何学的平均の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeStep">
      <MemberSignature Language="C#" Value="public double GeStep (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeStep([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeStep(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeStep (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16803)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: しきい値と比較する値を指定します。</param>
        <param name="Arg2">しきい値: しきい値となる値を指定します。 ステップの値を省略すると <b>、GeStep は 0 を</b> 使用します。</param>
        <summary>ステップの番号が 1 の≥します。それ以外の場合は 0 (ゼロ) を返します。 一連の値をフィルター処理するには、この関数を使用します。 たとえば、複数の <b>GeStep</b> 関数を合計して、しきい値を超える値の数を計算します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合 <b>、GeStep</b> は引数を返#VALUE! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Growth">
      <MemberSignature Language="C#" Value="public object Growth (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Growth([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Growth (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16436)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 既にわかっている y の値の系列で、y = b*m^x という関係が成り立ちます。</param>
        <param name="Arg2">既知の x: 既にわかっている x の値の系列で、y = b*m^x という関係になります。この引数は省略してもかまいません。</param>
        <param name="Arg3">New_x - Growth が対応する y 値を<b></b>返す新しい x 値。</param>
        <param name="Arg4">定数: 定数 b を 1 にするかどうかを論理値で指定します。</param>
        <summary>既存のデータを使用して予測される指数関数的な増加を計算します。 <b>Growth</b> は、既存の x 値と y 値を使用して指定した一連の新しい x 値の y 値を返します。 また、Growth ワークシート関数 <b>を</b> 使用して、指数曲線を既存の x 値と y 値に合わせて調整することもできます。</summary>
        <returns>To be added.</returns>
        <remarks><para>既知の y の配列が 1 つの列に入力されている場合、既知の x の各列はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の y の配列が 1 つの行に入力されている場合、既知の x の各行はそれぞれ異なる変数であると見なされます。</para>
          <para>値の数値が 0 または負known_y場合 <b>、Growth</b> は値を返#NUM! が返されます。 </para>
          <para>既知の x の配列には、1 つまたは複数の変数の系列を指定することができます。変数の系列が 1 つである場合、既知の y と既知の x は、両者の次元が同じであれば、どのような形の範囲であってもかまいません。変数の系列が複数である場合、既知の y は 1 行または 1 列のセル範囲でなければなりません。</para>
          <para>既知の x を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>新しい x には、既知の x と同様にそれぞれ独立した変数が入力されている 1 つの列 (または 1 つの行) を指定する必要があります。既知の y が 1 つの列に入力されている場合、既知の x と新しい x は同じ列数でなければなりません。また、既知の y が 1 つの行に入力されている場合、既知の x と新しい x は同じ行数でなければなりません。</para>
          <para>新しい x を省略すると、既知の x と同じ値であると見なされます。</para>
          <para>既知の x と新しい x の両方を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>const が true <b>または省略</b> された場合、b は通常計算されます。 </para>
          <para>const が <b>false の場合</b>、b は 1 に設定され、m 値は y = m^x に調整されます。 </para>
          <para>計算結果が配列となる数式は、適切なセル範囲を選択した後、その中に配列数式として入力する必要があります。</para>
          <para>既知の x のような引数に配列定数を指定するときは、半角のコンマ (,) を使って同じ行の値を区切り、半角のセミコロン (;) を使って各行を区切ります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HarMean">
      <MemberSignature Language="C#" Value="public double HarMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HarMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HarMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HarMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16704)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 相乗平均を計算するため、最大 30 個までの数値を指定できます。半角のコンマ (,) で区切られた引数の代わりに、数値配列または配列に対するセル参照を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>1 組の数値の調和平均を返します。調和平均は、逆数の算術平均 (相加平均) に対する逆数として定義されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>調和平均、相乗平均、相加平均の間には、調和平均 <= 相乗平均 <= 相加平均という関係が成り立ちます。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ ポイントが 0 の <b>≤、HarMean</b> はデータを#NUM! が返されます。 調和平均は次の式で計算されます。 </para>
          <para>図 1: 調和平均の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Bin">
      <MemberSignature Language="C#" Value="public string Hex2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16768)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 16 進数を文字列として指定します。数値に指定できる文字数は 10 文字 (40 ビット) までです。数値の最上位のビット (右から 40 番目のビット) は符号を表し、残りの 39 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">桁数: 8 進表記するときに使用する文字数 (桁数) を指定します。 場所を省略すると <b>、Hex2Bin は</b> 必要な最小文字数を使用します。 桁数を指定することによって、変換結果の先頭に 0 (ゼロ) を表示することができます。</param>
        <summary>16 進数を 2 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が負の場合 <b>、Hex2Bin は</b> 場所を無視し、10 文字の 2 進数を返します。 </para>
          <para>数値が負の数である場合、数値に FFFFFFFE00 より小さい値を指定することはできません。数値が正の数である場合、数値に 1FF より大きい値を指定することはできません。</para>
          <para>数値が有効な 16 進数でない場合 <b>、Hex2Bin</b> は値を返#NUM! が返されます。 </para>
          <para><b>Hex2Bin に複数</b>の文字が必要な場合は、次の文字列を#NUM! が返されます。 桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。 </para>
          <para>場所が数値以外の場合 <b>、Hex2Bin</b> は値を#VALUE! が返されます。 </para>
          <para>場所が負の場合 <b>、Hex2Bin</b> は値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Dec">
      <MemberSignature Language="C#" Value="public string Hex2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Hex2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16769)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 16 進数を文字列として指定します。数値に指定できる文字数は 10 文字 (40 ビット) までです。数値の最上位のビットは符号を表し、残りの 39 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <summary>16 進数を 10 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が有効な 16 進数でない場合 <b>、Hex2Dec</b> は値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Oct">
      <MemberSignature Language="C#" Value="public string Hex2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16770)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 16 進数を文字列として指定します。数値に指定できる文字数は 10 文字 (40 ビット) までです。数値の最上位のビットは符号を表し、残りの 39 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">桁数: 8 進表記するときに使用する文字数 (桁数) を指定します。 場所を省略すると <b>、Hex2Oct は</b> 必要な最小文字数を使用します。 桁数を指定することによって、変換結果の先頭に 0 (ゼロ) を表示することができます。</param>
        <summary>16 進数を 8 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が負の場合 <b>、Hex2Oct は</b> 場所を無視し、10 文字の 8 進数を返します。 </para>
          <para>数値が負の数である場合、数値に FFE0000000 より小さい負の数を指定することはできません。数値が正の数である場合、数値に 1FFFFFFF より大きい正の数を指定することはできません。</para>
          <para>数値が有効な 16 進数でない場合 <b>、Hex2Oct</b> は値を返#NUM! が返されます。 </para>
          <para><b>Hex2Oct に複数</b>の場所の文字が必要な場合は、文字列を返#NUM! が返されます。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合 <b>、Hex2Oct は</b> 値を返#VALUE! が返されます。 </para>
          <para>場所が負の場合 <b>、Hex2Oct は</b> 値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HLookup">
      <MemberSignature Language="C#" Value="public object HLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object HLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16485)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検索値: 範囲の上端行で検索する値を指定します。検索値には、値、セル参照、または文字列を指定します。</param>
        <param name="Arg2">範囲: 目的のデータが含まれるテーブルを指定します。セル範囲の参照、またはセル範囲名を指定します。</param>
        <param name="Arg3">行番号: 目的のデータが入力されている行を、範囲内の上端から数えた行数で指定します。 行番号に 1 を指定すると、範囲の上端行の値が返され、行番号に 2 を指定すると、範囲の上から 2 行目の値が返されます。 値row_index_num 1 未満の場合 <b>、HLookup</b> は値を#VALUE! エラー値。このrow_index_numの行数より大きい場合 <b>、HLookup</b> はtable_array値を返#REF。 が返されます。</param>
        <param name="Arg4">Range_lookup - <b>HLookup</b> で完全一致または近似一致を検索するかどうかを指定する論理値です。 true <b>または</b> 省略すると、近似一致が返されます。 つまり、完全一致が見つからない場合は、次に大きい値が返lookup_valueされます。 false<b>の場合</b><b>、HLookup は</b>完全に一致します。 1 つが見つからない場合は、エラー値 #N/A が返されます。</param>
        <summary>指定したテーブルまたは配列の上端行で特定の値を検索し、その値と同じ値が入力されている行と列の値を返します。 HLookup は、比較値がデータ テーブルの上部の行にあり、指定した行数を下に見る場合に使用します。 比較値が、検索するデータの左側の列にある場合 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>HLookup で</b>値が見lookup_value、range_lookup が true の場合は<b></b>、値の小さい最大lookup_value。 </para>
          <para>lookup_value table_arrayの最初の行の最小の値より小さい場合 <b>、HLookup</b> は #N/A エラー値を返します。 </para>
          <para>If range_lookup is FALSE and lookup_value is text, you can use the wildcard characters, question mark (?) and asterisk (*), in lookup_value. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeom_Dist">
      <MemberSignature Language="C#" Value="public double HypGeom_Dist (double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]bool Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16919)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">標本の成功数: 標本内で成功する数を指定します。</param>
        <param name="Arg2">標本数: 標本数を指定します。</param>
        <param name="Arg3">母集団の成功数: 母集団内で成功する数を指定します。</param>
        <param name="Arg4">母集団の大きさ: 母集団全体の数を指定します。</param>
        <param name="Arg5">関数形式: 関数値の形式を、論理値で指定します。 累積的な値<b>が true の</b><b>場合、HypGeom_Dist</b>関数を返します。false<b>の場合</b>は、確率質量関数を返します。</param>
        <summary>ハイパーgeometric 分布を返します。 <b>HypGeom_Dist</b> は、サンプル サイズ、母集団の成功数、および母集団のサイズを考えると、特定の数のサンプル成功の確率を返します。 各 <b>HypGeom_Dist</b> が成功または失敗のいずれかであり、特定のサイズの各サブセットが等しい可能性で選択される、有限母集団の問題に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>引数が数値以外の場合は <b>、HypGeom_Dist</b> を返#VALUE! が返されます。 </para>
          <para>0 sample_sまたはsample_sが小さい場合は、number_sample または population_s の値HypGeom_Dist &lt; 返#NUM。 <b></b> が返されます。 </para>
          <para>値sample_s 0 または (number_sample - number_population + population_s) より小さい場合は、HypGeom_Distを返<b></b>#NUM! が返されます。 </para>
          <para>0 number_sample ≤または &gt; number_sample number_population、HypGeom_Distを<b></b>返#NUM! が返されます。 </para>
          <para>0 population_s ≤または &gt; population_s number_population、HypGeom_Distを<b></b>返#NUM! が返されます。 </para>
          <para>0 number_population ≤場合は <b>、HypGeom_Dist</b> を返#NUM! が返されます。 </para>
          <para>超幾何分布は次の式で与えられます。 </para>
          <para>図 1: ハイパー図形分布の数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeom_Dist</b> は、有限母集団から置き換えることなくサンプリングで使用されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeomDist">
      <MemberSignature Language="C#" Value="public double HypGeomDist (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeomDist(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16673)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">標本の成功数: 標本内で成功する数を指定します。</param>
        <param name="Arg2">標本数: 標本数を指定します。</param>
        <param name="Arg3">母集団の成功数: 母集団内で成功する数を指定します。</param>
        <param name="Arg4">母集団の大きさ: 母集団全体の数を指定します。</param>
        <summary>ハイパーgeometric 分布を返します。 <b>HypGeomDist</b> は、サンプル サイズ、母集団の成功、および母集団のサイズを考えると、一度に数のサンプル成功の確率を返します。 各観測値が成功または失敗のいずれかであり、特定のサイズの各サブセットが等しい可能性で選択される有限母集団の問題に対して <b>、HypGeomDist</b> を使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" /> してください。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>引数が数値以外の場合 <b>、HypGeomDist は</b> 引数を返#VALUE! が返されます。 </para>
          <para>0 sample_sまたは sample_s が number_sample または population_s より小さい場合 &lt; <b>、HypGeomDist</b> は値を#NUM! が返されます。 </para>
          <para>値sample_s 0 または (number_sample - number_population + population_s) より小さい場合 <b>、HypGeomDist</b> は値を#NUM! が返されます。 </para>
          <para>0 number_sample ≤またはnumber_sample number_population &gt; 場合、HYPGEOMDIST は値を#NUM! が返されます。 </para>
          <para>0 population_s ≤またはpopulation_s number_population &gt; <b>場合、HypGeomDist</b> は値を#NUM! が返されます。 </para>
          <para>0 number_population ≤場合 <b>、HypGeomDist は</b> 値を返#NUM! が返されます。 </para>
          <para>超幾何分布は次の式で与えられます。 </para>
          <para>図 1: ハイパー図形分布の数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeomDist は</b> 、有限母集団から置き換えることなくサンプリングで使用されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfError">
      <MemberSignature Language="C#" Value="public object IfError (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfError([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfError(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfError (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfError(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">値: エラーかどうかをチェックする引数です。</param>
        <param name="Arg2">エラーの場合の値: 数式がエラーとして評価される場合に返す値です。評価されるエラーの種類は、#N/A、#VALUE!、#REF!、#DIV/0!、#NUM!、#NAME?、および #NULL! です。</param>
        <summary>数式がエラーとして評価される場合は指定の値を返し、それ以外の場合は数式の結果を返します。 <b>IfError 関数を使用して</b>、数式のエラーをトラップして処理します。</summary>
        <returns>To be added.</returns>
        <remarks><para>値または値value_if_errorセルの場合 <b>、IfError</b> は空の文字列値 ("") として扱います。 </para>
          <para>value が配列数式の場合 <b>、IfError</b> は値で指定された範囲内の各セルの結果の配列を返します。 下の 2 番目の使用例を参照してください。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfNa">
      <MemberSignature Language="C#" Value="public object IfNa (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfNa([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfNa(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfNa (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfNa(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16974)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">value: 任意の値、式、または参照。</param>
        <param name="Arg2">value_if_na: 任意の値、式、または参照。</param>
        <summary>式が #N/A に解決されると、指定した値を返します。それ以外の場合は、式の結果を返します。</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImAbs">
      <MemberSignature Language="C#" Value="public string ImAbs (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImAbs([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImAbs(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImAbs (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImAbs(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16783)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 絶対値を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の絶対値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>複素数の絶対値は、次の数式で表されます。 </para>
          <para>図 1: 複素数の絶対値の数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Imaginary([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Imaginary(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imaginary (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Imaginary(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 虚数係数を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の虚数係数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImArgument">
      <MemberSignature Language="C#" Value="public string ImArgument (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImArgument([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImArgument(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImArgument (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImArgument(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16791)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 引数 θ を求める複素数を、文字列 "x+yi" または "x+yj" の形式で指定します。</param>
        <summary>引数 (theta) を返します。ラジアンで表される角度を次に示します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>
            <b>ImArgument は</b> 次のように計算されます。 </para>
          <para>図 1: ImArgument メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>and</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImConjugate">
      <MemberSignature Language="C#" Value="public string ImConjugate (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImConjugate([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImConjugate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImConjugate (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImConjugate(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16792)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 共役を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の複素共役を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>複素数の共役は、次の数式で表されます。 </para>
          <para>図 1: 複素数の共役の方程式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCos">
      <MemberSignature Language="C#" Value="public string ImCos (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCos([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCos(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCos (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCos(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16789)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: コサインを求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数のコサインを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>inumber が論理値の場合 <b>、ImCos は</b> 値を返#VALUE! が返されます。 </para>
          <para>複素数のコサインは、次の数式で表されます。 </para>
          <para>図 1: 複素数のコサイン</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCosh">
      <MemberSignature Language="C#" Value="public string ImCosh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCosh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCosh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCosh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCosh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16978)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余弦を求める複素数を指定します。</param>
        <summary>複素数の双曲線余弦 (ハイパーボリック コサイン) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCot">
      <MemberSignature Language="C#" Value="public string ImCot (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCot([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCot (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCot(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16941)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">余接を求める複素数を指定します。</param>
        <summary>複素数の余接を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsc">
      <MemberSignature Language="C#" Value="public string ImCsc (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsc([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsc(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsc (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsc(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16942)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">余割を求める複素数を指定します。</param>
        <summary>複素数の余割 (コセカント) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsch">
      <MemberSignature Language="C#" Value="public string ImCsch (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsch([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsch(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsch (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsch(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16943)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余割を求める複素数を指定します。</param>
        <summary>複素数の双曲線余割 (ハイパーボリック コセカント) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImDiv">
      <MemberSignature Language="C#" Value="public string ImDiv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImDiv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImDiv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImDiv (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImDiv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16781)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数 1: 割り算の分子または被除数となる複素数を指定します。</param>
        <param name="Arg2">複素数 2: 割り算の分母または除数となる複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された 2 つの複素数の商を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>2 つの複素数の商は、次の数式で表されます。 </para>
          <para>図 1: 2 つの複素数の商</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImExp">
      <MemberSignature Language="C#" Value="public string ImExp (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImExp([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImExp(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImExp (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImExp(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16790)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: べき乗を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数のべき乗を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>複素数のべき乗は、次の数式で表されます。 </para>
          <para>図 1: 複素数の指数</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLn">
      <MemberSignature Language="C#" Value="public string ImLn (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLn([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLn(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLn (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLn(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16785)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 自然対数を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の自然対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>複素数の自然対数は、次の数式で表されます。 </para>
          <para>図 1: 複素数の自然対数</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog10">
      <MemberSignature Language="C#" Value="public string ImLog10 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog10([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog10(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog10 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog10(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16787)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 常用対数を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の 10 を底とする対数 (常用対数) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>複素数の常用対数は、自然対数を使って計算することができます。 </para>
          <para>図 1: 複素数の共通対数の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog2">
      <MemberSignature Language="C#" Value="public string ImLog2 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog2([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog2(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog2 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog2(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16786)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 2 を底とする対数を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の 2 を底とする対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>複素数の 2 を底とする対数は、自然対数を使って計算することができます。 </para>
          <para>図 1: 複素数の base-2 対数の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImPower">
      <MemberSignature Language="C#" Value="public string ImPower (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImPower([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImPower(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImPower (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImPower(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16782)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: べき乗を求める複素数を指定します。</param>
        <param name="Arg2">数値: 複素数を底とするべき乗の指数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の整数乗を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>数値が数値以外の場合 <b>、ImPower</b> は数値を返#VALUE! が返されます。 </para>
          <para>数値には、整数、分数、または負の数を指定することができます。</para>
          <para>複素数を底とするべき乗は、次の数式で表されます。 </para>
          <para>図 1: 数式の複素数が電力に発生する</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>および</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para>および</para>
          <para>図 4: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImProduct">
      <MemberSignature Language="C#" Value="public string ImProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1、inumber2,... 引数は 1 ～ 29 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された 2 ～ 29 個の複素数の積を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>2 つの複素数の積は、次の数式で表されます。</para>
          <para>図 1: 2 つの複素数の製品</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImReal">
      <MemberSignature Language="C#" Value="public double ImReal (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ImReal([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImReal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImReal (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ImReal(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16794)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 実数係数を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の実数係数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSec">
      <MemberSignature Language="C#" Value="public string ImSec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16944)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余割を求める複素数を指定します。</param>
        <summary>複素数の双曲線余割 (ハイパーボリック コセカント) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSech">
      <MemberSignature Language="C#" Value="public string ImSech (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSech([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSech(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSech (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSech(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16945)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線正割を求める複素数を指定します。</param>
        <summary>複素数の正割 (セカント) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSin">
      <MemberSignature Language="C#" Value="public string ImSin (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSin([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSin(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSin (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSin(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16788)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: サインを求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数のサインを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>複素数のサインは、次の数式で表されます。 </para>
          <para>図 1: 複素数のサイン</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSinh">
      <MemberSignature Language="C#" Value="public string ImSinh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSinh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSinh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSinh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSinh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16977)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線正接を求める複素数を指定します。</param>
        <summary>複素数の双曲線正弦 (ハイパーボリック サイン) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSqrt">
      <MemberSignature Language="C#" Value="public string ImSqrt (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSqrt([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSqrt(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSqrt (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSqrt(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16784)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 平方根を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の平方根を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 複素数の平方根は、次の数式で表されます。 </para>
          <para>図 1: 複素数の平方根</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>および</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para>および</para>
          <para>図 4: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSub">
      <MemberSignature Language="C#" Value="public string ImSub (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSub([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSub(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSub (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSub(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16780)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数 1: 複素数 2 から減算する複素数を指定します。</param>
        <param name="Arg2">複素数 2: 複素数 1 から減算する複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された 2 つの複素数の差を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。</para>
          <para>2 つの複素数の差は、次の数式で表されます。</para>
          <para>図 1: 2 つの複素数の違い</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSum">
      <MemberSignature Language="C#" Value="public string ImSum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16796)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数 1, 複素数 2, … : 和を求める複素数を指定します。引数は 1 ～ 29 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された 2 ～ 29 個の複素数の和を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>実 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> 数と虚数の係数を複素数に変換する場合に使用します。 </para>
          <para>2 つの複素数の和は、次の数式で表されます。</para>
          <para>図 1: 2 つの複素数の合計</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImTan">
      <MemberSignature Language="C#" Value="public string ImTan (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImTan([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImTan(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImTan (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImTan(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16940)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">タンジェントを求める複素数を指定します。</param>
        <summary>複素数の正接 (タンジェント) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public object Index (object Arg1, double Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Index([in]object Arg1, [in]float64 Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Index(System.Object,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Index (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16413)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列または範囲: セル範囲または配列定数を指定します。セル範囲形式の場合は、1 つまたは複数のセルの参照を指定します。</param>
        <param name="Arg2">行番号: 配列の中にあり、値を返す行を数値で指定します。行番号を省略した場合は、必ず列番号を指定する必要があります。セル範囲形式の場合は、範囲の中にあり、セル参照を返すセルの行位置を数値で指定します。</param>
        <param name="Arg3">列番号: 配列の中にあり、値を返す列を数値で指定します。列番号を省略した場合は、必ず行番号を指定する必要があります。セル範囲形式の場合は、範囲の中にあり、セル参照を返すセルの列位置を数値で指定します。</param>
        <param name="Arg4">領域番号 - 参照を返す場合にのみ使用します。 行番号と列番号の共通部分を返す参照の範囲を選択します。 最初に選択または入力された領域の番号は 1 となり、2 番目の領域は 2、3 番目の領域は 3 というように続きます。 指定 <b>area_num、Index</b> は領域 1 を使用します。</param>
        <summary>テーブルまたは範囲内の値や、値への参照を返します。 <b>Index</b>関数には、配列フォームと参照フォームの 2 つの形式があります。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列形式</para>
          <para>行番号と列番号で指定されるテーブルまたは配列の要素の値を返します。</para>
          <para>Index の最初の引数が配列定数の場合は、 <b>配列</b> 形式を使用します。</para>
          <para>引数 row_num と column_num 引数の両方が使用されている場合 <b>、Index</b> はセル内の値を row_num と column_num の交差部分で返します。 </para>
          <para>値または値row_num 0 (column_num) に設定すると <b>、Index</b> は列または行全体の値の配列をそれぞれ返します。 配列として返される値を使用するには、行のセルの水平方向の範囲、および列の垂直方向のセル範囲に、配列数式として <b>Index</b> 関数を入力します。 To enter an array formula, press CTRL+SHIFT+ENTER. </para>
          <para>Row_numおよびcolumn_num配列内のセルを指している必要があります。それ以外の場合 <b>、Index</b> は次の#REF! 返されます。 </para>
          <para>参照形式</para>
          <para>指定された行と列が交差する位置にあるセルの参照を返します。隣接しない複数のセル範囲を指定した場合、その中から任意の領域を選択できます。範囲で指定した各領域が 1 行または 1 列である場合、行番号または列番号はそれぞれ省略することができます。たとえば、範囲が 1 行のみである場合は、INDEX(範囲,列番号) と指定できます。</para>
          <para>参照と領域番号によって特定の範囲が選択された後、行番号と列番号によって特定のセルが選択されます。行番号 1 が範囲内の最初の行、列番号 1 が最初の列というように続きます。 <b>Index</b>によって返される参照は、インデックスとインデックスのrow_numのcolumn_num。 </para>
          <para>列または行row_num 0 (column_num) に設定した場合 <b>、Index</b> は列または行全体の参照をそれぞれ返します。</para>
          <para>Row_num、column_num、およびarea_num参照内のセルをポイントする必要があります。それ以外の場合 <b>、Index</b> は次の#REF! が返されます。 指定row_numをcolumn_num場合 <b>、Index</b> は指定された参照領域を返area_num。 </para>
          <para>Index 関数の <b>結果</b> は参照であり、他の数式によって解釈されます。 数式によっては、INDEX の戻り値を参照または値として使用できます。 たとえば、CELL("width",INDEX(A1:B2,1,2)) という数式は、CELL("width",B1) と同じです。 CELL 関数は、セル参照として INDEX の戻り値を使用します。 一方、2*INDEX(A1:B2,1,2) などの数式は <b>、Index</b> の戻り値をセル B1 の数値に変換します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public double Intercept (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Intercept([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intercept (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Intercept(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16695)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 観測またはデータの従属範囲を指定します。</param>
        <param name="Arg2">既知の x: 観測またはデータの独立範囲を指定します。</param>
        <summary>既知の x と既知の y を通過する線形回帰直線の切片を計算します。 切片とは既知の x と既知の y の値を通過する回帰直線が y 軸と交わる座標のことです。 独立変数 <b>が</b> 0 (ゼロ) の場合に従属変数の値を決定する場合は、Intercept 関数を使用します。 たとえば、Intercept 関数を使用<b></b>して、データ ポイントが室温以上で取得された場合の 0°C での金属の電気抵抗を予測できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、あるいは数値を含む範囲を参照する名前またはセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>データ known_yと known_x が異なる数のデータ ポイントを含む場合、またはデータ ポイントが含まれている場合 <b>、Intercept</b> はエラー値 #N/A を返します。 </para>
          <para>回帰直線の切片 a は、次の数式で表されます。</para>
          <para>図 1: 回帰直線の切片の数式</para>
          <para> </para>
          <para> </para>
          <para>また、回帰直線の傾き b は、次の数式で表されます。</para>
          <para>図 2: 傾きに対する数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(既知の x)、y は標本平均 AVERAGE(既知の y) です。</para>
          <para>Intercept および関数で使用される<b></b>基になるアルゴリズムは、関数で使用される基になる <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> アルゴリズムとは異 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> なります。 アルゴリズムの違いにより、データに不確定さや共線性が存在した場合に、異なる結果が得られる場合があります。 たとえば、既知の y 引数のデータ要素が 0 で、既知の x 引数のデータ要素が 1 であったとします。 </para>
          <list type="bullet">
            <item>
              <description>
                <b>インターセプ</b> ト <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> して、#DIV/0 を返します。 エラーを返します。 Intercept <b>と</b> アルゴリズムは、1 つの回答のみを検索するように設計されています。この場合、複数の回答 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> が可能です。 </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> 値 0 を返します。 アルゴリズムは、同一データに対して妥当な結果を返す目的で設計されています。この場合、少なくとも 1 つの回答 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> が見つかる可能性があります。</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IntRate">
      <MemberSignature Language="C#" Value="public double IntRate (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IntRate([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IntRate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntRate (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16817)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">投資額: 証券への投資額を指定します。</param>
        <param name="Arg4">償還価額: 満期日における証券の償還額を指定します。</param>
        <param name="Arg5">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>全額投資された証券の利率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、IntRate</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>投資額が 0 ≤の場合、または引き換≤ 0 の場合 <b>、IntRate</b> は 0 を返#NUM。 が返されます。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、IntRate</b> は次の値を#NUM! が返されます。 </para>
          <para>満期日≥場合 <b>、IntRate</b> は満期日を#NUM! が返されます。 </para>
          <para>
            <b>IntRate</b> は次のように計算されます。 </para>
          <para>図 1: IntRate メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>B = 年単位での日数。</para>
          <para>B = 利息計算の基礎となる 1 年の日数、DIM = 受渡日から満期日までの日数</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ipmt">
      <MemberSignature Language="C#" Value="public double Ipmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ipmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ipmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ipmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。</param>
        <param name="Arg2">期: 金利支払額を求める期を 1 ～期間の範囲で指定します。</param>
        <param name="Arg3">期間: 投資期間全体での支払い回数の合計を指定します。</param>
        <param name="Arg4">現在価値: 現在の投資額、または、将来行われる一連の支払いを現時点で一括払いした場合の合計金額を指定します。</param>
        <param name="Arg5">将来価値: 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 を指定したと見なされます。たとえば、ローンなどの借入金の将来価値は 0 になります。</param>
        <param name="Arg6">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。支払期日を省略すると、0 を指定したと見なされます。</param>
        <summary>定額の支払いを定期的に行い、利率が一定であると仮定して、投資期間内の指定された期に支払われる金利を返します。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。 </para>
          <para>すべての引数に関して、定額預金の支払いのような出金は負の数で表し、配当金のような入金は正の数で表します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Irr">
      <MemberSignature Language="C#" Value="public double Irr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Irr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Irr (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16446)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 数値を含む配列またはセル参照を指定します。これらの数値は、定期的に発生する一連の支払い (負の値) と収益 (正の値) に対応します。</param>
        <param name="Arg2">推定値: Irr メソッドの計算結果に近いと思われる数値を指定します。</param>
        <summary>一連の定期的なキャッシュ フローに対する内部利益率を返します。個人年金などの投資では、キャッシュ フローの差し引きが 0 である必要はありません。ただし、キャッシュ フローとは、月や年などのような一定期間をおいて、必ず発生するものでなければなりません。内部利益率とは、一定の期間ごとに発生する支払い (負の数) と収益 (正の数) から成る投資効率を表す利率のことです。</summary>
        <returns>To be added.</returns>
        <remarks><para>内部利益率を計算するには、正の値と負の値が範囲に少なくとも 1 つずつ含まれている必要があります。</para>
          <para>範囲に入力されている値の順序は、キャッシュ フローの順序であると見なされます。支払額と収益額を入力するときは、その順序と符号に注意してください。(支払額は負の値、収益額は正の値)。</para>
          <para>範囲に文字列、論理値、または空白セルが含まれる場合、これらは無視されます。</para>
          <para>Microsoft Excelは、Irr を計算するための反復的な手法<b>を使用します</b>。 推測から始まる <b>と、Irr</b> は計算を 0.00001 パーセント以内に正確に処理します。 <b>Irr が</b>20 回試行した後に動作する結果が見つから#NUM! が返されます。 </para>
          <para>ほとんどの場合、Irr 計算の推測値を指定 <b>する必要</b> があります。 推定値を省略すると、0.1 (10%) が指定されたと見なされます。 </para>
          <para><b>Irr がエラー</b>を#NUM! が返される場合や、または予測した値とかけ離れている場合は、推定値に異なる値を指定して、もう一度計算を行ってください。</para>
          <para>
            <b>Irr</b> は、正味現在値 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 関数と密接に関連しています。 <b>Irr</b>によって計算される戻り率は、0 (ゼロ) 正味現在の値に対応する金利です。 次の数式は <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 、Irr と <b>Irr の関連付けを</b> 示しています。</para>
          <para>NPV(IRR(B1:B6,B1:B6) は 3.60E-08 と等しくなります <b>[Irr</b> 計算の精度の範囲内で、値 3.60E-08 は実質的に 0 (ゼロ)。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsErr">
      <MemberSignature Language="C#" Value="public bool IsErr (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsErr([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsErr(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsErr (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsErr(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の種類をチェックし、true または<b></b> <b>false</b>を返します。値がエラー値を参照している場合は、#N/A を除く。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数に対する引数は自動的に変換されません。 ほとんどの場合、数値を必要とする関数の引数に "19" という文字列を指定すると、自動的に 19 という数値に変換されて計算が行われます。 ただし、ISNUMBER("19") という数式では、"19" はテキスト値から変換されません。関数は <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>を返します。 </para>
          <para>IS 関数は、数式で計算結果を調べるために役立ちます。 IF 関数と組み合わせると、数式でエラーを検索するメソッドが提供されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public bool IsError (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsError([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsError(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の種類をチェックし、値<b></b>がエラー<b></b>値 (#N/A、#VALUE!、#REF!、#DIV/0!、#NUM!、#NAME?、または #NULL!) を参照している場合に応じて true または false を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数に対する引数は自動的に変換されません。 ほとんどの場合、数値を必要とする関数の引数に "19" という文字列を指定すると、自動的に 19 という数値に変換されて計算が行われます。 ただし、ISNUMBER("19") という数式では、"19" はテキスト値から変換されません。関数は <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>を返します。 </para>
          <para>IS 関数は、数式で計算結果を調べるために役立ちます。 IF 関数と組み合わせると、数式でエラーを検索するメソッドが提供されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEven([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsEven(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEven (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEven(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16804)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の種類を確認し、 <b>値が even</b> の場合は true または <b>false</b> を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数に対する引数は自動的に変換されません。 ほとんどの場合、数値を必要とする関数の引数に "19" という文字列を指定すると、自動的に 19 という数値に変換されて計算が行われます。 ただし、ISNUMBER("19") という数式では、"19" はテキスト値から変換されません。関数は <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>を返します。 </para>
          <para>IS 関数は、数式で計算結果を調べるために役立ちます。 IF 関数と組み合わせると、数式でエラーを検索するメソッドが提供されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFormula">
      <MemberSignature Language="C#" Value="public bool IsFormula (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsFormula([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsFormula(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFormula (Arg1 As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFormula(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16973)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストするセル参照を指定します。セル範囲、数式、またはセルを参照する名前を指定できます。</param>
        <summary>数式が含まれるセルへの参照かどうかを調べ、<b>TRUE</b> または <b>FALSE</b> を返します。</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogical">
      <MemberSignature Language="C#" Value="public bool IsLogical (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLogical([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsLogical(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLogical (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLogical(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16582)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の種類をチェックし、値が論理 <b>値</b> を参照している場合に応じて true または <b>false</b> を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数に対する引数は自動的に変換されません。 ほとんどの場合、数値を必要とする関数の引数に "19" という文字列を指定すると、自動的に 19 という数値に変換されて計算が行われます。 ただし、ISNUMBER("19") という数式では、"19" はテキスト値から変換されません。関数は <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>を返します。 </para>
          <para>IS 関数は、数式で計算結果を調べるために役立ちます。 IF 関数と組み合わせると、数式でエラーを検索するメソッドが提供されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNA">
      <MemberSignature Language="C#" Value="public bool IsNA (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNA([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNA(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNA (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNA(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の種類をチェックし、値<b></b>がエラー<b></b>値 (使用できない) #N/A を参照している場合に応じて true または false を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数に対する引数は自動的に変換されません。 ほとんどの場合、数値を必要とする関数の引数に "19" という文字列を指定すると、自動的に 19 という数値に変換されて計算が行われます。 ただし、ISNUMBER("19") という数式では、"19" はテキスト値から変換されません。関数は <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>を返します。 </para>
          <para>IS 関数は、数式で計算結果を調べるために役立ちます。 IF 関数と組み合わせると、数式でエラーを検索するメソッドが提供されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonText">
      <MemberSignature Language="C#" Value="public bool IsNonText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNonText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNonText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNonText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16574)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の種類をチェックし、値<b></b>がテキストではないアイテムを参照している場合は true または<b>false</b>を返します。 (値が空白のセルを参照 <b>する</b> 場合、この関数は true を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数に対する引数は自動的に変換されません。 ほとんどの場合、数値を必要とする関数の引数に "19" という文字列を指定すると、自動的に 19 という数値に変換されて計算が行われます。 ただし、ISNUMBER("19") という数式では、"19" はテキスト値から変換されません。関数は <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>を返します。 </para>
          <para>IS 関数は、数式で計算結果を調べるために役立ちます。 IF 関数と組み合わせると、数式でエラーを検索するメソッドが提供されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNumber([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumber (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNumber(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の種類をチェックし、値<b></b>が数値を参照している場合に応じて true または<b>false</b>を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数に対する引数は自動的に変換されません。 ほとんどの場合、数値を必要とする関数の引数に "19" という文字列を指定すると、自動的に 19 という数値に変換されて計算が行われます。 ただし、ISNUMBER("19") という数式では、"19" はテキスト値から変換されません。関数は <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>を返します。 </para>
          <para>IS 関数は、数式で計算結果を調べるために役立ちます。 IF 関数と組み合わせると、数式でエラーを検索するメソッドが提供されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ISO_Ceiling">
      <MemberSignature Language="C#" Value="public double ISO_Ceiling (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ISO_Ceiling([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ISO_Ceiling(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ISO_Ceiling (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16907)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 対象となる数値を指定します。</param>
        <param name="Arg2">基準値 - 省略可能です。数値はこの基準値の倍数に切り上げられます。基準値を省略した場合の既定値は 1 です。</param>
        <summary>指定した基準値の倍数のうち、最も近い整数値に切り上げた値を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public bool IsOdd (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsOdd([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsOdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOdd (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOdd(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16805)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の種類をチェックし、値が <b>奇</b> 数の場合に応じて true または <b>false</b> を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数に対する引数は自動的に変換されません。 ほとんどの場合、数値を必要とする関数の引数に "19" という文字列を指定すると、自動的に 19 という数値に変換されて計算が行われます。 ただし、ISNUMBER("19") という数式では、"19" はテキスト値から変換されません。関数は <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>を返します。 </para>
          <para>IS 関数は、数式で計算結果を調べるために役立ちます。 IF 関数と組み合わせると、数式でエラーを検索するメソッドが提供されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekNum">
      <MemberSignature Language="C#" Value="public double IsoWeekNum (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IsoWeekNum([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsoWeekNum(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsoWeekNum (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16968)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">日付と時刻の計算に使用Excel日時コード。</param>
        <param name="Arg2">この引数は、この関数では使用できません。</param>
        <summary>指定した日付の年の ISO 週番号を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks><para>指定の日付について、年間を通した [ISO8601] カレンダー週の序数を返します。 ISO 8601 の定義では、カレンダー週は月曜始まりの 7 日間で、1 年の第 1 カレンダー週は最初の木曜日を含む週です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ispmt">
      <MemberSignature Language="C#" Value="public double Ispmt (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ispmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ispmt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ispmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16734)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。</param>
        <param name="Arg2">期: 金利支払額を求める期を 1 ～期間の範囲で指定します。</param>
        <param name="Arg3">期間: 投資期間全体での支払回数の合計を指定します。</param>
        <param name="Arg4">現在価値: 投資の現在価値、つまり、将来行われる一連の支払いを現時点で一括払いした場合の合計金額を指定します。</param>
        <summary>投資期間内の指定された期に支払われる金利を返します。この関数は、Lotus 1-2-3 関数との互換性を保つために用意されています。</summary>
        <returns>To be added.</returns>
        <remarks><para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。</para>
          <para>すべての引数に関して、定額預金の支払いのような出金は負の数で表し、配当金のような入金は正の数で表します。</para>
          <para>財務機能の詳細については、関数を参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> してください。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsText">
      <MemberSignature Language="C#" Value="public bool IsText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の種類を確認し、値が <b>テキストを</b> 参照している場合は true または <b>false</b> を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数に対する引数は自動的に変換されません。 ほとんどの場合、数値を必要とする関数の引数に "19" という文字列を指定すると、自動的に 19 という数値に変換されて計算が行われます。 ただし、ISNUMBER("19") という数式では、"19" はテキスト値から変換されません。関数は <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> <b>false</b>を返します。 </para>
          <para>IS 関数は、数式で計算結果を調べるために役立ちます。 IF 関数と組み合わせると、数式でエラーを検索するメソッドが提供されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThaiDigit">
      <MemberSignature Language="C#" Value="public bool IsThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsThaiDigit (Arg1 As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16759)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kurt">
      <MemberSignature Language="C#" Value="public double Kurt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Kurt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Kurt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Kurt (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16706)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 尖度を計算するため、最大 30 個までの数値を指定します。引数をコンマ (,) で区切って指定する代わりに、単一配列または配列への参照を引数として使用することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数として指定したデータの尖度を返します。尖度とは、対象となるデータの分布を標準分布と比較して、度数分布曲線の相対的な鋭角度または平たん度を表した数値です。尖度が正の数になる場合、度数分布曲線が相対的に鋭角になっていることを表し、負の数になる場合は、相対的に平たんになっていることを表します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ ポイントが 4 個未満の場合、またはサンプルの標準偏差が 0 の場合 <b>、Kurt</b> はデータ #DIV/0 を返します。 が返されます。 </para>
          <para>尖度は次のように定義されます。 </para>
          <para>図 1: クルトシス方程式</para>
          <para> </para>
          <para> </para>
          <para>s は標本に基づいた標準偏差を表します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Large">
      <MemberSignature Language="C#" Value="public double Large (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Large([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Large(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Large (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Large(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16709)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 抽出の対象となる値が入力されている配列またはデータの範囲を指定します。</param>
        <param name="Arg2">順位: 抽出する値の、大きい方から数えた順位を数値で指定します。</param>
        <summary>1 つのデータ セットの中で順位番目に大きなデータを返します。 LARGE 関数を利用すると、相対的な順位に基づいて、データの中から特定の値を選択することができます。 たとえば、Large <b>を使用して</b> 、最も高いスコア、準優勝スコア、または 3 位スコアを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合 <b>、Large</b> は値を返#NUM! が返されます。 </para>
          <para>k が 0 ≤場合、または k がデータ ポイントの数より大きい場合は、 <b>大</b> きい値を返#NUM。 が返されます。</para>
          <para>n を範囲に含まれているデータ要素の数とするとき、LARGE(範囲,1) は対象となるデータの最大値を返します。また、LARGE(範囲,n) は対象となるデータの最小値を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lcm">
      <MemberSignature Language="C#" Value="public double Lcm (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Lcm([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lcm(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lcm (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 最小公倍数を求める数値を指定します。引数は最大 30 個まで指定できます。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>複数の整数の最小公倍数を返します。最小公倍数とは、引数数値 1、数値 2 ... に指定されたすべての整数に共通する倍数の中で、最も小さい倍数のことです。LCM 関数は、分母の異なる分数の和を求める場合などに使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合 <b>、Lcm は</b> 引数を返#VALUE! が返されます。 </para>
          <para>引数が 0 未満の場合 <b>、Lcm は</b> 引数を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LinEst">
      <MemberSignature Language="C#" Value="public object LinEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LinEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16433)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 既にわかっている y の値の系列で、y = mx + b という関係になります。</param>
        <param name="Arg2">既知の x: 既にわかっている x の値の系列で、y = mx + b という関係になります。</param>
        <param name="Arg3">定数: 定数 b を 0 にするかどうかを論理値で指定します。</param>
        <param name="Arg4">補正: 回帰指数曲線の補正項を追加情報として返すかどうかを、論理値で指定します。</param>
        <summary>"最小二乗法" を使って指定したデータに最もよく当てはまる直線を算出し、この直線を記述する配列を返すことによって直線の補正項を計算します。この関数では、配列の値を返すので、配列数式として入力する必要があります。</summary>
        <returns>To be added.</returns>
        <remarks><para>直線は次の演算式で表されます。</para>
          <para>y = mx + b または</para>
          <para>y = m1x1 + m2x2 + ... + b (独立変数 x の範囲が複数の場合)</para>
          <para>従属変数 y は独立変数 x の関数です。 また、m はそれぞれの x に対応する係数で、b は y 切片と呼ばれる定数です。 y、x、m がベクトル (1 次元配列) であることに注意してください。 <b>LinEst が返す</b>配列は{mn,mn-1,...,m1,b}です。 <b>LinEst は</b> 、追加の回帰統計を返す場合があります。</para>
          <para>既知の y の配列が 1 つの列に入力されている場合、既知の x の各列はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の y の配列が 1 つの行に入力されている場合、既知の x の各行はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の x の配列には、1 つまたは複数の変数の系列を指定することができます。変数の系列が 1 つである場合、既知の y と既知の x は、両者の次元が同じであれば、どのような形の範囲であってもかまいません。変数の系列が複数である場合、既知の y は 1 行または 1 列のセル範囲でなければなりません。</para>
          <para>既知の x を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>const が true <b>または省略</b> された場合、b は通常計算されます。 </para>
          <para>const が <b>false の場合</b>、b は 0 に設定され、m 値は y = mx に合うように調整されます。 </para>
          <para>stats が <b>truuue</b>の場合 <b>、LinEst</b> は追加の回帰統計を返すので、返される配列は {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r2,sey です。F,df;ssreg,ssresid}。 </para>
          <para>stats が <b>false または省略</b> された場合 <b>、LinEst</b> は m 係数と定数 b のみを返します。 </para>
          <para>次のような回帰直線の補正項が追加情報として返されます。</para>
          <list type="table">
            <item>
              <term>se1,se2,...,sen</term>
              <description>係数 m1,m2,...,mn に対する標準誤差の値です。</description>
            </item>
            <item>
              <term>seb</term>
              <description>定数 b の標準誤差値 (seb = const が false<b></b>の場合#N/A)。</description>
            </item>
            <item>
              <term>r2</term>
              <description>確実度の係数です。 予測される y の値と実際の y の値を比較して、0 から 1 の範囲の数値を計算します。 1 の場合、サンプルに完全な相関関係があります。推定 y 値と実際の y 値の間には違いはありません。 逆にこの係数の値が 0 である場合、回帰直線の演算式は y の値の予測にはほとんど役立ちません。 </description>
            </item>
            <item>
              <term>sey</term>
              <description>予測される y の値に対する標準誤差です。</description>
            </item>
            <item>
              <term>F</term>
              <description>F 補正項または F 観測値です。F 補正項を利用すると、独立変数と従属変数の間で観察された関係が偶然によるものかどうかを判断できます。</description>
            </item>
            <item>
              <term>df</term>
              <description>自由度です。 自由度を利用すると、統計表の中で F の臨界値を見つけるのに役立ちます。 表で見つけた値を <b>LinEst</b> によって返される F 統計量と比較して、モデルの信頼度を決定します。 </description>
            </item>
            <item>
              <term>ssreg</term>
              <description>回帰の平方和です。</description>
            </item>
            <item>
              <term>ssresid</term>
              <description>残余の平方和です。</description>
            </item>
          </list>
          <para>次の図では、回帰直線の追加補正項が返される順序を示します。</para>
          <para>図 1: ワークシート</para>
          <para> </para>
          <para> </para>
          <para>傾きと y 切片を使用して、任意の直線を記述できます。 </para>
          <para>傾き (m):</para>
          <para>
直線の傾き (m) は、直線上の 2 点の座標が (x1,y1)、(x2,y2) で表されるとき、(y2 - y1)/(x2 - x1) で計算できます。</para>
          <para>y 切片 (b):</para>
          <para>
直線の y 切片 (b) とは、直線が y 軸と交わるときの y の値です。</para>
          <para>直線の演算式は、y = mx + b で表されます。 m と b の値がわかれば、y または x の値をこの演算式に代入することにより、直線上の任意の点の座標を計算することができます。 また、この関数を使用 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" /> できます。</para>
          <para>独立した x 変数が 1 つのみである場合は、次の数式を使用して、傾きと y 切片の値を直接取得できます。 </para>
          <para>傾き:</para>
          <para>
=INDEX(LINEST(known_y's,known_x's),1)</para>
          <para>Y-intercept:</para>
          <para>
INDEX(LINEST(既知の y, 既知の x),2)</para>
          <para><b>LineEst</b>によって計算される線の精度は、データの散布度によって異なります。 データの線形性が高い場合は <b>、LineEst モデルの精度が高</b> い。 <b>LineEst は</b> 、最小二乗法を使用して、データに最適な適合を判断します。 独立変数 x の値が 1 つしかわからない場合は、次の数式を使って m と b の値が計算されます。 </para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(既知の x)、y は標本平均 AVERAGE(既知の y) です。</para>
          <para>直線と曲線に適合する関数 <b>LineEst</b> は、データに適合する最適な直線または指数曲線 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" /> を計算できます。 ただし、データを直線で近似するか指数曲線で近似するかは、データに合わせて選択する必要があります。 直線の場合は、TREND(既知の y, 既知の x)、指数曲線の場合は GROWTH(既知の y, 既知の x) を使って計算することができます。 これらの関数は、引数として新しい x を指定しなくても、直線または指数曲線上で実際のデータ要素に対応する、y の予測値の配列を返します。 これにより、予測値と実際の値を比較することができます。 両者の値をひとめで比較できるように、グラフを作成することもできます。 </para>
          <para>回帰分析では、直線上の各点ごとに、予測される y の値と実際の y の値との平方差が計算されます。 このようにして計算した平方差の合計を "残余の平方和"(ssresid) と呼びます。 次に、"総平方和"(sstotal) が計算されます。 const = <b>true</b>、または省略した場合、平方和の合計は、実際の y 値と y 値の平均の 2 乗差の合計です。 const = <b>false</b>の場合、平方和の合計は、実際の y 値の 2 乗の合計です (個々の y 値から平均 y 値を差し引かなくても)。 回帰の平方和 ssreg は、ssreg = sstotal - ssresid として計算されます。 総平方和と比較し、残余の平方和が小さければ小さいほど、確実度の係数である r2 の値が大きくなり、回帰分析で得られた方程式が変数間の関係をより正確に表していることになります。 ここで、r2 = ssreg/sstotal です。 </para>
          <para>場合によっては、1 つ以上の X 列 (Y 列と X 列を前提とします) は、他の X 列の存在に追加の予測値がない可能性があります。 つまり、1 つ以上の X 列を削除すると、予測される Y 値が同じように正確になる可能性があります。 その場合、これらの冗長な X 列は回帰モデルから省略する必要があります。 この現象は、冗長な X 列は冗長でない X 列の倍数の合計として表される可能性があるから、"共線性" と呼ばれる。 <b>LinEst</b> は共線性をチェックし、重複する X 列を識別するときに回帰モデルから削除します。 削除された X 列は <b>、0</b> 係数と 0 se の係数を持つとして LinEst 出力で認識できます。 1 つ以上の列が冗長として削除された場合、df は予測目的で実際に使用される X 列の数に依存します。 冗長な X 列が削除されたため df が変更されると、sey と F の値も影響を受ける。 同一性は、実際には比較的まれである必要があります。 ただし、発生する可能性が高いケースの 1 つは、実験の対象が特定のグループのメンバーであるかどうかを示す指標として、一部の X 列に 0 と 1 が含まれている場合です。 const = <b>true または省略</b> した場合 <b>、LinEst</b> は効率的に切片をモデル化するために、すべての 1 の X 列を挿入します。 男性の場合は各件名に 1、それではない場合は 0 の列がある場合、また、女性の場合は各件名に 1、または 0 の列がある場合は <b>、LineEst</b>で追加されたすべての 1 の追加列のエントリから "男性インジケーター" 列のエントリを減算して取得できるので、この後者の列は冗長です。 </para>
          <para>df は、共線性のためにモデルから X 列が削除されなくても、次のように計算されます。known_x の k 列と const = <b>true</b> または省略した場合は、df = n – k – 1 になります。 const = <b>false の場合</b>、df = n - k。 どちらの場合も、共線性のために削除された各 X 列は df を 1 増加します。 </para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。 When entering an array constant such as known_x's as an argument, use commas to separate values in the same row and semicolons to separate rows. 区切り文字は、コントロール パネルの地域と言語のオプションのロケール設定によって異なる場合があります。 </para>
          <para>回帰演算式によって予測計算された y の値は、演算式を決定するときに使用した y の値の範囲外では、有効な値にならない場合があります。 LinEst 関数で使用される基になるアルゴリズムは <b>、and</b> 関数で使用される基になるアルゴリズムとは <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> 異 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> なります。 アルゴリズムの違いにより、データに不確定さや共線性が存在した場合に、異なる結果が得られる場合があります。 たとえば、既知の y 引数のデータ要素が 0 で、既知の x 引数のデータ要素が 1 であったとします。 </para>
          <para>
            <b>LineEst は</b> 0 の値を返します。 <b>LinEst アルゴリズムは</b>、同一データに対して妥当な結果を返す目的で設計されています。この場合、少なくとも 1 つの回答が見つかる可能性があります。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> クリックし、#DIV/0 を返します。 エラーを返します。 アルゴリズムは、1 つの回答のみを検索するように設計されています。この場合、複数の回答 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> が含まれる場合があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public double Ln (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ln([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ln(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ln (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ln(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16406)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 自然対数を求める正の実数を指定します。</param>
        <summary>数値の自然対数を返します。自然対数とは、定数 e (2.71828182845904) を底とする対数のことです。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Ln</b> は EXP 関数の逆関数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public double Log (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 対数を求める正の実数を指定します。</param>
        <param name="Arg2">底: 対数の底を指定します。底を省略すると、10 を指定したと見なされます。</param>
        <summary>指定された数を底とする数値の対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public double Log10 (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log10([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log10 (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Log10(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16407)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 10 を底とする対数 (常用対数) を求める正の実数を指定します。</param>
        <summary>数値の底が 10 の対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEst">
      <MemberSignature Language="C#" Value="public object LogEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LogEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 既にわかっている y の値の系列で、y = b*m^x という関係が成り立ちます。</param>
        <param name="Arg2">既知の x: 既にわかっている x の値の系列で、y = b*m^x という関係になります。この引数は省略してもかまいません。</param>
        <param name="Arg3">定数: 定数 b を 1 にするかどうかを論理値で指定します。</param>
        <param name="Arg4">補正: 回帰指数曲線の補正項を追加情報として返すかどうかを、論理値で指定します。</param>
        <summary>回帰分析では、データに適合する指数曲線を計算し、この曲線を表す値の配列を返します。この関数は値の配列を返すため、配列数式として入力する必要があります。</summary>
        <returns>To be added.</returns>
        <remarks><para>指数曲線は次の演算式で表されます。</para>
          <para>y = b*m^x または</para>
          <para>y = (b *(m1^x1)*(m2^x2)*_) (複数の x 値がある場合)</para>
          <para>ここで、従属変数 y は独立変数 x の関数です。 m の値はそれぞれの x のべき乗に対応する底で、b は定数です。 y、x、および m がベクトル (1 次元配列) であることに注意してください。 <b>LogEst</b>が返す配列は{mn,mn-1,...,m1,b}です。</para>
          <para>既知の y の配列が 1 つの列に入力されている場合、既知の x の各列はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の y の配列が 1 つの行に入力されている場合、既知の x の各行はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の x の配列には、1 つまたは複数の変数の系列を指定することができます。変数の系列が 1 つだけの場合、既知の y と既知の x は、双方の次元が同じである限り、どのような形の範囲でも指定できます。複数の変数を使用する場合、既知の y はセル範囲 (1 行または 1 列の範囲で、ベクトル範囲とも呼ばれます) である必要があります。</para>
          <para>既知の x を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>const が true <b>または省略</b> された場合、b は通常計算されます。</para>
          <para>const が <b>false の場合</b>、b は 1 に設定され、m 値は y = m^x に適合します。</para>
          <para>stats が <b>true</b>の場合 <b>、LogEst</b> は追加の回帰統計を返すので、返される配列は {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r 2,sey です。F,df;ssreg,ssresid}。 </para>
          <para>stats が <b>false または省略</b> された場合 <b>、LogEst</b> は m 係数と定数 b のみを返します。 </para>
          <para>追加の回帰統計の詳細については、「. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /></para>
          <para>データをプロットした結果が指数曲線に近づけば近づくほど、計算によって求められた指数曲線はデータに適合します。 同様に、LogEst は、値間の関係を表す値の配列を返しますが、データに直線 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> を合わせて返します。<b>LogEst は</b>指数曲線に適合します。 詳細については、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />を参照してください。 </para>
          <para>独立した x 変数が 1 つのみである場合は、次の数式を使用して y-intercept (b) 値を直接取得できます。 </para>
          <para>y 切片 (b):</para>
          <para>
INDEX(LOGEST(known_y's,known_x's),2)</para>
          <para>y = b*m^x の数式を使用して y の将来の値を予測できますが、Microsoft Excelはこれを行う <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" /> 関数を提供します。 詳細については、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />を参照してください。</para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。</para>
          <para>When entering an array constant such as known_x's as an argument, use commas to separate values in the same row and semicolons to separate rows. 区切り文字は、コントロール パネルの地域と言語のオプションのロケール設定によって異なる場合があります。 </para>
          <para>回帰方程式によって予測計算された y の値は、方程式を決定するときに使用した y の値の範囲外では、適切な値にならない場合があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogInv">
      <MemberSignature Language="C#" Value="public double LogInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16675)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 対数正規型分布に伴う確率を指定します。</param>
        <param name="Arg2">平均: ln(x) の平均値を指定します。</param>
        <param name="Arg3">標準偏差: ln(x) の標準偏差を指定します。</param>
        <summary>対数正規型分布は、対数的に変換されたデータを分析する場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" /> してください。</para>
          <para>引数が数値以外の場合 <b>、LogInv</b> は引数を返#VALUE! が返されます。 </para>
          <para>確率 = &lt; 0 または確率 = 1 の場合 &gt; <b>、LogInv</b> は値を返#NUM! が返されます。 </para>
          <para>このstandard_dev = &lt; 0 の場合 <b>、LogInv</b> は値を返#NUM! が返されます。 </para>
          <para>対数正規型分布関数の逆関数は、次の数式で表されます。 </para>
          <para>図 1: 対数正規分布関数の逆数</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Dist">
      <MemberSignature Language="C#" Value="public double LogNorm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16920)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">平均: ln(x) の平均値を指定します。</param>
        <param name="Arg3">標準偏差: ln(x) の標準偏差を指定します。</param>
        <param name="Arg4">累積 - 関数の形式を決定する論理値。 累積的な値 <b>が true の</b>場合 <b>、LogNorm_Dist</b> 関数を返します。false <b>の場合</b>、確率密度関数を返します。</param>
        <summary>x の対数正規分布の確率を返します。ln(x) は、平均と標準偏差を引数にする正規型分布になります。この関数は、対数的に変換されたデータを分析する場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合は <b>、LogNorm_Dist</b> を返#VALUE! が返されます。 </para>
          <para>x が 0 ≤の場合、または 0 standard_dev ≤ <b>場合は</b> 、LogNorm_Distを返#NUM! が返されます。 </para>
          <para>対数正規累積分布関数は、次の数式で表されます。 </para>
          <para>図 1: 対数正規累積分布の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Inv">
      <MemberSignature Language="C#" Value="public double LogNorm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16921)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 対数正規型分布に伴う確率を指定します。</param>
        <param name="Arg2">平均: ln(x) の平均値を指定します。</param>
        <param name="Arg3">標準偏差: ln(x) の標準偏差を指定します。</param>
        <summary>対数正規型の累積分布関数の逆関数を返します。対数正規型分布は、対数的に変換されたデータを分析する場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合 <b>、LogNorm_Invを</b> 返#VALUE! が返されます。 </para>
          <para>確率 = 0 または確率 = 1 の場合、LogNorm_Inv &lt; &gt; を返#NUM! <b></b> が返されます。 </para>
          <para>値standard_dev = &lt; 0 の場合 <b>、LogNorm_Inv</b> を返#NUM! が返されます。 </para>
          <para>対数正規型分布関数の逆関数は、次の数式で表されます。 </para>
          <para>図 1: 対数正規分布関数の逆数</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormDist">
      <MemberSignature Language="C#" Value="public double LogNormDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNormDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNormDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16674)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">平均: ln(x) の平均値を指定します。</param>
        <param name="Arg3">標準偏差: ln(x) の標準偏差を指定します。</param>
        <summary>x の対数正規分布の累積分布関数の値を返します。ln(x) は、引数平均と標準偏差による正規型分布です。この関数は、対数的に変換されたデータを分析する場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> してください。</para>
          <para>引数が数値以外の場合 <b>、LogNormDist は</b> 引数を返#VALUE! が返されます。 </para>
          <para>x が 0 の≤場合、または 0 の場合standard_dev ≤ <b>LogNormDist</b> は値を返#NUM! が返されます。 </para>
          <para>対数正規累積分布関数は、次の数式で表されます。 </para>
          <para>図 1: 対数正規累積分布の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public object Lookup (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Lookup([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16412)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - <b>参照が最初</b> のベクトルで検索する値。 検査値には、数値、文字列、論理値、または値を参照する名前やセル参照を指定することができます。</param>
        <param name="Arg2">検査範囲または配列: ベクトル形式では、1 行または 1 列のみのセル範囲を指定します。検査範囲には、文字列、数値、または論理値を指定できます。配列形式では、検査値と比較する文字列、数値、または論理値を含むセル範囲を指定します。</param>
        <param name="Arg3">対応範囲: ベクトル形式でのみ使用します。1 行または 1 列のみの範囲を指定します。対応範囲は検査範囲と同じサイズあることが必要です。</param>
        <summary>1 行または 1 列のみのセル範囲、または配列に含まれる値を返します。LOOKUP 関数には、ベクトル形式と配列形式の 2 つの構文形式があります。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>1 行または 1 列のみのセル範囲 (ベクトル) を検査範囲として検査値を検索し、検査値が見つかると、セル範囲の次の行または列の同じ位置にある値を返す</term>
              <description>ベクトル形式</description>
              <description>ベクトル形式の LOOKUP 関数を使用するのは、検索する値のリストが大きい場合や、値が経時変化する場合です。</description>
            </item>
            <item>
              <term>配列の先頭行または先頭列で、指定された値を検索し、検査値が見つかると、配列の最終行または最終列の同じ位置の値を返す</term>
              <description>配列形式</description>
              <description>配列形式の LOOKUP 関数を使用するのは、検索する値のリストが小さい場合や、値が経時変化しない場合です。</description>
            </item>
          </list>
          <para>
            <b>注</b>: 参照関数は <b>、7</b> つ以上の条件に対する詳細なテストまたはテストの代替 IF 関数として使用できます。 「配列形式」の使用例を参照してください。</para>
          <para>ベクトル形</para>
          <para>ベクトルとは、1 行または 1 列で構成されるセル範囲のことです。 <b>Lookup</b>のベクトル 形式は、1 行または 1 列の範囲 (ベクトルと呼ばれる) の値を検索し、2 番目の 1 行または 1 列の範囲の同じ位置から値を返します。 一致する <b>値を含</b> む範囲を指定する場合は、この形式の Lookup 関数を使用します。 他の形式の <b>Lookup は</b> 、最初の列または行を自動的に検索します。</para>
          <para>
            <b>重要</b>: lookup_vector の値は、昇順に配置する必要があります。...,-2、-1、0、1、2、..、A-Z、false <b></b> <b>、true。</b>それ以外の場合<b>、Lookup</b>は正しい値を与えない場合があります。 英字の大文字と小文字は区別されません。</para>
          <para>検査値が見つからない場合は、検査範囲に含まれている検査値以下の最大の値が使用されます。</para>
          <para>参照lookup_value lookup_vectorの最小の値よりも小さい場合は、 <b>参照</b> #N/A エラー値が返されます。</para>
          <para>配列フォーム</para>
          <para>Lookup の配列形式 <b>は、指定</b> した値の配列の最初の行または列を検索し、配列の最後の行または列の同じ位置から値を返します。 一致する値 <b>が</b> 配列の最初の行または列にある場合は、この形式の Lookup を使用します。 列または行 <b>の場所を</b> 指定する場合は、他の形式の Lookup を使用します。</para>
          <para>
            <b>ヒント</b>: 一般に、Lookup の配列形式の代わりに or 関数を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> 使用する方が最適 <b>です</b>。 この形式の <b>Lookup</b> は、他のスプレッドシート プログラムとの互換性のために提供されています。</para>
          <para>Lookup <b>が</b> オブジェクトを見つけlookup_value、配列の中で最も大きい値が使用されます。この値は、配列内の最大の値lookup_value。</para>
          <para>配列lookup_value列の最小の値よりも小さい場合 (配列の次元に応じて <b>)、Lookup</b> は #N/A エラー値を返します。</para>
          <para>Lookup の配列形式 <b>は</b> 、and 関数と非常 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> に似 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> ています。 違いは、最初の行lookup_value検索し、最初の列で検索し、配列の次元に従って <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> <b>検索</b> する点です。</para>
          <para>配列が高さ (行より列数が多い) より広い領域を配列でカバーしている場合 <b>、Lookup</b> は最初の行lookup_valueを検索します。</para>
          <para>配列が正方形の場合、または幅よりも高い場合 (列より多くの行) 場合、 <b>ルックアップ</b> は最初の列で検索します。</para>
          <para>とを使用すると、インデックスを下または全体に設定できますが、Lookup は常に行または列の最後 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> の値を選択します。 <b></b></para>
          <para>
            <b>重要</b>: 配列内の値は、昇順に配置する必要があります。...,-2、-1、0、1、2、..、A-Z、false <b>、true。</b> <b></b>それ以外の場合<b>、Lookup</b>は正しい値を与えない場合があります。 英字の大文字と小文字は区別されません。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public double Match (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Match([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Match(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検査値: 表の中で必要な項目を検索するために使用する値を指定します。</param>
        <param name="Arg2">検査範囲: 検査値を含む隣接したセル範囲を指定します。検査範囲は、配列または配列に対するセル参照を指定してもかまいません。</param>
        <param name="Arg3">照合の型: -1、0、1 の数値のいずれかを指定します。照合の型には、検査範囲の中で検査値を探す方法を指定します。</param>
        <summary>指定された順序での指定された値と一致する要素の、配列内での相対的な位置を表す数値を返します。 アイテム <b>自体</b> ではなく、範囲内のアイテムの位置が必要な場合は、関数の代わりに Match <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" /> を使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Lookup_value には、lookup_array の中で照合する値を指定します。 たとえば、電話帳で誰かの番号を検索する場合、そのユーザーの名前を参照値として使用していますが、電話番号は必要な値です。</para>
          <para>検査値には、数値、文字列、論理値、またはこれらの値に対するセル参照を指定できます。</para>
          <para>値match_type 1 の場合 <b>、Match</b> は、値が 1 以下の最大の値lookup_value。 Lookup_array昇順に配置する必要があります。..-2、-1、0、1、2、..、A-Z、false <b>、true</b> <b></b>。</para>
          <para>値match_type 0 の場合 <b>、Match</b> は、値と完全に等しい最初の値をlookup_value。 このとき検査範囲を並べ替えておく必要はありません。</para>
          <para>値match_type -1 の場合 <b>、Match</b> は、指定した値以上の小さい値をlookup_value。 Lookup_arrayは、true、false、Z-A、..という<b></b>降順に配置する必要があります。 <b></b>2、1、0、-1、-2、..など。省略match_type場合は、1 と見なされます。</para>
          <para>
            <b>Match</b> は、値自体ではなく、lookup_array内の一致する値の位置を返します。 たとえば、MATCH("b",{"a","b","c"},0) は、{"a"、"b"、"c"} の配列内での "b" の相対的な位置である "2" を返します。 </para>
          <para>
            <b>一</b> 致しても、テキスト値の照合時に大文字と小文字が区別されない。 </para>
          <para>一 <b>致の</b> 検索に失敗した場合は、エラー値#N返します。 </para>
          <para>If match_type is 0 and lookup_value is text, you can use the wildcard characters, question mark (?) and asterisk (*), in lookup_value. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public double Max (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Max([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Max (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 最大の数値を見つけるため、1 ～ 30 個までの数値を指定することができます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストに含まれる最大の数値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数に配列またはセル範囲の参照を指定した場合、その中に含まれる数値だけが計算の対象となります。配列やセル範囲に含まれる空白セル、論理値、または文字列はすべて無視されます。</para>
          <para>引数に数値が含まれている場合 <b>、Max</b> は 0 (ゼロ) を返します。 </para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>数値の論理値とテキスト表現を計算の一部として参照に含める場合は、関数を使用 <see cref="MAXA" /> します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDeterm">
      <MemberSignature Language="C#" Value="public double MDeterm (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDeterm([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDeterm(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDeterm (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MDeterm(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16547)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 行数と列数が等しい数値配列 (正方行列) を指定します。</param>
        <summary>配列の行列式を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列は、セル範囲 (A1:C3 など) として指定できます。{1,2,3;4,5,6;7,8,9}などの配列定数として。または、これらのいずれかの名前として指定します。<b>MDeterm は</b> 、次の#VALUE! エラーを返します。 </para>
          <para>配列に空白または文字列が含まれるセルがある。</para>
          <para>配列の行数と列数が等しくない。</para>
          <para>配列のサイズが 73 列、73 行を超える。</para>
          <para>The matrix determinant is a number derived from the values in array. 3 行の 3 列配列 A1:C3 の場合、determinant は次のように定義されます。 </para>
          <code>MDETERM(A1:C3)</code>
          <para>等しい</para>
          <code>A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)</code>
          <para>行列式は、一般に、多変数の連立方程式を解くために使用されます。</para>
          <para>
            <b>MDeterm は</b> 約 16 桁の精度で計算され、計算が完了しない場合に小さな数値エラーが発生する可能性があります。 たとえば、特異な行列式では、本来 0 になる計算結果が 1E-16 のように限りなく 0 に近い数値で表される場合があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDuration">
      <MemberSignature Language="C#" Value="public double MDuration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDuration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDuration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDuration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16843)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">利率: 証券の年利を指定します。</param>
        <param name="Arg4">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg5">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg6">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>額面価格を $100 と仮定して、証券に対する修正マコーレー デュレーションを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 30 年後に当たる 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、頻度、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、MDuration</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>yld &lt; 0 の場合、またはクーポン 0 の場合 &lt; は <b>、MDuration</b> は値を返#NUM! が返されます。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合 <b>、MDuration</b> は値を#NUM! が返されます。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、MDuration</b> は値を返#NUM! が返されます。 </para>
          <para>満期日≥場合 <b>、MDuration は</b> 満期日を返#NUM! が返されます。 </para>
          <para>修正デュレーションは、次の演算式で表されます。 </para>
          <para>図 1: 変更された期間の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Median([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: メジアンを計算するため、1 個から 30 個までの数値を指定することができます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストに含まれる数値のメジアン (中央値) を返します。メジアンとは、引数リストの数値を小さいものから大きなものに順に並べたとき、その中央にくる数値のことです。</summary>
        <returns>To be added.</returns>
        <remarks><para>セット内に数値の数が複数ある場合、 <b>中央</b> の 2 つの数値の平均が計算されます。 これに関しては、使用例にある 2 番目の数式を参照してください。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>注</b>: <b>Median 関数</b> は、統計的分布内の数値のグループの中心の位置である中心傾向を測定します。 中心傾向を表す指標としては、主に、次の 3 つが挙げられます。</para>
          <list type="bullet">
            <item>
              <description>平均 演算によって求める平均値であり、グループの各数値を加算してそれらの数値の個数で割ることにより計算します。たとえば、2、3、3、5、7、および 10 の平均は、30 を 6 で割った商、つまり 5 です。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、および 10 のメジアンは 4 です。</description>
            </item>
            <item>
              <description>モード 数値のグループの中で、最も頻出する数値です。たとえば、2、3、3、5、7、および 10 のモードは 3 です。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public double Min (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Min([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Min (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 最小の数値を見つけるため、1 ～ 30 個までの数値を指定することができます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストに含まれる最小の数値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数に配列またはセル範囲の参照を指定した場合、その中に含まれる数値だけが計算の対象となります。配列やセル範囲に含まれる空白セル、論理値、または文字列はすべて無視されます。</para>
          <para>引数に数値が含まれている場合 <b>、Min</b> は 0 を返します。 </para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>セル参照に計算の一部として論理値や数値を表す文字列を含める場合は、MINA 関数を使用します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MInverse">
      <MemberSignature Language="C#" Value="public object MInverse (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MInverse([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MInverse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MInverse (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MInverse(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16548)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 行数と列数が等しい数値配列 (正方行列) を指定します。</param>
        <summary>行列の逆行列を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列に指定できる最大サイズは、52 列掛ける 52 行です。このサイズを超える場合、エラー値 #VALUE! が返されます。</para>
          <para>配列には、A1:C3 のようなセル範囲、{1,2,3;4,5,6;7,8,9} のような配列定数、またはこのどちらかを参照する名前を指定することができます。</para>
          <para>配列内のセルが空の場合、またはテキストが含まれている場合 <b>、MInverse</b> は値を返#VALUE! が返されます。 </para>
          <para>
            <b>MInverse は</b> 、次の#VALUE! が返されます。 </para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。</para>
          <para>逆行列は、行列のように、一般に、複数の変数を含む数式のシステムを解く場合に使用されます。 行列とその逆関数の製品は、正体行列です。対角線の値が 1 の正方形の配列で、その他の値はすべて 0 です。 </para>
          <para>2 行 2 列の行列がどのように計算されるかを示します。セル範囲 A1:B2 にはそれぞれ a、b、c、d という数値が含まれているとします。次の表は、行列 A1:B2 の逆行列を示しています。</para>
          <list type="table">
            <item>
              <term>行 1</term>
              <description>d/(a *d-b* c)</description>
              <description>b/(b *c-a* d)</description>
            </item>
            <item>
              <term>行 2</term>
              <description>c/(b *c-a* d)</description>
              <description>a/(a *d-b* c)</description>
            </item>
          </list>
          <para>
            <b>MInverse は</b> 、約 16 桁の精度で計算され、取り消しが完了しない場合に小さな数値エラーが発生する可能性があります。 </para>
          <para>配列に指定した正方行列に逆行列がない場合は、エラー値 #NUM! <b>MInverse のエラー値</b>。 逆行列がない行列の行列式の値は 0 になります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MIrr">
      <MemberSignature Language="C#" Value="public double MIrr (object Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MIrr([in]object Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MIrr(System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIrr (Arg1 As Object, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MIrr(System::Object ^ Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16445)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 数値を含む配列またはセル参照を指定します。これらの数値は、定期的に発生する一連の支払い (負の値) と収益 (正の値) に対応します。</param>
        <param name="Arg2">安全利率: 支払額 (負のキャッシュ フロー) に対する利率を指定します。</param>
        <param name="Arg3">危険利率: 収益額 (正のキャッシュ フロー) に対する利率を指定します。</param>
        <summary>一連の定期的なキャッシュ フローに基づいて、修正内部利益率を返します。MIRR 関数では、投資原価と現金の再投資に対する受取利率 (危険利率) の両方が考慮されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>修正内部利益率を計算するには、正の値と負の値が範囲に少なくとも 1 つずつ含まれている必要があります。 それ以外の <b>場合、MIrr は</b> #DIV/0 を返します。 が返されます。 </para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>
            <b>MIrr は</b> 、値の順序を使用してキャッシュ フローの順序を解釈します。 支払額と収益額を入力するときは、その順序と符号に注意してください (支払額は負の値、収益額は正の値)。 </para>
          <para>n が値のキャッシュ フローの数である場合は、frate が finance_rate で、rrate が reinvest_rate の場合 <b>、MIrr</b> の数式は次の式になります。 </para>
          <para>図 1: MIrr メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MMult">
      <MemberSignature Language="C#" Value="public object MMult (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MMult([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MMult(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MMult (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MMult(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16549)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1、配列 2: 行列積を求める 2 つの配列を指定します。</param>
        <param name="Arg2">配列 1、配列 2: 行列積を求める 2 つの配列を指定します。</param>
        <summary>2 つの配列の行列積を返します。計算結果は、行数が配列 1 と同じで、列数が配列 2 と同じ配列になります。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列 1 の列数は、配列 2 の行数と等しい必要があります。また、両方の配列には数値だけが含まれている必要があります。</para>
          <para>配列 1、配列 2 には、セル範囲、配列定数、またはその参照を指定します。</para>
          <para>
            <b>MMult</b> は、次の#VALUE! を返します。 </para>
          <para>いずれかのセルが空白であるか、文字列が含まれている。</para>
          <para>配列 1 の列数が配列 2 の行数と異なる。</para>
          <para>計算結果の配列が合計 5,461 セル以上になる。</para>
          <para>2 つの配列 b、c の行列積である配列 a は次のように定義されます。 </para>
          <para>図 1: マトリックス製品の配列 a の 2 つの配列 b と c</para>
          <para> </para>
          <para> </para>
          <para>ここでは、i = 行数、j = 列数を示します。</para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public double Mode (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16714)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 計算の対象となる最大 30 個までの引数を指定できます。また、半角のコンマ (,) で区切られた数値の代わりに、配列またはセル範囲を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>配列またはセル範囲として指定されたデータの中で、最も頻繁に出現する値 (最頻値) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>この関数は 1 つ以上の新しい関数に置き換え、精度が向上し、その名前が使用を反映する可能性があります。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 参照してください。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ セットに重複するデータ ポイントが含まれている場合 <b>、Mode</b> はエラー値 #Nを返します。</para>
          <para>
            <b>注</b>: <b>Mode 関数は</b> 、統計的分布内の数値のグループの中心の位置である中心傾向を測定します。 中心傾向を表す指標としては、主に、次の 3 つが挙げられます。</para>
          <list type="bullet">
            <item>
              <description>平均 演算によって求める平均値であり、グループの各数値を加算してそれらの数値の個数で割ることにより計算します。たとえば、2、3、3、5、7、および 10 の平均は、30 を 6 で割った商、つまり 5 です。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、および 10 のメジアンは 4 です。</description>
            </item>
            <item>
              <description>モード 数値のグループの中で、最も頻出する数値です。たとえば、2、3、3、5、7、および 10 のモードは 3 です。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Mult">
      <MemberSignature Language="C#" Value="public object Mode_Mult (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Mode_Mult([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Mult (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1: 計算の対象となる最初の引数の数値を指定します。</param>
        <param name="Arg2">数値 2 ～ 数値 30: 計算の対象となる 2 番目から 30 番目までの引数の数値を指定します。また、半角のコンマ (,) で区切られた数値の代わりに、配列またはセル範囲を指定することもできます。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>配列またはセル範囲として指定されたデータの中で、最も頻繁に出現する値 (最頻値) の垂直配列を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ セットに重複するデータ ポイントが含<b></b>まれている場合、Mode_Mult/A エラー値#N返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Sngl">
      <MemberSignature Language="C#" Value="public double Mode_Sngl (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode_Sngl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Sngl (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 計算の対象となる引数を最大 30 個まで指定します。また、半角のコンマ (,) で区切られた数値の代わりに、配列またはセル範囲を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>配列またはセル範囲として指定されたデータの中で、最も頻繁に出現する値 (最頻値) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ セットに重複するデータ ポイントがない場合<b></b>、Mode_Sngl/A エラー値#N返します。</para>
          <para>
            <b>注</b>: <b>Mode_Sngl関数</b> は、統計的分布における数値のグループの中心の位置である中心傾向を測定します。 中心傾向を表す指標としては、主に、次の 3 つが挙げられます。</para>
          <list type="bullet">
            <item>
              <description>平均 算術平均です。数値グループを加算した値を、さらに、数値の個数で割ることによって求められます。たとえば、2、3、3、5、7、10 という数値グループがあった場合、30 を 6 で割った 5 が平均値となります。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、10 のメジアンは 4 になります。</description>
            </item>
            <item>
              <description>モード 数値グループの中で最も頻繁に出現する数値のことです。たとえば、2、3、3、5、7、10 のモードは 3 になります。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MRound">
      <MemberSignature Language="C#" Value="public double MRound (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MRound([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MRound(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MRound (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MRound(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16806)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 切り上げの対象となる数値を指定します。</param>
        <param name="Arg2">倍数: 四捨五入した数値が、その倍数となるような数値を指定します。つまり、倍数は、四捨五入した数値の約数になります。</param>
        <summary>指定された値の倍数になるように、数値を四捨五入します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>MRound は</b> 、除算数の残りの倍数が倍数の値の半分以上の場合に、ゼロから離れて切り上げを行います。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiNomial">
      <MemberSignature Language="C#" Value="public double MultiNomial (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MultiNomial([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MultiNomial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MultiNomial (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 計算の対象となる数値を最大 29 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>指定された数値の和の階乗と、指定された数値の階乗の積との比を返します。つまり、多項係数を求めます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合 <b>、MultiNomial</b> は引数を返#VALUE! が返されます。 </para>
          <para>引数が 0 未満の場合 <b>、MultiNomial</b> は引数を返#NUM! が返されます。 </para>
          <para>多項係数の計算は次のように定義されています。 </para>
          <para>図 1: MultiNomial メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Munit">
      <MemberSignature Language="C#" Value="public object Munit (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Munit([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Munit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Munit (Arg1 As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Munit(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16966)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">求める単位行列の次元を指定する整数。</param>
        <summary>指定された次元の単位行列を返します。</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinom_Dist">
      <MemberSignature Language="C#" Value="public double NegBinom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16922)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">失敗数: 試行が失敗する回数を指定します。</param>
        <param name="Arg2">成功数: 分析のしきい値となる、試行が成功する回数を指定します。</param>
        <param name="Arg3">成功率: 試行が成功する確率を指定します。</param>
        <param name="Arg4">累積 - 関数の形式を決定する論理値。 累積的な値<b>が true の</b><b>場合、NegBinom_Dist</b>関数を返します。false<b>の場合</b>、確率密度関数を返します。</param>
        <summary>負の二項分布の確率関数の値を返します。 <b>NegBinom_Dist</b> は、成功の一定の確率がnumber_f number_s番目の成功の前に number_f エラーが発生する確率を返probability_s。 この関数は二項分布を計算する BINOMDIST 関数に似ていますが、試行の成功数が定数で試行回数が変数である点が異なります。 さらに、二項分布の場合と同様に、対象となる試行は独立試行であると見なされます。</summary>
        <returns>To be added.</returns>
        <remarks><para>たとえば、優れた反射神経を持つ 10 人を見つける必要があります。また、候補者がこれらの資格を持つ確率は 0.3 です。 <b>NegBinom_Dist</b> は、10 人の資格を持つすべての候補者を見つける前に、特定の数の資格のない候補者にインタビューする確率を計算します。 </para>
          <para>失敗数、成功数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>引数が数値以外の場合は <b>、NegBinom_Dist</b> を返#VALUE! が返されます。 </para>
          <para>0 probability_s、または確率 1 の場合は、NegBinom_Dist &lt; &gt; を返#NUM! <b></b> が返されます。 </para>
          <para>0 または &lt; number_f 1 の &lt; 場合number_s、NegBinom_Distを返#NUM! <b></b> が返されます。 </para>
          <para>負の二項分布は、次の演算式で表されます。 </para>
          <para>図 1: 負の二項分布の数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>x はnumber_f、r はnumber_s、p はprobability_s。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinomDist">
      <MemberSignature Language="C#" Value="public double NegBinomDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinomDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinomDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16676)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">失敗数: 試行が失敗する回数を指定します。</param>
        <param name="Arg2">成功数: 分析のしきい値となる、試行が成功する回数を指定します。</param>
        <param name="Arg3">成功率: 試行が成功する確率を指定します。</param>
        <summary>負の二項分布の確率関数の値を返します。 NegBinomDist は、成功の一定の確率がnumber_s 番目の成功の前に number_f エラーが発生する確率をprobability_s。 この関数は二項分布を計算する BINOMDIST 関数に似ていますが、試行の成功数が定数で試行回数が変数である点が異なります。 さらに、二項分布の場合と同様に、対象となる試行は独立試行であると見なされます。</summary>
        <returns>To be added.</returns>
        <remarks><para>この関数は 1 つ以上の新しい関数に置き換え、精度が向上し、その名前が使用を反映する可能性があります。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> してください。</para>
          <para>たとえば、優れた反射神経を持つ 10 人を見つける必要があります。また、候補者がこれらの資格を持つ確率は 0.3 です。 <b>NegBinomDist</b> は、10 人の資格を持つ候補者をすべて見つける前に、特定の数の非修飾の候補者にインタビューする確率を計算します。 </para>
          <para>失敗数、成功数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>引数が数値以外の場合 <b>、NegBinomDist は</b> 引数を返#VALUE! が返されます。 </para>
          <para>0 probability_s &lt; 場合、または確率 1 の場合 &gt; <b>、NegBinomDist</b> は値を返#NUM! が返されます。 </para>
          <para>0 または &lt; number_f &lt; 1 <b>number_s、NegBinomDist</b> は値を#NUM! が返されます。 </para>
          <para>負の二項分布は、次の演算式で表されます。 </para>
          <para>図 1: 負の二項分布の数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>x はnumber_f、r はnumber_s、p はprobability_s。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays">
      <MemberSignature Language="C#" Value="public double NetworkDays (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を表す日付を指定します。</param>
        <param name="Arg2">終了日: 対象期間の最終日を表す日付を指定します。</param>
        <param name="Arg3">休日: 国民の祝日や夏期休暇など、稼動日数の計算から除外する日を表す日付を指定します。この引数は省略することができます。日付を含む一連のセルか、日付を示すシリアル値の配列定数を指定できます。</param>
        <summary>開始日から終了日までの期間に含まれる稼動日の日数を返します。 稼動日とは、土曜、日曜、および指定された休日を除く日のことです。 <b>NetworkDays を使用して</b>、特定の期間に働いた日数に基づいて発生する従業員の福利厚生を計算します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>引数が有効な日付でない場合 <b>、NetworkDays は</b> 引数を返#VALUE! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays_Intl">
      <MemberSignature Language="C#" Value="public double NetworkDays_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16904)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 差分を計算するための起算日です。開始日は、終了日よりも前か、同じか、または後にすることができます。</param>
        <param name="Arg2">終了日: 差分を計算するための最終日です。開始日は、終了日よりも前か、同じか、または後にすることができます。</param>
        <param name="Arg3">[週末] - 週末の日であり、週末から週末の間の全営業日数に含まれていない週start_dateをend_date。 週末は、週末が発生する時間を指定する週末番号または文字列です。</param>
        <param name="Arg4">祭日: 稼動日数の計算から除外する日付のセットです。このパラメーターは、日付が入力されているセル範囲、または日付を表すシリアル値の配列定数です。祭日の日付またはシリアル値は任意の順序で指定できます。</param>
        <summary>週末の曜日と日数を示すパラメーターを使用して、2 つの日付の間に含まれる稼動日の日数を返します。週末、および祭日として指定されている日は、稼動日と見なされません。</summary>
        <returns>To be added.</returns>
        <remarks><para>開始日が終了日よりも後の場合、戻り値の符号は負になり、値の大きさは稼働日数になります。</para>
          <para>現在start_date基準値の範囲が外されている場合は、NetworkDays_Intl <b>を返</b> #NUM。 が返されます。 </para>
          <para>現在end_date基準値の範囲が外れ場合は、NetworkDays_Intl <b>を返</b> #NUM! が返されます。 </para>
          <para>週末の文字列が無効な長さであるか、無効な文字が含まれている場合は、NetworkDays_Intl <b>を返</b> #VALUE! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Nominal">
      <MemberSignature Language="C#" Value="public double Nominal (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Nominal([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Nominal(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Nominal (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Nominal(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16829)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">実効利率: 実効年利率を指定します。</param>
        <param name="Arg2">複利計算回数: 1 年あたりの複利計算回数を指定します。</param>
        <summary>指定された実効年利率と 1 年あたりの複利計算回数を元に、名目年利率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>複利計算回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>いずれかの引数が数値以外の場合、 <b>呼び</b> 出し値を#VALUE! が返されます。 </para>
          <para>0 effect_rate ≤場合、または npery 1 の場合 &lt; は <b>、呼</b> び出し値を返#NUM! が返されます。 </para>
          <para>
            <b>公称</b> は、次 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" /> の式に示すように関連しています。 </para>
          <para>図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Dist">
      <MemberSignature Language="C#" Value="public double Norm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">平均: 対象となる分布の算術平均 (相加平均) を指定します。</param>
        <param name="Arg3">標準偏差: 対象となる分布の標準偏差を指定します。</param>
        <param name="Arg4">累積 - 関数の形式を決定する論理値。 累積的な値 <b>が true の</b>場合 <b>、Norm_Dist</b> 関数を返します。false <b>の場合</b>は、確率質量関数を返します。</param>
        <summary>指定した平均と標準偏差に対する正規分布関数の値を返します。この関数は、仮説検定を始めとする統計学の幅広い分野に応用できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>平均または平均standard_dev数値以外の場合は <b>、Norm_Dist</b> 値を#VALUE! が返されます。 </para>
          <para>0 standard_dev ≤場合 <b>、Norm_Dist</b> を返#NUM! が返されます。 </para>
          <para>平均 = 0、standard_dev = 1、累積 = <b>true</b>の <b>場合、Norm_Dist</b> 正規分布を返します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> 。 </para>
          <para>正規密度関数の数式 (累積 = <b>false)</b>は次の式です。 </para>
          <para>図 1: 正規密度関数の数式</para>
          <para> </para>
          <para> </para>
          <para>累積 = <b>true の場合</b>、数式は負の無限大から指定された数式の x への整数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Inv">
      <MemberSignature Language="C#" Value="public double Norm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16884)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 正規分布における確率を指定します。</param>
        <param name="Arg2">平均: 対象となる分布の算術平均 (相加平均) を指定します。</param>
        <param name="Arg3">標準偏差: 対象となる分布の標準偏差を指定します。</param>
        <summary>指定した平均と標準偏差に対する正規分布の累積分布関数の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合は <b>、Norm_Inv</b> を返#VALUE! が返されます。 </para>
          <para>確率 = 0 または確率 = 1 の場合は、Norm_Inv &lt; &gt; を返#NUM! <b></b> が返されます。 </para>
          <para>0 standard_dev ≤場合 <b>、Norm_Inv</b> を返#NUM! が返されます。 </para>
          <para>平均 = 0 で、standard_dev = 1 の場合Norm_Inv標準正規分布を使用します (参照<b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> )。</para>
          <para>確率の値を指定すると、Norm_Invは、NORM_DIST(x、平均、standard_dev、TRUE) = 確率などの値 x を求める必要があります。 <b></b> したがって、値の精度 <b>Norm_Inv</b> の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> 。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Dist">
      <MemberSignature Language="C#" Value="public double Norm_S_Dist (double Arg1, bool Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Dist([in]float64 Arg1, [in]bool Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Dist (Arg1 As Double, Arg2 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Dist(double Arg1, bool Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16923)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">z: 関数に代入する値を指定します。</param>
        <param name="Arg2">累積 - 関数の形式を決定する論理値。 累積的な値 <b>が true の</b>場合 <b>、Norm_S_Dist</b> 関数が返されます。false <b>の場合</b>は、確率質量関数を返します。</param>
        <summary>標準正規分布の累積分布関数の値を返します。この分布は、平均が 0 (ゼロ) で標準偏差が 1 である正規分布に対応します。正規分布表の代わりにこの関数を使用することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>z が数値以外の場合は <b>、Norm_S_Dist</b> を返#VALUE! が返されます。 </para>
          <para>標準正規密度関数の方程式は次の式です。 </para>
          <para>図 1: 標準正規密度関数の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Inv">
      <MemberSignature Language="C#" Value="public double Norm_S_Inv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Inv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Inv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Inv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16924)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 正規分布における確率を指定します。</param>
        <summary>標準正規分布の累積分布関数の逆関数の値を返します。この分布は、平均が 0 (ゼロ) で標準偏差が 1 である正規分布に対応します。</summary>
        <returns>To be added.</returns>
        <remarks><para>確率が数値以外の場合は <b>、Norm_S_Inv</b> を返#VALUE! が返されます。 </para>
          <para>確率 &lt; 0 または確率 1 の場合は、Norm_S_Inv &gt; 値を#NUM! <b></b> が返されます。</para>
          <para>確率の値を指定すると、Norm_S_Inv(z) = 確率NORM_S_DIST z を求める必要があります。 <b></b> したがって、データの精度 <b>Norm_S_Inv</b>の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> 。 <b>Norm_S_Invは</b> 反復検索手法を使用します。 100 回反復計算を繰り返しても計算結果が収束しない場合、エラー値 #N/A が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormDist">
      <MemberSignature Language="C#" Value="public double NormDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16677)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">平均: 対象となる分布の算術平均 (相加平均) を指定します。</param>
        <param name="Arg3">標準偏差: 対象となる分布の標準偏差を指定します。</param>
        <param name="Arg4">関数形式: 関数値の形式を、論理値で指定します。 累積値が<b>true の場合</b><b>、NormDist は</b>累積分布関数を返します。false<b>の場合</b>は、確率質量関数を返します。</param>
        <summary>指定した平均と標準偏差に対する正規分布関数の値を返します。この関数は、仮説検定を始めとする統計学の幅広い分野に応用できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> してください。</para>
          <para>平均または数値 <b>standard_dev、NormDist</b> は数値を返#VALUE! が返されます。 </para>
          <para>0 standard_dev ≤場合 <b>、NormDist は</b> 値を#NUM! が返されます。 </para>
          <para>平均 = 0、standard_dev = 1、累積 = <b>true</b>の場合 <b>、NormDist</b> は標準正規分布 <b>である NormDist を返します</b>。 </para>
          <para>正規密度関数の数式 (累積 = <b>false)</b>は次の式です。 </para>
          <para>図 1: 正規密度関数の数式</para>
          <para> </para>
          <para> </para>
          <para>累積 = <b>true の場合</b>、数式は負の無限大から指定された数式の x への整数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInv">
      <MemberSignature Language="C#" Value="public double NormInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16679)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 正規分布における確率を指定します。</param>
        <param name="Arg2">平均: 対象となる分布の算術平均 (相加平均) を指定します。</param>
        <param name="Arg3">標準偏差: 対象となる分布の標準偏差を指定します。</param>
        <summary>指定した平均と標準偏差に対する正規分布の累積分布関数の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" /> してください。</para>
          <para>引数が数値以外の場合 <b>、NormInv</b> は引数を#VALUE! が返されます。 </para>
          <para>確率 &lt; 0 または確率 1 の場合 &gt; <b>、NormInv</b> は値を返#NUM! が返されます。 </para>
          <para>0 standard_dev ≤場合 <b>、NormInv は</b> 値を#NUM! が返されます。 </para>
          <para>平均 = 0 で、standard_dev = 1 の場合 <b>、NormInv</b> は標準正規分布を使用します (参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" /> )。 </para>
          <para>確率の値を指定すると <b>、NormInv</b> は、その値 x を求め、NORMDIST(x、平均、standard_dev、TRUE) = 確率です。 したがって <b>、NormInv の精度は</b> 、 の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" /> 。 <b>NormInv は反復</b> 検索手法を使用します。 100 回反復計算を繰り返しても計算結果が収束しない場合、エラー値 #N/A が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSDist">
      <MemberSignature Language="C#" Value="public double NormSDist (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSDist([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSDist (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSDist(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16678)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">z: 関数に代入する値を指定します。</param>
        <summary>標準正規分布の累積分布関数の値を返します。この分布は、平均が 0 (ゼロ) で標準偏差が 1 である正規分布に対応します。正規分布表の代わりにこの関数を使用することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> してください。</para>
          <para>z が数値以外の場合 <b>、NormSDist は</b> 値を#VALUE! が返されます。 </para>
          <para>標準正規密度関数の方程式は次の式です。 </para>
          <para>図 1: 標準正規密度関数の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSInv">
      <MemberSignature Language="C#" Value="public double NormSInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16680)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 正規分布における確率を指定します。</param>
        <summary>標準正規分布の累積分布関数の逆関数の値を返します。この分布は、平均が 0 で標準偏差が 1 である正規分布に対応します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> してください。</para>
          <para>確率が数値以外の場合 <b>、NormSInv は</b> 数値を返#VALUE! が返されます。 </para>
          <para>確率 = &lt; 0 または確率 &gt; = 1 の場合 <b>、NormSInv</b> は値を返#NUM! が返されます。</para>
          <para>確率の値を指定すると <b>、NormSInv は、NORMSDIST(z)</b> = 確率などの値 z を求める。 したがって <b>、NormSInv の精度は</b> 、 の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" /> 。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public double NPer (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NPer([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NPer(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16442)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。</param>
        <param name="Arg2">定期支払額: 毎回の支払額を指定します。投資期間内に支払額を変更することはできません。通常、定期支払額には元金と利息が含まれますが、その他の手数料や税金は含まれません。</param>
        <param name="Arg3">現在価値: 現在の投資額、または、将来行われる一連の支払いを現時点で一括払いした場合の合計金額を指定します。</param>
        <param name="Arg4">将来価値: 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 を指定したと見なされます。たとえば、ローンなどの借入金の将来価値は 0 になります。</param>
        <param name="Arg5">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。省略すると、0 を指定したと見なされます。</param>
        <summary>定額の支払いを定期的に行い、利率が一定であると仮定して、投資に必要な期間 (支払回数) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 または省略</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Npv">
      <MemberSignature Language="C#" Value="public double Npv (double Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Npv([in]float64 Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Npv (Arg1 As Double, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16395)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">割引率: 投資期間を通じて一定の割引率を指定します。</param>
        <param name="Arg2">値 1、値 2 ...: 支払額 (負の値) と収益額 (正の値) を指定します。引数は 1 ～ 29 個まで指定できます。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>投資の正味現在価値を、割引率、将来行われる一連の支払い (負の値)、およびその収益 (正の値) を使って算出します。</summary>
        <returns>To be added.</returns>
        <remarks><para>値 1、値 2 ... は定期的に、各期末に発生するものです。</para>
          <para>
            <b>Npv は</b> 、value1、value2、..の順序を使用します。キャッシュ フローの順序を解釈します。 支払額と収益額を入力する際は、その順序に注意してください。 </para>
          <para>引数が数値、空白セル、論理値、または数値のテキスト表現の場合はそれぞれ計算の対象となりますが、エラー値および数値に変換できないテキストの場合は無視されます。</para>
          <para>引数が配列または参照である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、テキスト、またはエラー値はすべて無視されます。</para>
          <para><b>Npv 投資</b>は、value1 キャッシュ フローの日付より 1 期間前に開始され、リスト内の最後のキャッシュ フローで終了します。 <b>Npv の計算</b>は、将来のキャッシュ フローに基づいて計算されます。 最初のキャッシュ フローが最初の期間の初めに発生した場合、最初の値を引数 values に含めず <b>、Npv</b> 結果に追加する必要があります。 詳細については使用例を参照してください。 </para>
          <para>n が値のリスト内のキャッシュ フローの数である場合 <b>、Npv</b> の数式は次の式になります。 </para>
          <para>図 1: Npv メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>
            <b>Npv</b> は関数 (現在 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> の値) に似ています。 PV と <b>Npv</b> の主な違いは、キャッシュ フローが期間の終わりまたは開始時に <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> 開始できる点です。 変数 <b>Npv キャッシュ フローの値とは</b> 異なり、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> キャッシュ フローは投資全体で一定である必要があります。 年金および財務機能の詳細については、「. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> </para>
          <para>
            <b>Npv</b> は関数 (内部 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> の戻り値) にも関連しています。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> は <b>、Npv</b> が 0 と等しいレートです。NPV(IRR(...)、...) = 0 です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberValue">
      <MemberSignature Language="C#" Value="public double NumberValue (string Arg1, string Arg2, string Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NumberValue([in]string Arg1, [in]string Arg2, [in]string Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NumberValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NumberValue (Arg1 As String, Arg2 As String, Arg3 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NumberValue(System::String ^ Arg1, System::String ^ Arg2, System::String ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16969)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する、数値を表す文字列を指定します。</param>
        <param name="Arg2">文字列で小数点区切り記号として使用する文字を指定します。</param>
        <param name="Arg3">文字列で桁区切り記号として使用する文字を指定します。</param>
        <summary>ロケールに依存しない方法でテキストを数値に変換します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Bin">
      <MemberSignature Language="C#" Value="public string Oct2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16774)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 8 進数を指定します。数値に指定できる文字数は 10 文字までです。数値の最上位のビットは符号を表し、残りの 29 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">桁数: 8 進表記するときに使用する文字数 (桁数) を指定します。 場所を省略すると <b>、Oct2Bin は</b> 必要な最小文字数を使用します。 桁数を指定することによって、変換結果の先頭に 0 (ゼロ) を表示することができます。</param>
        <summary>8 進数を 2 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が負の場合 <b>、Oct2Bin は</b> 場所を無視し、10 文字の 2 進数を返します。 </para>
          <para>数値が負の数である場合、数値に 7777777000 より小さい値を指定することはできません。数値が正の数である場合、数値に 777 より大きい値を指定することはできません。</para>
          <para>数値が有効な 8 進数でない場合 <b>、Oct2Bin</b> は値を返#NUM! が返されます。 </para>
          <para><b>Oct2Bin に複数</b>の文字が必要な場合は、文字列を返#NUM! が返されます。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合 <b>、Oct2Bin</b> は数値を返#VALUE! が返されます。 </para>
          <para>場所が負の場合 <b>、Oct2Bin</b> は値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Dec">
      <MemberSignature Language="C#" Value="public string Oct2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Oct2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16776)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 8 進数を指定します。数値に指定できる文字数は 10 文字 (30 ビット) までです。数値の最上位のビットは符号を表し、残りの 29 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <summary>8 進数を 10 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が有効な 8 進数でない場合 <b>、Oct2Dec</b> は値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Hex">
      <MemberSignature Language="C#" Value="public string Oct2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16775)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 8 進数を指定します。数値に指定できる文字数は 10 文字 (30 ビット) までです。数値の最上位のビットは符号を表し、残りの 29 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">桁数: 8 進表記するときに使用する文字数 (桁数) を指定します。 場所を省略すると <b>、Oct2Hex は</b> 必要な最小文字数を使用します。 桁数を指定することによって、変換結果の先頭に 0 (ゼロ) を表示することができます。</param>
        <summary>8 進数を 16 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が負の場合 <b>、Oct2Hex は</b> 場所を無視し、10 文字の 16 進数を返します。 </para>
          <para>数値が有効な 8 進数でない場合 <b>、Oct2Hex</b> は値を返#NUM! が返されます。 </para>
          <para><b>Oct2Hex に複数</b>の文字が必要な場合は、文字列を返#NUM! が返されます。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合 <b>、Oct2Hex</b> は数値を返#VALUE! が返されます。 </para>
          <para>場所が負の場合 <b>、Oct2Hex は</b> 値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Odd">
      <MemberSignature Language="C#" Value="public double Odd (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Odd([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Odd(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Odd (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Odd(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16682)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 切り上げの対象となる数値を指定します。</param>
        <summary>数値を切り上げて、最も近い奇数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が数値以外の場合 <b>、Odd</b> は数値を返#VALUE! が返されます。 </para>
          <para>数値の符号に関係なく、切り上げられた値の絶対値は、数値より大きくなります。数値が既に奇数の値になっている場合、切り上げは行われません。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFPrice">
      <MemberSignature Language="C#" Value="public double OddFPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16846)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">発行日: 証券の発行日を指定します。</param>
        <param name="Arg4">初回利払日: 証券の最初の利払日を指定します。</param>
        <param name="Arg5">利率: 証券の利率を指定します。</param>
        <param name="Arg6">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg7">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg8">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg9">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>1 期目の日数が半端な証券に対して、額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、発行日、初回利払日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済、満期日、発行、first_couponが有効な日付でない場合 <b>、OddFPrice</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>rate &lt; 0 または yld 0 の場合 &lt; <b>、OddFPrice</b> は値を返#NUM! が返されます。 </para>
          <para>基準 &lt; 0 または基礎 4 の場合 &gt; <b>、OddFPrice</b> は値を返#NUM! が返されます。 </para>
          <para>次の日付条件を満たす必要があります。それ以外の <b>場合、OddFPrice は</b> データを#NUM! エラー値: </para>
          <para>満期日 &gt; first_coupon &gt; の &gt; 問題</para>
          <para> </para>
          <para>
            <b>OddFPrice は</b> 、次のように計算されます。</para>
          <para>図 1: 奇数短い最初のクーポン</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>A = クーポン期間の開始から決済日 (未払い日数) の日数。</para>
          <para>DSC = 決済から次のクーポンの日付への日数。</para>
          <para>DFC = 奇数の最初のクーポンの開始から最初のクーポンの日付への日数。</para>
          <para>E = クーポン期間の日数。</para>
          <para>N = 決済日と償還日の間に支払うクーポンの数。 (この数値に分数が含まれている場合は、次の全体番号に上げされます。</para>
          <para>奇数長い最初のクーポン:</para>
          <para>図 2: 奇数長の最初のクーポン</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>Ai = 奇数期間内の ith、または最後の準クーポン期間の開始からの日数。</para>
          <para>DCi = 日付 (または発行日) から最初の準クーポン (i = 1) または準クーポンの日数 (i = 2,..., i = NC)。</para>
          <para>DSC = 決済から次のクーポンの日付まで日数。</para>
          <para>E = クーポン期間の日数。</para>
          <para>N = 最初の実際のクーポンの日付と償還日の間に支払うクーポンの数。 (この数値に分数が含まれている場合は、次の全体番号に上げされます。</para>
          <para>NC = 奇数期間に収まる準クーポン期間の数。 (この数値に分数が含まれている場合は、次の全体番号に上げされます。</para>
          <para>NLi = 通常の長さは、奇数期間内の完全な ith、または最後の準クーポン期間の日数です。</para>
          <para>Nq = 決済日から最初のクーポンの間の準クーポン期間全体の数。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFYield">
      <MemberSignature Language="C#" Value="public double OddFYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16847)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">発行日: 証券の発行日を指定します。</param>
        <param name="Arg4">初回利払日: 証券の最初の利払日を指定します。</param>
        <param name="Arg5">利率: 証券の利率を指定します。</param>
        <param name="Arg6">現在価値: 証券の価格を指定します。</param>
        <param name="Arg7">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg8">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg9">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>1 期目の日数が半端な証券の利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、発行日、初回利払日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済、満期日、発行、またはfirst_couponが有効な日付でない場合 <b>、OddFYield</b> は日付を返#VALUE。 が返されます。 </para>
          <para>rate &lt; 0 または pr ≤ 0 の場合 <b>、OddFYield</b> は値を#NUM! が返されます。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、OddFYield</b> は値を返#NUM! が返されます。 </para>
          <para>次の日付条件を満たす必要があります。それ以外の <b>場合、OddFYield</b> は次の#NUM! エラー値: </para>
          <para>満期日 &gt; first_coupon &gt; の &gt; 問題</para>
          <para>Excelを使用して<b>OddFYield を計算します</b>。 この関数は、関数に使用される数式に基づいて Newton メソッドを使用します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 。 指定された利回りを含む概算価格が実際の価格になるまで、利回りの値を変えて反復計算が最大 100 回行われます。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>OddFYield が使用する数式については、次を参照</b>してください。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLPrice">
      <MemberSignature Language="C#" Value="public double OddLPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16844)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">最終利払日: 証券の最後の利払日を指定します。</param>
        <param name="Arg4">利率: 証券の利率を指定します。</param>
        <param name="Arg5">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg6">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg7">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg8">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>最終利払期間の日数が半端な証券に対して、額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、最終利払日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済、満期日、またはlast_interestが有効な日付でない場合 <b>、OddLPrice</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>rate &lt; 0 または yld 0 の場合 &lt; <b>、OddLPrice</b> は値を返#NUM! が返されます。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、OddLPrice</b> は値を返#NUM! が返されます。 </para>
          <para>次の日付条件を満たす必要があります。それ以外の <b>場合、OddLPrice は</b> 値を#NUM! エラー値: </para>
          <para>満期日 &gt; last_interest &gt;</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLYield">
      <MemberSignature Language="C#" Value="public double OddLYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16845)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">最終利払日: 証券の最後の利払日を指定します。</param>
        <param name="Arg4">利率: 証券の利率を指定します。</param>
        <param name="Arg5">現在価値: 証券の価格を指定します。</param>
        <param name="Arg6">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg7">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg8">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>最終期の日数が半端な証券の利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、最終利払日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済、満期日、またはlast_interestが有効な日付でない場合 <b>、OddLYield</b> は日付を返#VALUE! が返されます。 </para>
          <para>rate &lt; 0 または pr ≤ 0 の場合 <b>、OddLYield</b> は値を#NUM! が返されます。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、OddLYield</b> は値を返#NUM! が返されます。 </para>
          <para>次の日付条件を満たす必要があります。それ以外の <b>場合、OddLYield</b> は次の#NUM! エラー値: </para>
          <para>満期日 &gt; last_interest &gt; </para>
          <para>
            <b>OddLYield は</b> 次のように計算されます。 </para>
          <para>図 1: OddLYield メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>Ai = 引き換え前の最後の利息日から繰り越される奇数期間内の、ith または last の準クーポン期間の未払い日数。</para>
          <para>DCi = 実際のクーポン期間の長さで区切られた、ith または last の準クーポン期間でカウントされた日数。</para>
          <para>NC = 奇数期間に収まる準クーポン期間の数。この数値に分数が含まれている場合は、次の全体番号に引き上げされます。</para>
          <para>NLi = 奇数のクーポン期間内の ith、または最終の準クーポン期間の日の通常の長さ。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public bool Or (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Or([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Or(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16421)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Logical1,logical2,... - 1 ~ 30 の条件をテストする場合は <b>、true</b> または false のいずれか <b>になります</b>。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数 <b>が true の</b> 場合は true を <b>返します</b>。すべての引数 <b>が false</b> の場合は false を <b>返します</b>。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数は、true や<b>false</b>などの<b></b>論理値、または論理値を含む配列または参照で評価する必要があります。 </para>
          <para>引数として指定した配列や参照に、文字列または空白セルが含まれる場合、これらの値は無視されます。</para>
          <para>指定した範囲に論理値が含まれている場合 <b>、Or</b> は値を#VALUE! が返されます。 </para>
          <para>Or 配列の <b>数式を</b> 使用して、配列内で値が発生した場合を確認できます。 To enter an array formula, press CTRL+SHIFT+ENTER.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定されたオブジェクトの親オブジェクトを取得します。値の取得のみ可能です。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PDuration">
      <MemberSignature Language="C#" Value="public double PDuration (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PDuration([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PDuration(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PDuration (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double PDuration(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16954)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">期間ごとの利率。</param>
        <param name="Arg2">投資の現在価値。</param>
        <param name="Arg3">希望する投資の将来価値。</param>
        <summary>投資が指定した金額に達するまでに必要な期間を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pearson">
      <MemberSignature Language="C#" Value="public double Pearson (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pearson([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pearson (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pearson(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16696)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 複数の独立変数に対応するデータを指定します。</param>
        <param name="Arg2">配列 2: 複数の従属変数に対応するデータを指定します。</param>
        <summary>ピアソンの積率相関係数 r の値を返します。r は -1.0 から 1.0 の範囲の数値で、2 組のデータ間での線形相関の程度を示します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>array1 と array2 が空の場合、またはデータ ポイントの数が異なる場合 <b>、Pearson</b> はエラー値 #N値を返します。 </para>
          <para>ピアソンの積率相関係数 r を表す数式は次のとおりです。 </para>
          <para>図 1: Pearson 製品モーメント相関係数</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(配列 1)、y は標本平均 AVERAGE(配列 2) です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile">
      <MemberSignature Language="C#" Value="public double Percentile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16712)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">率: 0 ～ 1 の範囲で、目的の百分位の値を指定します。</param>
        <summary>配列のデータの中で、百分率で率に位置する値を返します。PERCENTILE 関数は入学試験などの合否ラインなどを決めるときに利用します。たとえば、PERSENTILE 関数を使って、成績が上位 10% の志願者を合格とすることができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッドを <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" /> 参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" /> してください。 </para>
          <para>配列が空の場合 <b>、Percentile は</b> 値を返#NUM! が返されます。 </para>
          <para>k が数値以外の場合 <b>、Percentile は</b> 値を返#VALUE! が返されます。 </para>
          <para>k が &lt; 0 の場合、または k &gt; 1 の場合 <b>、Percentile は</b> 値を返#NUM! が返されます。 </para>
          <para>k が 1/(n - 1)<b></b>の倍数ではない場合、パーセント補間によって k 番目のパーセント値の値が決定されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Exc">
      <MemberSignature Language="C#" Value="public double Percentile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16885)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、配列またはセル範囲を指定します。</param>
        <param name="Arg2">率: 0 ～ 1 (0 と 1 を除く) の範囲で、目的の百分位の値を指定します。</param>
        <summary>配列のデータの中で、百分率で率に位置する値を返します。率は、0 ～ 1 (0 と 1 を除く) の範囲の値です。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合 <b>、Percentile_Exc</b> を返#NUM! が返されます。 </para>
          <para>k が数値以外の場合 <b>、Percentile_Exc</b> を返#VALUE! が返されます。 </para>
          <para>k が 0 の≤場合、または k が 1 の≥場合は、Percentile_Exc <b>を返</b> #NUM! が返されます。 </para>
          <para>k が 1/(n - 1)<b></b>の倍数ではない場合、Percentile_Exc補間して、k 番目のパーセント値で値を決定します。 </para>
          <para>
            <b>Percentile_Exc</b> 指定したパーセントの値が配列内の 2 つの値の間にある場合、この値は補間されます。 百分位、つまり指定された率について、データの補間を実行できない場合は、エラー #NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Inc">
      <MemberSignature Language="C#" Value="public double Percentile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16886)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、配列またはセル範囲を指定します。</param>
        <param name="Arg2">率: 0 ～ 1 (0 と 1 を含む) の範囲で、目的の百分位の値を指定します。</param>
        <summary>配列のデータの中で、百分率で率に位置する値を返します。この関数は入学試験などの合否ラインなどを決めるときに利用します。たとえば、この関数を使って、成績が上位 10% の志願者を合格とすることができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合 <b>、Percentile_Inc</b> を返#NUM! が返されます。 </para>
          <para>k が数値以外の場合 <b>、Percentile_Inc</b> を返#VALUE! が返されます。 </para>
          <para>k が &lt; 0 の場合、または k 1 の場合 &gt; <b>は、Percentile_Inc</b> を返#NUM! が返されます。 </para>
          <para>k が 1/(n - 1)<b></b>の倍数ではない場合、Percentile_Inc補間して、k 番目のパーセント値で値を決定します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank">
      <MemberSignature Language="C#" Value="public double PercentRank (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16713)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">x: ランクを調べる値を指定します。</param>
        <param name="Arg3">有効桁数: 省略可能な引数で、計算結果として返されるパーセントの有効桁数を指定します。 省略すると <b>、PercentRank</b> は 3 桁の数字 (0.xxx) を使用します。</param>
        <summary>データ セット内の値のランクを、データ セットに対するパーセントの値で返します。 この関数は、データ セット内で値の相対的な位置を計算するために利用します。 たとえば <b>、PercentRank</b> を使用して、テストのすべてのスコアの中で適性テスト スコアの立ち位置を評価できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" /> 参照してください。</para>
          <para>配列が空の場合 <b>、PercentRank は</b> 値を返#NUM! が返されます。 </para>
          <para>有意性 &lt; 1 の場合 <b>、PercentRank は</b> 値を#NUM! が返されます。 </para>
          <para>x が配列の値の 1 つと一致しない場合 <b>、PercentRank は</b> 補間して正しいパーセンテージ ランクを返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Exc">
      <MemberSignature Language="C#" Value="public double PercentRank_Exc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Exc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Exc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16887)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">x: ランクを調べる値を指定します。</param>
        <param name="Arg3">有効桁数: 計算結果として返されるパーセントの有効桁数を指定します。 省略した <b>場合、PercentRank_Exc</b> は 3 桁の数字 (0.xxx) を使用します。</param>
        <summary>データ セット内の値のランクを、データ セットに対するパーセント (0 ～ 1、0 と 1 は除く) の値で返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合 <b>、PercentRank_Exc</b> を返#NUM! が返されます。 </para>
          <para>有意性 &lt; 1 の場合 <b>、PercentRank_Exc</b> は値を#NUM! が返されます。 </para>
          <para>x が配列の値の 1 つ<b></b>と一致しない場合、PercentRank_Excを補間して正しいパーセンテージ ランクを返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Inc">
      <MemberSignature Language="C#" Value="public double PercentRank_Inc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Inc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Inc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16888)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">x: ランクを調べる値を指定します。</param>
        <param name="Arg3">有効桁数: 省略可能な引数で、計算結果として返されるパーセントの有効桁数を指定します。 省略した <b>場合、PercentRank_Inc</b> は 3 桁の数字 (0.xxx) を使用します。</param>
        <summary>データ セット内の値のランクを、データ セットに対するパーセント (0 ～ 1、0 と 1 は除く) の値で返します。 この関数は、データ セット内で値の相対的な位置を計算するために利用します。 たとえば、PercentRank_Incを使用 <b>して、テストのすべての</b> スコアの中の適性テスト スコアの順位を評価できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合 <b>、PercentRank_Inc</b> を返#NUM! が返されます。 </para>
          <para>有意性 &lt; 1 の場合 <b>、PercentRank_Inc</b> 値を#NUM! が返されます。 </para>
          <para>x が配列の値の 1 つ<b></b>と一致しない場合、PercentRank_Incを補間して正しいパーセンテージ ランクを返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permut">
      <MemberSignature Language="C#" Value="public double Permut (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permut([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permut(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permut (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permut(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16683)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">標本数: 対象の総数を整数で指定します。</param>
        <param name="Arg2">抜き取り数: 順列計算のために選択する対象の個数を整数で指定します。</param>
        <summary>標本数個から抜き取り数個を選択する場合の順列を返します。順列とは、順序に着目して選択した対象や事象の組み合わせ数を計算したもので、順序に関係なく計算される組み合わせとは異なります。PERMUT 関数は宝くじなどの当選確率を計算するために利用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>数値または数値number_chosen場合 <b>、Permut</b> は数値を返#VALUE! が返されます。 </para>
          <para>数値が 0 ≤の場合、または &lt; 0 の場合 <b>number_chosen、Permut</b> は値を返#NUM。 が返されます。 </para>
          <para>数値が &lt; <b>number_chosen、Permut は</b> 値を#NUM! が返されます。 </para>
          <para>順列は、次の演算式で表されます。 </para>
          <para>図 1: permutations の数の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permutationa">
      <MemberSignature Language="C#" Value="public double Permutationa (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permutationa([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permutationa(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permutationa (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permutationa(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16951)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">すべてのオブジェクトの数。</param>
        <param name="Arg2">各順列のオブジェクトの数。</param>
        <summary>すべてのオブジェクトから指定された数のオブジェクト (繰り返しを含む) を選択する場合の順列の数を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phi">
      <MemberSignature Language="C#" Value="public double Phi (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Phi([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phi(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phi (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Phi(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16962)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">標準正規分布の密度を求める数値。</param>
        <summary>標準正規分布の密度関数の値を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public string Phonetic (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Phonetic([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phonetic(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phonetic (Arg1 As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Phonetic(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16744)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: ふりがなの文字列を含む 1 つまたは複数のセル参照を指定します。</param>
        <summary>ふりがなの文字列を抽出します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル範囲を参照している場合は、セル範囲の左上隅に指定されているふりがなの文字列が返されます。 </para>
          <para>隣接しないセル範囲を参照している場合は、#N/A エラー値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public double Pi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pi() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Function Pi () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pi();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16403)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>円周率πの近似値である数値 3.14159265358979 を返します。この数値の精度は 15 桁です。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public double Pmt (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pmt(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16443)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: ローンの利率を指定します。</param>
        <param name="Arg2">期間: ローン期間全体での支払回数の合計を指定します。</param>
        <param name="Arg3">現在価値: ローンの現在価値、つまり、将来行われる一連の支払いを現時点で一括払いした場合の合計金額、または元金を指定します。</param>
        <param name="Arg4">将来価値: 将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 (ゼロ) を指定したと見なされます。たとえば、借入額の将来価値は 0 になります。</param>
        <param name="Arg5">支払期日: 支払いが行われる時期を、数値の 0 (ゼロ) または 1 で指定します。支払期日を省略すると、0 を指定したと見なされます。</param>
        <summary>一定利率の支払いが定期的に行われる場合の、ローンの定期支払額を算出します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>Pmt</b>の引数の詳細については、関数を参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> してください。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para><b>Pmt</b>から返される支払いには、元金と利息が含まれますが、税金、予約支払い、またはローンに関連する手数料は含まれていません。 </para>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson">
      <MemberSignature Language="C#" Value="public double Poisson (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16684)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">イベント数: 生じる事象の数を指定します。</param>
        <param name="Arg2">平均: 一定の時間内に起きる事象の平均値を指定します。</param>
        <param name="Arg3">関数形式: 確率分布を計算する関数形式を、論理値で指定します。関数形式に TRUE を指定した場合、生起するランダムな事象の数がゼロからイベント数の範囲であるような累積ポアソン確率が計算されます。FALSE の場合は、生起する事象の数が正確にイベント数となるようなポアソン確率が計算されます。</param>
        <summary>ポアソン確率の値を返します。通常、ポアソン分布は一定の時間内に起きる事象の数を予測するために利用されます。たとえば、ポアソン分布を使って、高速道路の料金所を 1 分間に通過する自動車の台数を予測することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" /> してください。</para>
          <para>イベント数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>x または mean が数値以外の場合 <b>、Poisson は</b> 数値を返#VALUE! が返されます。 </para>
          <para>x &lt; 0 の場合 <b>、Poisson は</b> 次の値を#NUM! が返されます。 </para>
          <para>平均値≤ 0 の場合 <b>、Poisson は</b> 値を#NUM! が返されます。 </para>
          <para>
            <b>Poisson は</b> 次のように計算されます。 </para>
          <para>累積 = <b>false の場合</b>:</para>
          <para>図 1: 累積が false の場合の Calcuation</para>
          <para> </para>
          <para> </para>
          <para>累積 = <b>true の場合</b>:</para>
          <para>図 2: 累積が true の場合の計算</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson_Dist">
      <MemberSignature Language="C#" Value="public double Poisson_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16889)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">イベント数: 生じる事象の数を指定します。</param>
        <param name="Arg2">平均: 一定の時間内に起きる事象の平均値を指定します。</param>
        <param name="Arg3">累積 - 返される確率分布の形式を決定する論理値。 累積が <b>true</b>の場合 <b>、Poisson_Dist</b> は、発生するランダム イベントの数が 0 (ゼロ) から x を含む累積ポアソン確率を返します。false <b>の</b>場合、発生するイベントの数が正確に x になるポアソン確率マス関数を返します。</param>
        <summary>ポアソン確率の値を返します。通常、ポアソン分布は一定の時間内に起きる事象の数を予測するために利用されます。たとえば、ポアソン分布を使って、高速道路の料金所を 1 分間に通過する自動車の台数を予測することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>イベント数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>x または mean が数値以外の場合 <b>、Poisson_Dist</b> を返#VALUE! が返されます。 </para>
          <para>x &lt; 0 の場合 <b>、Poisson_Dist</b> を返#NUM! が返されます。 </para>
          <para>平均値が 0 の <b>≤、Poisson_Dist</b> を返#NUM! が返されます。 </para>
          <para>
            <b>Poisson_Dist</b> は次のように計算されます。 </para>
          <para>累積 = <b>false の場合</b>:</para>
          <para>図 1: 累積が false の場合の Calcuation</para>
          <para> </para>
          <para> </para>
          <para>累積 = <b>true の場合</b>:</para>
          <para>図 2: 累積が true の場合の計算</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Power([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Power(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Power (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Power(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16721)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: べき乗の底を指定します。数値には任意の実数を指定することができます。</param>
        <param name="Arg2">指数: 数値を底とするべき乗の指数を指定します。</param>
        <summary>数値のべき乗を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ppmt">
      <MemberSignature Language="C#" Value="public double Ppmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ppmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ppmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ppmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16552)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。</param>
        <param name="Arg2">期: 期を 1 ～期間の範囲で指定します。</param>
        <param name="Arg3">期間: 投資期間全体での支払い回数の合計を指定します。</param>
        <param name="Arg4">Pv - 現在の値 - 一連の将来の支払いが今価値のある合計金額です。</param>
        <param name="Arg5">将来価値: 将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 (ゼロ) を指定したと見なされます。たとえば、借入額の将来価値は 0 になります。</param>
        <param name="Arg6">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。省略すると、0 を指定したと見なされます。</param>
        <summary>定額の支払いを定期的に行い、利率が一定であると仮定して、投資の指定した期に支払われる元金を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>Ppmt</b>の引数の詳細な説明については、を参照してください <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Price">
      <MemberSignature Language="C#" Value="public double Price (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Price([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Price(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Price (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16825)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">利率: 証券の年利を指定します。</param>
        <param name="Arg4">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg5">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg6">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg7">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>定期的に利息が支払われる証券に対して、額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、頻度、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合、 <b>価格</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>yld &lt; 0 または rate 0 の場合 &lt; <b>、Price</b> は値を返#NUM! が返されます。 </para>
          <para>引き換≤ 0 の場合 <b>、価格</b> は、#NUM! が返されます。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合、 <b>価格</b> は値を#NUM! が返されます。 </para>
          <para>基準 &lt; が 0 の場合、または基準 &gt; 4 の場合は <b>、価格</b> は値を#NUM! が返されます。 </para>
          <para>満期日≥場合 <b>、Price</b> は満期日を#NUM! が返されます。 <b>価格</b> は次のように計算されます。 </para>
          <para>図 1: Price メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>DSC = 決済から次のクーポンの日付まで日数。</para>
          <para>E = 受渡日を含む利払期間の日数。</para>
          <para>N = 受渡日と償還日の間の利息支払回数。</para>
          <para>A = 利払期間の初日から受渡日までの日数</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceDisc">
      <MemberSignature Language="C#" Value="public double PriceDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16820)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">割引率: 証券の割引率を指定します。</param>
        <param name="Arg4">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg5">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>割引証券の額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、PriceDisc</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>割引が 0 ≤の場合、または引き換≤ 0 の場合 <b>、PriceDisc</b> は割引#NUM。 が返されます。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、PriceDisc</b> は値を返#NUM! が返されます。 </para>
          <para>満期日≥場合 <b>、PriceDisc は</b> 満期日を#NUM! が返されます。 </para>
          <para>
            <b>PriceDisc は</b> 次のように計算されます。 </para>
          <para>図 1: PriceDisc メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>B = 年単位での日数。</para>
          <para>B = 利息計算の基礎となる 1 年の日数、DSM = 受渡日から満期日までの日数</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceMat">
      <MemberSignature Language="C#" Value="public double PriceMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16815)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">発行日: 証券の発行日を指定します。日付にはシリアル値が使用されます。</param>
        <param name="Arg4">利率: 発行日の証券の利率を指定します。</param>
        <param name="Arg5">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg6">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>満期日に利息が支払われる証券に対して、額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、発行日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済、満期日、または発行が有効な日付でない場合 <b>、PriceMat</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>rate &lt; 0 または yld 0 の場合 &lt; <b>、PriceMat</b> は値を返#NUM! が返されます。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、PriceMat</b> は値を返#NUM! が返されます。 </para>
          <para>満期日≥場合 <b>、PriceMat</b> は満期日を#NUM! が返されます。 <b>PriceMat</b> は次のように計算されます。 </para>
          <para>図 1: PriceMat メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>B = 年単位での日数。</para>
          <para>B = 利息計算の基礎となる 1 年の日数、DSM = 受渡日から満期日までの日数</para>
          <para>DIM = 発行から満期日まで日数。</para>
          <para>A = 発行から決済まで日数。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Prob">
      <MemberSignature Language="C#" Value="public double Prob (object Arg1, object Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Prob([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Prob(System.Object,System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prob (Arg1 As Object, Arg2 As Object, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16701)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">x 範囲: 確率範囲と対応関係にある数値 x 含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">確率範囲: x 範囲に含まれるそれぞれの数値に対応する確率を指定します。</param>
        <param name="Arg3">下限: 対象となる数値の下限を指定します。</param>
        <param name="Arg4">上限: 省略可能な引数で、対象となる数値の上限を指定します。</param>
        <summary>x 範囲に含まれる値が下限と上限との間に収まる確率を返します。上限を省略すると、x 範囲に含まれる値が下限と等しくなる確率が計算されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>値が 0 のprob_range ≤場合、または 1 の値が 1 のprob_range場合 &gt; <b>、Prob</b> は値を#NUM! が返されます。 </para>
          <para>¹ 1 の値の合計 prob_rangeが ¹ 1 の場合 <b>、Prob</b> は値を#NUM! が返されます。 </para>
          <para>省略upper_limit場合 <b>、Prob は</b> 値と等しい確率をlower_limit。 </para>
          <para>データ x_rangeデータ prob_range含まれている場合 <b>、Prob</b> はエラー値#Nを返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public double Product (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Product([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Product(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Product (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16567)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 積を計算する数値を指定します。引数は 1 ～ 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストの積を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数に指定した数値、論理値、数値を表す文字列は、計算に使用されますが、エラー値、数値に変換できない文字列を引数に指定すると、エラーになります。 </para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。配列あるいはセル範囲に含まれる空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Proper">
      <MemberSignature Language="C#" Value="public string Proper (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Proper([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Proper(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Proper (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Proper(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16498)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列: 文字列、戻り値が文字列となる数式、または文字列を含むセルの参照を指定します。文字列を指定する場合は、半角の二重引用符 (") で囲む必要があります。文字列に英字が含まれていない場合は、文字列がそのまま返されます。</param>
        <summary>文字列中の英単語の先頭文字を大文字に、2 文字目以降の英字を小文字に変換します。文字列中の英字以外の文字は変換されません。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pv">
      <MemberSignature Language="C#" Value="public double Pv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。たとえば、年利 10% の自動車ローンを利用して月払いで返済を行う場合、月単位の金利は 10%/12 = 0.83% となります。この場合、数式には 10%/12、0.83%、または 0.0083 の形式で指定します。</param>
        <param name="Arg2">期間: 投資期間全体での支払回数の合計を指定します。たとえば、4 年ローンを利用して月払いで返済を行う場合、このローンの支払回数は 4*12 = 48 となります。この場合、数式には 48 の形式で指定します。</param>
        <param name="Arg3">定期支払額: 毎回の支払額を指定します。投資期間内に支払額を変更することはできません。通常、定期支払額には元金と利息が含まれますが、その他の手数料や税金は含まれません。たとえば、100 万円を年利 12% の 4 年ローンで借り入れた場合、毎月の返済額は 26,334 円になります。定期支払額は、-26334 のように負の値として指定します。定期支払額を省略した場合は、将来価値を必ず指定してください。</param>
        <param name="Arg4">将来価値: 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 を指定したと見なされます。たとえば、ローンなどの借入金の将来価値は 0 になります。たとえば、18 年間で 500 万円をためることを目標にした場合、この投資の将来価値は 5,000,000 になります。投資期間の金利を予測することにより、毎月の貯蓄額を決めることができます。将来価値を省略した場合は、定期支払額を必ず指定してください。</param>
        <param name="Arg5">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。省略すると、0 を指定したと見なされます。</param>
        <summary>投資の現在価値を返します。現在価値とは、将来行われる一連の支払いを、現時点で一括払いした場合の合計金額をいいます。たとえば、借金をした場合、借入金額の合計が、貸方に対する現在価値となります。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 または省略</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。 </para>
          <para>年金には、次の関数が適用されます。 </para>
          <list type="table">
            <item>
              <term>CUMIPMT</term>
              <description>PPMT</description>
            </item>
            <item>
              <term>CUMPRINC</term>
              <description>PV</description>
            </item>
            <item>
              <term>FV</term>
              <description>RATE</description>
            </item>
            <item>
              <term>FVSCHEDULE</term>
              <description>XIRR</description>
            </item>
            <item>
              <term>IPMT</term>
              <description>XNPV</description>
            </item>
            <item>
              <term>PMT</term>
              <description />
            </item>
          </list>
          <para>年金とは、継続的な期間に行われた一連の一連の一定の現金支払いです。 たとえば、自動車ローンや住宅ローンは年金です。 詳細については、各年金関数の説明を参照してください。 </para>
          <para>投資関数では、すべての引数に関して、定額預金の支払いのような出金は負の数で表し、配当金のような入金は正の数で表します。たとえば、銀行口座の預金 10 万円を引数として使用する場合、預金者側は -100000、銀行側では 100000 と指定します。 </para>
          <para>財務関数の引数は、相互に関連しています。たとえば、利率が 0 でない場合は、次の数式が成立します。 </para>
          <para>図 1: rate が 0 ではない場合の数式</para>
          <para> </para>
          <para> </para>
          <para>rate が 0 の場合は、次の値を使用します。</para>
          <para>(pmt * nper) + pv + fv = 0</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile">
      <MemberSignature Language="C#" Value="public double Quartile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16711)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 対象となる数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">戻り値: 戻り値として返される四分位数の内容を、0 ～ 4 の数値で指定します。</param>
        <summary>配列に含まれるデータから四分位数を抽出します。 四分位数は、市場調査などのデータで、母集団を複数のグループに分割するために利用されます。 たとえば、四分位数 <b>を使用して</b> 、人口の上位 25% の収入を検索できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" /> 参照してください。</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>最小値</description>
            </item>
            <item>
              <term>1</term>
              <description>第 1 四分位数 (25%)</description>
            </item>
            <item>
              <term>2</term>
              <description>第 2 四分位数 = 中位数 (50%)</description>
            </item>
            <item>
              <term>3</term>
              <description>第 3 四分位数 (75%)</description>
            </item>
            <item>
              <term>4 </term>
              <description>最大値</description>
            </item>
          </list>
          <para>配列が空の場合 <b>、Quartile は</b> 値を返#NUM! が返されます。 </para>
          <para>戻り値に小数点以下の値を指定しても切り捨てられます。</para>
          <para>クォート &lt; 0 またはクォート 4 の場合 &gt; <b>、Quartile は</b> 値を#NUM! が返されます。 </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> および quart <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> が 0 (ゼロ)、2、および 4<b></b>に等しい場合は、四分位と同じ値を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Exc">
      <MemberSignature Language="C#" Value="public double Quartile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16890)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 対象となる数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">戻り値: 戻り値として返される四分位数の内容を、0 ～ 4 の数値で指定します。</param>
        <summary>0 ～ 1 (0 と 1 を除く) の百分位の値に基づいて、配列に含まれるデータから四分位数を抽出します。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合 <b>、Quartile_Exc</b> を返#NUM! が返されます。 </para>
          <para>戻り値に小数点以下の値を指定しても切り捨てられます。</para>
          <para>quart が 0 ≤の場合、または quart が 4 の場合≥、Quartile_Exc <b>を返</b> #NUM! が返されます。 </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、、および quart が <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 <b>(ゼロ)、2、</b> および 4 に等しい場合Quartile_Excと同じ値を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Inc">
      <MemberSignature Language="C#" Value="public double Quartile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16891)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 対象となる数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">戻り値: 戻り値として返される四分位数の内容を、0 ～ 4 の数値で指定します。</param>
        <summary>0 ～ 1 (0 と 1 を含む) の百分位の値に基づいて、配列に含まれるデータから四分位数を抽出します。四分位数は、市場調査などのデータで、母集団を複数のグループに分割するために利用されます。たとえば、Quartile_Inc メソッドを使って、母集団の中から所得金額が全体の上位 25% を占めるグループを選び出すことができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合 <b>、Quartile_Inc</b> を返#NUM! が返されます。 </para>
          <para>戻り値に小数点以下の値を指定しても切り捨てられます。</para>
          <para>クォート &lt; 0 またはクォート 4 の場合 &gt; は <b>、Quartile_Inc</b> を返#NUM! が返されます。 </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、、および quart が <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 <b>(ゼロ)、2、</b> および 4 に等しい場合Quartile_Incと同じ値を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quotient">
      <MemberSignature Language="C#" Value="public double Quotient (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quotient([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quotient(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quotient (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quotient(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16801)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">分子: 被除数 (割られる数) を指定します。</param>
        <param name="Arg2">分母: 除数 (割る数) を指定します。</param>
        <summary>除算の商の整数部を返します。商の余り (小数部) を切り捨てる場合に、この関数を使います。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合 <b>、Quotient</b> は引数を返#VALUE! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Radians">
      <MemberSignature Language="C#" Value="public double Radians (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Radians([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Radians(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Radians (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Radians(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16726)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">角度: ラジアンに変換する角度を指定します。</param>
        <summary>度をラジアンに変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandBetween">
      <MemberSignature Language="C#" Value="public double RandBetween (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RandBetween([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RandBetween(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RandBetween (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RandBetween(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16848)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">最小値: 乱数の最小値を整数で指定します。</param>
        <param name="Arg2">最大値: 乱数の最大値を整数で指定します。</param>
        <summary>指定された範囲内の整数の乱数を返します。ワークシートが再計算されるたびに新しい乱数が返されます。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public double Rank (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16600)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 範囲内での順位 (位置) を調べる数値を指定します。</param>
        <param name="Arg2">範囲: 数値を含むセル範囲の参照または名前、または数値配列を指定します。範囲内に含まれている数値だけが計算の対象となり、そこに含まれている文字列、空白セル、論理値は無視されます。また、範囲内にエラー値が含まれていると、そのエラー値が返されます。</param>
        <param name="Arg3">順序: 数値の順位を決めるため、範囲内の数値を並べ替える方法を指定します。</param>
        <summary>順序に従って範囲内の数値を並べ替えたとき、数値が何番目に位置するかを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> 参照してください。</para>
          <para>順序に 0 を指定するか、順序を省略すると、範囲内の数値が ... 3、2、1 のように降順に並べ替えられます。</para>
          <para>順序に 0 以外の数値を指定すると、範囲内の数値が 1、2、3, ... のように昇順で並べ替えられます。</para>
          <para>
            <b>ランクは</b> 、重複する番号に同じランクを与えます。 数値が重複していると、それ以降の数値の順位がずれていきます。 たとえば、昇順に並べられた整数のリストがあり、そのリストに 10 が 2 度現れ、その順位が 5 であるとき、11 の順位は 7 となります (順位が 6 の数値はありません)。</para>
          <para>目的によっては、同順位も考慮した順位定義の使用が必要となる場合もあります。 たとえば、前の使用例では、10 の順位を 5.5 に訂正できた方がよい場合があります。 これは、Rank によって返される値に次の補正係数を追加することで実行 <b>できます</b>。 この補正因子は、順位を降順 (順序に 0 を指定するか、省略した場合) または昇順 (順序に 0 以外の数値を指定した場合) のどちらで計算する場合にも使用できます。</para>
          <para>関連ランクの修正係数=[COUNT(ref) + 1 – RANK(number, ref, 0) – RANK(number, ref, 1)]/2.</para>
          <para>次の例では、RANK(A2,A1:A5,1) は 3 になります。 修正係数は (5 + 1 – 2 – 3)/2 = 0.5 であり、関係を考慮する改訂ランクは 3 + 0.5 = 3.5 です。 ref で 1 回だけ数値が発生した場合、ランクを調整<b></b>してタイに合わせて調整する必要がなされないので、補正係数は 0 になります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Avg">
      <MemberSignature Language="C#" Value="public double Rank_Avg (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Avg([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Avg (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16892)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 範囲内での順位 (位置) を調べる数値を指定します。</param>
        <param name="Arg2">範囲: 数値を含むセル範囲の参照か名前、または数値配列を指定します。範囲内に含まれている数値だけが計算の対象となり、そこに含まれている文字列、空白セル、論理値は無視されます。また、範囲内にエラー値が含まれていると、そのエラー値が返されます。</param>
        <param name="Arg3">順序: 数値の順位を決めるため、範囲内の数値を並べ替える方法を指定します。順序に 0 を指定するか、順序を省略すると、範囲内の数値が ... 3、2、1 のように降順に並べ替えられます。順序に 0 以外の数値を指定すると、範囲内の数値が 1、2、3, ... のように昇順で並べ替えられます。</param>
        <summary>順序に従って範囲内の数値を並べ替えたとき、特定の数値が何番目に位置するかを返します。複数の値が同じ順位の場合、平均順位が返されます。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Eq">
      <MemberSignature Language="C#" Value="public double Rank_Eq (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Eq([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Eq (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16893)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 範囲内での順位 (位置) を調べる数値を指定します。</param>
        <param name="Arg2">範囲: 数値を含むセル範囲の参照か名前、または数値配列を指定します。範囲内に含まれている数値だけが計算の対象となり、そこに含まれている文字列、空白セル、論理値は無視されます。また、範囲内にエラー値が含まれていると、そのエラー値が返されます。</param>
        <param name="Arg3">順序: 数値の順位を決めるため、範囲内の数値を並べ替える方法を指定します。</param>
        <summary>順序に従って範囲内の数値を並べ替えたとき、数値が何番目に位置するかを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>順序に 0 を指定するか、順序を省略すると、範囲内の数値が ... 3、2、1 のように降順に並べ替えられます。</para>
          <para>順序に 0 以外の数値を指定すると、範囲内の数値が 1、2、3, ... のように昇順で並べ替えられます。</para>
          <para>
            <b>Rank_Eqは</b> 、重複する番号に同じランクを与えます。 数値が重複していると、それ以降の数値の順位がずれていきます。 たとえば、昇順に並べられた整数のリストがあり、そのリストに 10 が 2 度現れ、その順位が 5 であるとき、11 の順位は 7 となります (順位が 6 の数値はありません)。</para>
          <para>いくつかの目的で、関係を考慮に入れているランクの定義を使用する場合があります。 前の例では、番号 10 に対して 5.5 のランクを変更する必要があります。 これを行うには、次の補正係数を、ユーザーが返す値に<b>Rank_Eq。</b> この補正因子は、順位を降順 (順序に 0 を指定するか、省略した場合) または昇順 (順序に 0 以外の数値を指定した場合) のどちらで計算する場合にも使用できます。</para>
          <para>関連ランクの修正係数=[COUNT(ref) + 1 – RANK_EQ(number, ref, 0) – RANK_EQ(number, ref, 1)]/2.次の例では、RANK_EQ(A2,A1:A5,1) は 3 です。 修正係数は (5 + 1 – 2 – 3)/2 = 0.5 であり、関係を考慮する改訂ランクは 3 + 0.5 = 3.5 です。 数値が ref で 1 回だけ発生する場合、調整係数<b></b>は 0 になります。これは、Rank_Eq調整する必要がなされないのでです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public double Rate (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rate([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rate(System.Double,System.Double,System.Double,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16444)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">期間: 投資期間全体での支払い回数の合計を指定します。</param>
        <param name="Arg2">定期支払額: 毎回の支払額を指定します。投資期間内に支払額を変更することはできません。通常、定期支払額には元金と利息が含まれますが、その他の手数料や税金は含まれません。定期支払額を省略した場合は、必ず将来価値を指定してください。</param>
        <param name="Arg3">Pv - 現在の値 - 一連の将来の支払いが今価値のある合計金額です。</param>
        <param name="Arg4">将来価値: 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 を指定したと見なされます。たとえば、ローンなどの借入金の将来価値は 0 になります。</param>
        <param name="Arg5">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。省略すると、0 を指定したと見なされます。</param>
        <param name="Arg6">推定値: 利率がおよそどれくらいになるかを推定した値を指定します。</param>
        <summary>投資の利率を返します。Rate メソッドの計算には、反復計算の手法が使用されるため、適切な解が見つからないか、複数の解が同時に見つかることになります。反復計算を 20 回実行した時点で、計算結果の収束値が 0.0000001 以下にならない場合は、エラー値 #NUM! が返されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数 nper、pmt、pv、fv、および type の完全な説明については、を参照してください <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> 。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>推定値を省略すると、10% が計算に使用されます。</para>
          <para>Rate <b>が収束</b> しない場合は、推測のために異なる値を試してください。 <b>推測値</b> が 0 ~ 1 の場合、レートは通常収束します。</para>
          <para>推定値と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、推定値には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、推定値に 12 (%)、期間に 4 (年) を指定します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Received">
      <MemberSignature Language="C#" Value="public double Received (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Received([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Received(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Received (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16818)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">投資額: 証券への投資額を指定します。</param>
        <param name="Arg4">割引率: 証券の割引率を指定します。</param>
        <param name="Arg5">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>全額投資された証券に対して、満期日に支払われる金額を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、Received</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>投資額≤ 0 の場合、または割引が 0 の≤場合 <b>、Received</b> は 0 を返#NUM。 が返されます。 </para>
          <para>基準 &lt; が 0 の場合、または基準 &gt; 4 の場合は <b>、Received</b> は値を返#NUM! が返されます。 </para>
          <para>満期日≥場合、Received は満期日を返#NUM! が返されます。 <b>受信</b> は次のように計算されます。 </para>
          <para>図 1: Received メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>B = 年単位での日数。</para>
          <para>DIM = 発行から満期日まで日数。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Replace([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">置き換えを行う文字列を指定します。</param>
        <param name="Arg2">で置き換える <paramref name="Arg1" /> 文字の位置 <paramref name="Arg4" /> です。</param>
        <param name="Arg3">メソッドで置き換 <paramref name="Arg1" /> える文字数 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> を指定します <paramref name="Arg4" /> 。</param>
        <param name="Arg4">で文字を置き換えるテキスト <paramref name="Arg1" /> 。</param>
        <summary>指定した文字の数に従って、テキスト文字列の一部を別のテキスト文字列に置き換えます。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceB">
      <MemberSignature Language="C#" Value="public string ReplaceB (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReplaceB([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceB (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReplaceB(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16591)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列: 中の文字を置き換える対象テキストを指定します。</param>
        <param name="Arg2">開始位置: 置換文字列と置き換える先頭文字の位置 (文字番号) を数値で指定します。文字列の先頭文字の位置が 1 になります。</param>
        <param name="Arg3">文字数: 置換文字列と置き換える文字列の文字数を指定します。</param>
        <param name="Arg4">置換文字列: 文字列の一部と置き換える文字列を指定します。</param>
        <summary>ReplaceB メソッドは、文字列中の指定されたバイト数の文字を別の文字に置き換えます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 1 バイト文字セット (SBCS) を使用する言語で使用することを目的としていますが <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <b>、ReplaceB</b> は 2 バイト文字セット (DBCS) を使用する言語での使用を目的としています。 コンピューターの既定の言語の設定に応じて、戻り値は次のようになります。</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> 既定の言語設定に関係なく、1 バイトまたは 2 バイトの各文字は常に 1 としてカウントされます。 </para>
          <para>
            <b>ReplaceB</b> は、DBCS をサポートする言語の編集を有効にし、既定の言語として設定すると、各 2 バイト文字を 2 としてカウントします。 それ以外の場合 <b>、ReplaceB</b> は各文字を 1 としてカウントします。 </para>
          <para>DBCS をサポートする言語には、日本語、簡体字中国語、繁体字中国語、および韓国語があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rept">
      <MemberSignature Language="C#" Value="public string Rept (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Rept([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rept(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rept (Arg1 As String, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Rept(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16414)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列: 繰り返す文字列を指定します。</param>
        <param name="Arg2">繰り返し回数: 文字列を繰り返す回数を、正の数値で指定します。</param>
        <summary>文字列を指定された回数だけ繰り返して表示します。このメソッドを使用して、セル幅全体に文字列を表示することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>値number_times 0 (ゼロ) の場合 <b>、Rept は</b> "" (空のテキスト) を返します。 </para>
          <para>繰り返し回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>Rept 関数の <b>結果は</b> 、32,767 文字を超えることはできません。または <b>Rept</b> が 32,767 文字を超#VALUE! </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Roman">
      <MemberSignature Language="C#" Value="public string Roman (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Roman([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Roman(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Roman (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16738)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換するアラビア数字を指定します。</param>
        <param name="Arg2">書式: ローマ数字の書式を数値で指定します。0 を指定すると、古典的な書式でローマ数字が表示されます。書式の値が大きくなるほど、ローマ数字は簡便な形式で表示されます。</param>
        <summary>アラビア数字をテキストとしてローマ字に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 または省略</term>
              <description>正式</description>
            </item>
            <item>
              <term>1</term>
              <description>より簡潔に。</description>
            </item>
            <item>
              <term>2</term>
              <description>より簡潔に。</description>
            </item>
            <item>
              <term>3</term>
              <description>より簡潔に。</description>
            </item>
            <item>
              <term>4 </term>
              <description>略式</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>クラシック</description>
            </item>
            <item>
              <term>
                <b>false</b>
              </term>
              <description>略式</description>
            </item>
          </list>
          <para>数値に負の値を指定すると、エラー値 #VALUE! が返されます。</para>
          <para>数値に 3999 より大きい値を指定すると、エラー値 #VALUE! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public double Round (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Round([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Round (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Round(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16411)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 四捨五入の対象となる数値を指定します。</param>
        <param name="Arg2">桁数: 数値を四捨五入した結果の桁数を指定します。</param>
        <summary>数値を四捨五入して指定された桁数にします。</summary>
        <returns>To be added.</returns>
        <remarks><para>桁数に正の数を指定すると、数値は小数点の右側 (小数点以下) で四捨五入され、小数点以下の桁数が桁数に等しくなります。 </para>
          <para>桁数に 0 を指定すると、数値は最も近い整数として四捨五入されます。 </para>
          <para>桁数に負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に四捨五入されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtDown">
      <MemberSignature Language="C#" Value="public double RoundBahtDown (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtDown([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtDown(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtDown (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtDown(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16760)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のために予約されています。 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtUp">
      <MemberSignature Language="C#" Value="public double RoundBahtUp (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtUp([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtUp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtUp (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtUp(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16761)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のために予約されています。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDown">
      <MemberSignature Language="C#" Value="public double RoundDown (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundDown([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundDown(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundDown (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundDown(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16597)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 切り捨ての対象となる実数値を指定します。</param>
        <param name="Arg2">桁数: 数値を切り上げた結果の桁数を指定します。</param>
        <summary>数値を指定された桁数で切り捨てます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundDown</b> は、数値を常に丸め込 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> む以外は、次のように動作します。 </para>
          <para>桁数に正の数を指定すると、数値は小数点の右 (小数点以下) の指定した桁で切り捨てられます。</para>
          <para>桁数に 0 を指定すると、数値は最も近い整数に切り捨てられます。</para>
          <para>桁数に負の数を指定すると、数値は小数点の左 (整数部分) の指定した桁 (1 の位を 0 とする) に切り捨てられます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundUp">
      <MemberSignature Language="C#" Value="public double RoundUp (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundUp([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundUp(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundUp (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundUp(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16596)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 切り上げの対象となる実数値を指定します。</param>
        <param name="Arg2">桁数: 数値を切り上げた結果の桁数を指定します。</param>
        <summary>数値を指定された桁数に切り上げます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundUp</b> は、常に数値を切り上げ <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> ない限り、同様に動作します。 </para>
          <para>桁数に正の数を指定すると、数値は小数点の右 (小数点以下) の指定した桁に切り上げられます。</para>
          <para>桁数に 0 を指定すると、数値は最も近い整数に切り上げられます。</para>
          <para>桁数に負の数を指定すると、数値は小数点の左 (整数部分) の指定した桁 (1 の位を 0 とする) に切り上げられます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rri">
      <MemberSignature Language="C#" Value="public double Rri (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rri([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rri(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rri (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Rri(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16963)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">投資の期間。</param>
        <param name="Arg2">投資の現在価値。</param>
        <param name="Arg3">投資の将来価値。</param>
        <summary>投資の成長に対する等価利率を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RSq">
      <MemberSignature Language="C#" Value="public double RSq (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RSq([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RSq(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSq (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RSq(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16697)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 直線回帰のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">既知の x: 直線回帰のデータを含む配列またはセル範囲を指定します。</param>
        <summary>既知の y と既知の x を通過する回帰直線を対象に、r2 の値を返します。 詳細については、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />を参照してください。 r2 の値を計算することにより、x の分散に起因する y の分散の比率を解釈することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ known_yと known_xが空の場合、またはデータ ポイントの数が異なる場合 <b>、RSq</b> は #N/A エラー値を返します。 </para>
          <para>データ known_yデータ ポイントknown_x 1 つのみ含まれている場合 <b>、RSq</b> はデータ #DIV/0 を返します。 が返されます。 </para>
          <para>ピアソンの積率相関係数 r を表す方程式は次のとおりです。 </para>
          <para>図 1: Pearson 製品モーメント相関係数</para>
          <para> </para>
          <para> </para>
          <para>ここで、x と y は、AVERAGE(known_x) と AVERAGE(known_y's) を意味します。</para>
          <para>
            <b>RSq は</b> 、この相関係数の 2 乗である r2 を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RTD">
      <MemberSignature Language="C#" Value="public object RTD (object progID, object server, object topic1, object topic2, object topic3, object topic4, object topic5, object topic6, object topic7, object topic8, object topic9, object topic10, object topic11, object topic12, object topic13, object topic14, object topic15, object topic16, object topic17, object topic18, object topic19, object topic20, object topic21, object topic22, object topic23, object topic24, object topic25, object topic26, object topic27, object topic28);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RTD([in]object progID, [in]object server, [in]object topic1, [in]object topic2, [in]object topic3, [in]object topic4, [in]object topic5, [in]object topic6, [in]object topic7, [in]object topic8, [in]object topic9, [in]object topic10, [in]object topic11, [in]object topic12, [in]object topic13, [in]object topic14, [in]object topic15, [in]object topic16, [in]object topic17, [in]object topic18, [in]object topic19, [in]object topic20, [in]object topic21, [in]object topic22, [in]object topic23, [in]object topic24, [in]object topic25, [in]object topic26, [in]object topic27, [in]object topic28) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RTD(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTD (progID As Object, server As Object, topic1 As Object, Optional topic2 As Object, Optional topic3 As Object, Optional topic4 As Object, Optional topic5 As Object, Optional topic6 As Object, Optional topic7 As Object, Optional topic8 As Object, Optional topic9 As Object, Optional topic10 As Object, Optional topic11 As Object, Optional topic12 As Object, Optional topic13 As Object, Optional topic14 As Object, Optional topic15 As Object, Optional topic16 As Object, Optional topic17 As Object, Optional topic18 As Object, Optional topic19 As Object, Optional topic20 As Object, Optional topic21 As Object, Optional topic22 As Object, Optional topic23 As Object, Optional topic24 As Object, Optional topic25 As Object, Optional topic26 As Object, Optional topic27 As Object, Optional topic28 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16763)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.Object" />
        <Parameter Name="server" Type="System.Object" />
        <Parameter Name="topic1" Type="System.Object" />
        <Parameter Name="topic2" Type="System.Object" />
        <Parameter Name="topic3" Type="System.Object" />
        <Parameter Name="topic4" Type="System.Object" />
        <Parameter Name="topic5" Type="System.Object" />
        <Parameter Name="topic6" Type="System.Object" />
        <Parameter Name="topic7" Type="System.Object" />
        <Parameter Name="topic8" Type="System.Object" />
        <Parameter Name="topic9" Type="System.Object" />
        <Parameter Name="topic10" Type="System.Object" />
        <Parameter Name="topic11" Type="System.Object" />
        <Parameter Name="topic12" Type="System.Object" />
        <Parameter Name="topic13" Type="System.Object" />
        <Parameter Name="topic14" Type="System.Object" />
        <Parameter Name="topic15" Type="System.Object" />
        <Parameter Name="topic16" Type="System.Object" />
        <Parameter Name="topic17" Type="System.Object" />
        <Parameter Name="topic18" Type="System.Object" />
        <Parameter Name="topic19" Type="System.Object" />
        <Parameter Name="topic20" Type="System.Object" />
        <Parameter Name="topic21" Type="System.Object" />
        <Parameter Name="topic22" Type="System.Object" />
        <Parameter Name="topic23" Type="System.Object" />
        <Parameter Name="topic24" Type="System.Object" />
        <Parameter Name="topic25" Type="System.Object" />
        <Parameter Name="topic26" Type="System.Object" />
        <Parameter Name="topic27" Type="System.Object" />
        <Parameter Name="topic28" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="progID">リアルタイム サーバーのプログラム ID を表す文字列を指定します。</param>
        <param name="server">サーバー名 <b>、Null 文字列</b> 、 <b>または vbNullString 定数を指定</b> します。</param>
        <param name="topic1"><paramref name="topic1" /> – <paramref name="topic28" /> トピック <b>を</b> 表す文字列。</param>
        <param name="topic2">To be added.</param>
        <param name="topic3">To be added.</param>
        <param name="topic4">To be added.</param>
        <param name="topic5">To be added.</param>
        <param name="topic6">To be added.</param>
        <param name="topic7">To be added.</param>
        <param name="topic8">To be added.</param>
        <param name="topic9">To be added.</param>
        <param name="topic10">To be added.</param>
        <param name="topic11">To be added.</param>
        <param name="topic12">To be added.</param>
        <param name="topic13">To be added.</param>
        <param name="topic14">To be added.</param>
        <param name="topic15">To be added.</param>
        <param name="topic16">To be added.</param>
        <param name="topic17">To be added.</param>
        <param name="topic18">To be added.</param>
        <param name="topic19">To be added.</param>
        <param name="topic20">To be added.</param>
        <param name="topic21">To be added.</param>
        <param name="topic22">To be added.</param>
        <param name="topic23">To be added.</param>
        <param name="topic24">To be added.</param>
        <param name="topic25">To be added.</param>
        <param name="topic26">To be added.</param>
        <param name="topic27">To be added.</param>
        <param name="topic28">To be added.</param>
        <summary>ソースに接続してリアルタイム データを取得します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public double Search (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Search([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Search (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検索文字列: 検索する文字列を指定します。</param>
        <param name="Arg2">対象: 検索文字列を含む文字列を指定します。</param>
        <param name="Arg3">開始位置: 検索を開始する位置を指定します。</param>
        <summary><b>2</b> 番目のテキスト文字列内の 1 つのテキスト文字列を検索して検索し、2 番目のテキスト文字列の最初の文字から最初のテキスト文字列の開始位置の番号 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: <b>検索</b> は、1 バイト文字セット (SBCS) を使用する言語で使用することを目的としていますが、2 バイト文字セット (DBCS) を使用する言語で使用することを目的としています <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> 。 コンピューターの既定の言語設定は、既定の言語設定に関係なく、<b></b>常に 1 バイトまたは 2 バイトの各文字を 1 としてカウントします。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> DBCS をサポートする言語の編集を有効にし、既定の言語として設定すると、各 2 バイト文字が 2 としてカウントされます。 それ以外の場合 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> は、各文字を 1 としてカウントします。</para>
          <para>DBCS をサポートする言語には、日本語、簡体字中国語、繁体字中国語、および韓国語があります。</para>
          <para>検索 <b>を使用</b> して、別のテキスト文字列内の文字またはテキスト文字列の場所を特定し、MID および MIDB または関数を使用してテキスト <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> を変更できます。 </para>
          <para>
            <b>検索</b> では <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> 大文字と小文字が区別されません。 大文字と小文字を区別する検索を実行する場合は、 を使用 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> できます <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> 。 </para>
          <para>You can use the wildcard characters, question mark (?) and asterisk (*), in find_text. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para>検索文字列が見つからないと、エラー値 #VALUE! が返されます。</para>
          <para>開始位置を省略すると、1 を指定したと見なされます。</para>
          <para>開始位置に 0 以下の整数を指定した場合、または開始位置が対象の文字数よりも大きい場合は、エラー値 #VALUE! が返されます。</para>
          <para>指定start_numをスキップするには、次のコマンドを使用します。 例 <b>として検索</b> を使用すると、テキスト文字列 "AYF0093" を使用するとします。YoungMensApparel」 テキスト文字列の説明部分の最初の "Y" の番号を検索するには、start_num を 8 に設定して、テキストのシリアル番号部分が検索されない。 <b>検索</b> は文字 8 で始まり、次find_textの文字を検索し、9 を返します。 <b>検索</b> では、検索の開始から常に文字数が返within_text、1 より大きい場合にスキップstart_numカウントされます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchB">
      <MemberSignature Language="C#" Value="public double SearchB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SearchB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16590)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検索文字列: 検索する文字列を指定します。</param>
        <param name="Arg2">対象: 検索文字列を含む文字列を指定します。</param>
        <param name="Arg3">開始位置: 検索を開始する位置を指定します。</param>
        <summary>Search メソッドおよび SearchB メソッドは、指定された文字列を他の文字列の中で検索し、その文字列が最初に現れる位置を左端から数え、その番号を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: <b>検索</b> は、1 バイト文字セット (SBCS) を使用する言語で使用することを目的としていますが、2 バイト文字セット (DBCS) を使用する言語で使用することを目的としています <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> 。 コンピューターの既定の言語設定は、既定の言語設定に関係なく、<b></b>常に 1 バイトまたは 2 バイトの各文字を 1 としてカウントします。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> DBCS をサポートする言語の編集を有効にし、既定の言語として設定すると、各 2 バイト文字が 2 としてカウントされます。 それ以外の場合 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> は、各文字を 1 としてカウントします。</para>
          <para>DBCS をサポートする言語には、日本語、簡体字中国語、繁体字中国語、および韓国語があります。</para>
          <para>検索 <b>を使用</b> して、別のテキスト文字列内の文字またはテキスト文字列の場所を特定し、MID および MIDB または関数を使用してテキスト <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> を変更できます。 </para>
          <para>
            <b>検索</b> では <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> 大文字と小文字が区別されません。 大文字と小文字を区別する検索を実行する場合は、 を使用 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> できます <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> 。 </para>
          <para>You can use the wildcard characters, question mark (?) and asterisk (*), in find_text. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para>検索文字列が見つからないと、エラー値 #VALUE! が返されます。</para>
          <para>開始位置を省略すると、1 を指定したと見なされます。</para>
          <para>開始位置に 0 以下の整数を指定した場合、または開始位置が対象の文字数よりも大きい場合は、エラー値 #VALUE! が返されます。</para>
          <para>指定start_numをスキップするには、次のコマンドを使用します。 例 <b>として検索</b> を使用すると、テキスト文字列 "AYF0093" を使用するとします。YoungMensApparel」 テキスト文字列の説明部分の最初の "Y" の番号を検索するには、start_num を 8 に設定して、テキストのシリアル番号部分が検索されない。 <b>検索</b> は文字 8 で始まり、次find_textの文字を検索し、9 を返します。 <b>検索</b> では、検索の開始から常に文字数が返within_text、1 より大きい場合にスキップstart_numカウントされます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sec">
      <MemberSignature Language="C#" Value="public double Sec (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sec([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sec(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sec (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sec(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16938)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">セカントを求める角度をラジアンで指定します。</param>
        <summary>角度のセカントを返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sech">
      <MemberSignature Language="C#" Value="public double Sech (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sech([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sech(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sech (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sech(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16939)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線正割を求める角度を指定します。</param>
        <summary>角度の双曲線正割 (ハイパーボリック セカント) を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesSum">
      <MemberSignature Language="C#" Value="public double SeriesSum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SeriesSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SeriesSum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SeriesSum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SeriesSum(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16798)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: べき級数に代入する値を指定します。</param>
        <param name="Arg2">n: x のべき乗の初期値を指定します。</param>
        <param name="Arg3">m: 級数の各項に対する n の増分を指定します。</param>
        <param name="Arg4">係数: x の (n+m) 乗の乗数を指定します。係数に含まれる値の個数でべき級数の項数が決定します。たとえば係数に 3 つの値が含まれている場合、3 項のべき級数が求められます。</param>
        <summary>SERIES(x,n,m,a)= a1xn+a2x(n+m)+a3x(n+2m)+...+aix(n+(i-1)m) に基づく電力系列の合計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合 <b>、SeriesSum は</b> 引数を返#VALUE! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public double Sinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 双曲線正弦を求める実数を指定します。</param>
        <summary>数値の双曲線正弦 (ハイパーボリック サイン) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>双曲線正弦 (ハイパーボリック サイン) は、次の数式で表されます。</para>
          <para>図 1: 双曲線正弦の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public double Skew (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16707)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 計算の対象となる最大 30 個までの数値を指定できます。また、半角のコンマ (,) で区切られた数値の代わりに、配列またはセル範囲を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>分布の歪度を返します。歪度とは、分布の平均値周辺での両側の非対称度を表す値です。正の歪度は対称となる分布が正の方向へ伸びる非対称な側を持つことを示し、負の歪度は対称となる分布が負の方向へ伸びる非対称な側を持つことを示します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>3 つ未満のデータ ポイントがある場合、またはサンプル標準偏差が 0 の場合、 <b>ス</b> キューはデータ #DIV/0 を返します。 が返されます。 </para>
          <para>分布の歪度は次の式で定義されます。 </para>
          <para>図 1: 歪度の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew_p">
      <MemberSignature Language="C#" Value="public double Skew_p (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew_p([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew_p(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew_p (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16960)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg2">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg3">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg4">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg5">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg6">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg7">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg8">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg9">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg10">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg11">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg12">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg13">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg14">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg15">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg16">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg17">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg18">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg19">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg20">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg21">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg22">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg23">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg24">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg25">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg26">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg27">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg28">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg29">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg30">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <summary>母集団に基づく分布の歪度を取得します。歪度とは、分布の平均値周辺での両側の非対称度を表す値です。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sln">
      <MemberSignature Language="C#" Value="public double Sln (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sln([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sln(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sln (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sln(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16526)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">取得価額: 資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">残存価額: 耐用年数が終了した時点での資産の価格を指定します。</param>
        <param name="Arg3">耐用年数: 資産を使用できる年数、つまり償却の対象となる資産の寿命年数を指定します。</param>
        <summary>定額法 (Straight-line Method) を使用して、資産の 1 期あたりの減価償却費を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slope">
      <MemberSignature Language="C#" Value="public double Slope (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Slope([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slope (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Slope(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16699)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 従属変数の値を含む数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">既知の x: 独立変数の値を含む数値配列またはセル範囲を指定します。</param>
        <summary>既知の y と既知の x のデータから回帰直線の傾きを返します。直線の傾きとは、直線上の 2 点の垂直方向の距離を水平方向の距離で除算した値で、回帰直線の変化率に対応します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>データ known_yと known_xが空の場合、またはデータ ポイントの数が異なる場合 <b>、Slope</b> はエラー値#N値を返します。 </para>
          <para>回帰直線の傾きは、次の式で表されます。 </para>
          <para>図 1: 回帰直線の傾きに関する数式</para>
          <para> </para>
          <para> </para>
          <para>Slope および関数で使用される<b></b>基になるアルゴリズムは、関数で使用される基になる <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> アルゴリズムとは異 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> なります。 アルゴリズムの違いにより、データに不確定さや共線性が存在した場合に、異なる結果が得られる場合があります。 たとえば、既知の y 引数のデータ要素が 0 で、既知の x 引数のデータ要素が 1 であったとします。 </para>
          <list type="bullet">
            <item>
              <description>
                <b>傾</b> き <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> を設定し、#DIV/0 を返します。 エラーを返します。 傾 <b>き</b> とアルゴリズムは、1 つの回答のみを検索するように設計されています。この場合、複数の回答 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> が含まれる場合があります。 </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> 値 0 を返します。 アルゴリズムは、同一データに対して妥当な結果を返す目的で設計されています。この場合、少なくとも 1 つの回答 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> が見つかる可能性があります。</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Small">
      <MemberSignature Language="C#" Value="public double Small (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Small([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Small(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Small (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Small(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16710)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 抽出の対象となるデータが入力されているセル範囲または配列を指定します。</param>
        <param name="Arg2">順位: 抽出する値の小さい方から数えた順位を数値で指定します。</param>
        <summary>1 組のデータの中で順位番目に小さなデータを返します。この関数を利用すると、相対的な順位に基づいて、データの中から特定の値を選択することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合 <b>、Small</b> は値を返#NUM! が返されます。 </para>
          <para>k が 0 ≤の場合、または k がデータ ポイントの数を超える場合は、 <b>小</b> さい値を返#NUM。 が返されます。 </para>
          <para>n を範囲に含まれているデータの個数とするとき、SMALL(範囲,1) は対象となるデータの最小値を返します。また、SMALL(範囲,n) は対象となるデータの最大値を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtPi">
      <MemberSignature Language="C#" Value="public double SqrtPi (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SqrtPi([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SqrtPi(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SqrtPi (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SqrtPi(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16800)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: π倍する数値を指定します。</param>
        <summary>(数値 * π) の平方根を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値 &lt; 0 の場合 <b>、SqrtPi</b> は値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Standardize">
      <MemberSignature Language="C#" Value="public double Standardize (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Standardize([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Standardize(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Standardize (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Standardize(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16681)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 標準化変量を計算する数値を指定します。</param>
        <param name="Arg2">平均: 対象となる分布の算術平均 (相加平均) を指定します。</param>
        <param name="Arg3">標準偏差: 対象となる分布の標準偏差を指定します。</param>
        <summary>平均と標準偏差で決定される分布を対象に、標準化変量を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>0 standard_dev ≤場合 <b>、Standardize は</b> 値を返#NUM! が返されます。 </para>
          <para>標準化変量は、次の式で表されます。 </para>
          <para>図 1: 正規化された値の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public double StDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16396)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団の標本に対応する数値を指定します。引数は 1 個から 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、配列または配列への参照を使って指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を標本と見なし、標本に基づいて母集団の標準偏差の推定値を返します。標準偏差とは、統計的な対象となる値がその平均からどれだけ広い範囲に分布しているかを計量したものです。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> してください。</para>
          <para>
            <b>StDev</b> では、引数が母集団のサンプルである必要があります。 データが母集団全体を表す場合は、標準偏差を StDev を使用 <b>して計算します</b>。 </para>
          <para>標準偏差は、非バイアス法または n-1 法を使って計算されます。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>StDev では、</b> 次の数式を使用します。 </para>
          <para>図 1: StDev メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x はサンプル平均 AVERAGE(number1,number2,...)、n はサンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_P">
      <MemberSignature Language="C#" Value="public double StDev_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16895)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団に対応する数値を指定します。引数は 1 個から 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、配列または配列への参照を使って指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を母集団全体であると見なして、母集団の標準偏差を返します。標準偏差とは、統計的な対象となる値が、その平均値からどれだけ広い範囲に分布しているかを計量したものです。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_P</b> 引数は母集団全体と見なされます。 データが母集団のサンプルを表す場合は、データを使用して標準偏差<b>StDev_P。</b> </para>
          <para>大きなサンプル サイズの場合 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> は <b>、StDev_P</b> ほぼ同じ値を返します。 </para>
          <para>標準偏差は、バイアス法または n 法を使って計算します。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>StDev_P</b> は、次の数式を使用します。 </para>
          <para>図 1: メソッドの数式StDev_Pします。</para>
          <para> </para>
          <para> </para>
          <para>ここで、x はサンプル平均 AVERAGE(number1,number2,...)、n はサンプル サイズです。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_S">
      <MemberSignature Language="C#" Value="public double StDev_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16894)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団の標本に対応する数値を指定します。引数は 1 個から 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、配列または配列への参照を使って指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を標本と見なし、標本に基づいて母集団の標準偏差の推定値を返します。標準偏差とは、統計的な対象となる値がその平均からどれだけ広い範囲に分布しているかを計量したものです。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_S</b> 引数は母集団のサンプルと見なされます。 データが母集団全体を表す場合は、 を使用して標準偏差を計算します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 。 </para>
          <para>標準偏差は、非バイアス法または n-1 法を使って計算されます。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>StDev_S</b> 次の数式を使用します。 </para>
          <para>図 1: メソッドの数式StDev_Sします。</para>
          <para> </para>
          <para> </para>
          <para>ここで、x はサンプル平均 AVERAGE(number1,number2,...)、n はサンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public double StDevP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDevP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDevP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDevP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16577)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団の標本に対応する数値を指定します。引数は 1 個から 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、配列または配列への参照を使って指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を母集団全体であると見なして、母集団の標準偏差を返します。標準偏差とは、統計的な対象となる値が、その平均値からどれだけ広い範囲に分布しているかを計量したものです。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> してください。</para>
          <para>
            <b>StDevP では</b> 、引数が母集団全体と見なされます。 データが母集団のサンプルを表す場合は、 を使用して標準偏差を計算します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 。 </para>
          <para>大きなサンプル サイズの場合 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>、StDevP</b> はおよそ等しい値を返します。 </para>
          <para>標準偏差は、バイアス法または n 法を使って計算します。 引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。 </para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。 <b>StDevP は次</b> の数式を使用します。 </para>
          <para>図 1: StDevP メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StEyx">
      <MemberSignature Language="C#" Value="public double StEyx (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StEyx([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StEyx(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StEyx (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double StEyx(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16698)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 従属変数の値を含む数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">既知の x: 独立変数の値を含む数値配列またはセル範囲を指定します。</param>
        <summary>回帰直線の標準誤差を返します。標準誤差とは、個別の x の値に対する y の予測値の誤差の程度を計測するための尺度です。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データknown_yデータ known_xが異なる場合 <b>、StEyx</b> はエラー値 #Nを返します。 </para>
          <para>データ known_yおよび known_xが空の場合、またはデータ ポイントが 3 つ未満の場合 <b>、StEyx</b> は #DIV/0 を返します。 が返されます。 </para>
          <para>y の予測値の標準誤差は次のように定義されます。 </para>
          <para>図 1: 予測 y の標準誤差の数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x と y は AVERAGE(known_x) と AVERAGE(known_y's) を意味し、n はサンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Substitute">
      <MemberSignature Language="C#" Value="public string Substitute (string Arg1, string Arg2, string Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Substitute([in]string Arg1, [in]string Arg2, [in]string Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Substitute(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substitute (Arg1 As String, Arg2 As String, Arg3 As String, Optional Arg4 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列: 置き換える文字を含む文字列を指定します。目的の文字列が入力されたセル参照を指定することもできます。</param>
        <param name="Arg2">検索文字列: 検索する文字列を指定します。</param>
        <param name="Arg3">置換文字列: 検索文字列を検索して置き換える文字列を指定します。</param>
        <param name="Arg4">置換対象: 文字列に含まれるどの検索文字列を置換文字列に置き換えるかを指定します。置換対象を指定した場合、文字列中の置換対象番目の検索文字列だけが置き換えられます。省略した場合は、文字列中のすべての検索文字列が置き換えの対象となります。</param>
        <summary>文字列中の指定された文字をほかの文字に置き換えます。Substitute メソッドは、文字列中の特定の文字を置き換えるときに使用します。文字列中の特定の位置にある文字をほかの文字に置き換えるときは、Replace メソッドを使用します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public double Subtotal (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Subtotal([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Subtotal(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16728)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">このメソッドで使用する集計関数を番号で指定します。</param>
        <param name="Arg2">小計 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> を計算する最初のオブジェクト。</param>
        <param name="Arg3"><paramref name="Arg3" /> – <paramref name="Arg30" /> <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 小計を計算する後続のオブジェクト。</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>集計を作成します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public double Sum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 合計を計算する数値を指定します。引数は 1 ～ 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>セル範囲に含まれる数値をすべて合計します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数として指定した数値、論理値、数値を表す文字列が計算の対象となります。 </para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。 配列やセル範囲に含まれる空白セル、論理値、または文字列はすべて無視されます。 </para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIf">
      <MemberSignature Language="C#" Value="public double SumIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16729)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 評価の対象となるセル範囲を指定します。</param>
        <param name="Arg2">検索条件: 計算の対象となるセルを定義する条件を、数値、式、または文字列で指定します。 たとえば、条件は 32、"32"、"32"、または &gt; "apples" として表されます。</param>
        <param name="Arg3">合計範囲: 範囲内の対応するセルが検索条件を満たす場合に加算される実際のセルを指定します。合計範囲を省略すると、検索条件に一致した場合に、範囲内のセルが検索条件によって評価されて、そのセルの値そのものが加算されます。</param>
        <summary>指定された検索条件に一致するセルの値を合計します。</summary>
        <returns>To be added.</returns>
        <remarks><para>合計範囲に含まれるセルの個数と形状は、必ずしも対応するセルと一致している必要はありません。加算の対象となる実際のセルは、合計範囲の左上のセルを基準にして決定されます。次にその例を示します。</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>You can use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) preceding the character.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIfs">
      <MemberSignature Language="C#" Value="public double SumIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">合計対象範囲: 合計を求める対象範囲を指定します。</param>
        <param name="Arg2">Criteria_range1、criteria_range2.. - 関連付けられた条件を評価する 1 つ以上の範囲。</param>
        <param name="Arg3">Criteria1、criteria2、.. - 追加するセルを定義する数値、式、セル参照、またはテキストの形式の 1 つ以上の条件。 たとえば、条件は &gt; 32、"32"、"32"、"apples"、または B4 として表されます。</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>セル範囲内で、複数の検索条件を満たすセルの値を合計します。</summary>
        <returns>To be added.</returns>
        <remarks><para>合計対象範囲に含まれるセルの中で、そのセルに対応する条件をすべて満たすものだけが計算の対象となります。</para>
          <para>true を含 <b>sum_rangeセルは</b> 1 として評価されます。false を含 <b>sum_rangeセルは</b> 0 (ゼロ) と評価されます。 </para>
          <para>You can use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para>各条件範囲に含まれるセルの個数と形状は、合計対象範囲と必ずしも一致している必要はありません。実際に加算の対象となるセルは、条件範囲の左上のセルを基準にして決定されます。次にその例を示します。</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumProduct">
      <MemberSignature Language="C#" Value="public double SumProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1, 配列 2, 配列 3, … : 計算の対象となる要素を含む配列を指定します。引数は 2 個から 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数として指定した配列の対応する要素間の積をまず計算し、さらにその和を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数となる配列は、行数と列数が等しい配列である必要があります。 指定しない場合は <b>、SumProduct</b> は次の値を#VALUE! が返されます。 </para>
          <para>
            <b>SumProduct</b> は、数値以外の配列エントリをゼロとして扱います。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumSq">
      <MemberSignature Language="C#" Value="public double SumSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16705)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 平方和を計算するための数値を指定します。引数は 1 個から 30 個まで指定できます。また、半角のコンマ (,) で区切られた数値の代わりに、配列またはセル範囲を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数の 2 乗の和 (平方和) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。 </para>
          <para>引数として指定した数値、論理値、数値を表す文字列が計算の対象となります。 </para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。 </para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2MY2">
      <MemberSignature Language="C#" Value="public double SumX2MY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2MY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2MY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2MY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2MY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16688)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 対象となる一方の数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 対象となるもう一方の数値配列またはセル範囲を指定します。</param>
        <summary>2 つの配列で対応する配列要素の平方差を合計します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、あるいは数値を含む範囲を参照する名前またはセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>値array_xとarray_y数が異なる場合 <b>、SumX2MY2</b> はエラー値#Nを返します。 </para>
          <para>平方差の合計は次の式で計算できます。 </para>
          <para>図 1: 二乗の差の合計の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2PY2">
      <MemberSignature Language="C#" Value="public double SumX2PY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2PY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2PY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2PY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2PY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16689)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 対象となる一方の数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 対象となるもう一方の数値配列またはセル範囲を指定します。</param>
        <summary>2 つの配列で対応する配列要素の平方和を合計します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、あるいは数値を含む範囲を参照する名前またはセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>値array_xとarray_y数が異なる場合 <b>、SumX2PY2</b> はエラー値#Nを返します。 </para>
          <para>平方和の合計は次の式で計算できます。 </para>
          <para>図 1: 平方和の合計の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumXMY2">
      <MemberSignature Language="C#" Value="public double SumXMY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumXMY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumXMY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumXMY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumXMY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16687)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 対象となる一方の数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 対象となるもう一方の数値配列またはセル範囲を指定します。</param>
        <summary>2 つの配列で対応する配列要素の差を 2 乗し、さらにその合計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、あるいは数値を含む範囲を参照する名前またはセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>値array_x値array_yが異なる場合 <b>、SumXMY2</b> はエラー値#Nを返します。 </para>
          <para>2 乗した差の合計は次の式で計算できます。 </para>
          <para>図 1: 二乗差の合計の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Syd">
      <MemberSignature Language="C#" Value="public double Syd (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Syd([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Syd(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Syd (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Syd(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16527)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">取得価額: 資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">残存価額: 耐用年数が終了した時点での資産の価格を指定します。</param>
        <param name="Arg3">耐用年数: 資産を使用できる年数、つまり償却の対象となる資産の寿命年数を指定します。</param>
        <param name="Arg4">期間: 減価償却費を求める期を指定します。期間は耐用年数と同じ単位で指定する必要があります。</param>
        <summary>級数法 (Sum-of-Year's Digits Method) を使用して、特定の期における減価償却費を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Syd は</b> 次のように計算されます。</para>
          <para>図 1: Syd メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist">
      <MemberSignature Language="C#" Value="public double T_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16896)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: t 分布を計算する数値を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を整数で指定します。</param>
        <param name="Arg3">累積 - 関数の形式を決定する論理値。 累積的な値 <b>が true の</b>場合 <b>、T_Dist</b> 関数が返されます。false <b>の場合</b>、確率密度関数を返します。</param>
        <summary>スチューデントの t 分布を返します。数値 (x) は t の計算値で、この t に対してパーセンテージが計算されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合は <b>、T_Dist</b> を返#VALUE! が返されます。 </para>
          <para>1 deg_freedom &lt; 場合は <b>、T_Dist</b> を返#NUM! が返されます。 </para>
          <para>x &lt; 0 の<b></b>場合、T_Distを返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_2T">
      <MemberSignature Language="C#" Value="public double T_Dist_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16897)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: t 分布を計算する数値を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を整数で指定します。</param>
        <summary>スチューデントの両側 t 分布を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合は <b>、T_Dist_2T</b> を返#VALUE! が返されます。 </para>
          <para>1 を &lt; <b>deg_freedom、T_Dist_2T</b> を返#NUM! が返されます。 </para>
          <para>x &lt; 0 の場合は <b>、T_Dist_2T</b> を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_RT">
      <MemberSignature Language="C#" Value="public double T_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16898)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: t 分布を計算する数値を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を整数で指定します。</param>
        <summary>右側のスチューデントの t 分布を返します。数値 (x) は t の計算値で、この t に対してパーセンテージが計算されます。t 分布は、比較的少数の標本から成るデータを対象に仮説検定を行うときに使われます。この関数は、t 分布表の代わりに使用することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数が数値以外の場合は <b>、T_Dist_RT</b> を返#VALUE! が返されます。 </para>
          <para>1 の &lt; degrees_freedom、T_Dist_RTを<b></b>返#NUM! が返されます。 </para>
          <para>自由度、尾部に小数点以下の値を指定しても切り捨てられます。</para>
          <para>tails が 1 または 2 以外の値の場合は、T_Dist_RT <b>値を</b> #NUM! が返されます。 </para>
          <para>x &lt; 0 の<b></b>場合、T_Dist_RTを返#NUM! が返されます。 </para>
          <para>tails = 1 <b>の</b> 場合、T_Dist_RTは T_DIST_RT = P( X) として計算されます。ここで、X は t 分布に続くランダム &gt; 変数です。 tails = 2 の場合 <b>T_Dist_RT</b> は、T_DIST_RT = P(|X| &gt; x) = P(X &gt; x または X &lt; -x)。 </para>
          <para>x 0 は使用できないので、x 0 の場合は T_Dist_RT を使用するには &lt; <b></b> &lt; 、T_DIST_RT(-x,df) = 1 – T_DIST_RT(x,df) = P(X &gt; -x) と T_DIST_2T(-x,df) = T_DIST_2T(x df) = P(|X|&gt;x)。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv">
      <MemberSignature Language="C#" Value="public double T_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16899)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: スチューデントの t 分布に従う確率を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を指定します。</param>
        <summary>スチューデントの t 分布の左側逆関数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合 <b>、T_Inv</b> を返#VALUE! が返されます。 </para>
          <para>確率 &lt; 0 または確率 1 の場合は、T_Inv &gt; 値を#NUM! <b></b> が返されます。 </para>
          <para>自由度に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>1 を &lt; deg_freedom、T_Invを<b></b>返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv_2T">
      <MemberSignature Language="C#" Value="public double T_Inv_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16900)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: スチューデントの両側 t 分布に従う確率を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を指定します。</param>
        <summary>スチューデントの t 分布の t 値を、確率の関数と自由度で返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合 <b>、T_Inv_2T</b> を返#VALUE! が返されます。 </para>
          <para>確率 0 または確率 1 の場合は、T_Inv_2T &lt; &gt; を返#NUM! <b></b> が返されます。 自由度に小数点以下の値を指定しても切り捨てられます。 </para>
          <para>1 を &lt; degrees_freedom、T_Inv_2Tを<b></b>返#NUM! が返されます。 </para>
          <para>
            <b>T_Inv_2T</b> p(|) などの値 t を返|X| &gt; t) = 確率 X は、t 分布と P(|X| &gt; t) = P(X &lt; -t または X &gt; t)。 </para>
          <para>1 尾の t 値は、確率を 2 確率に置き換える方法で *返されます。確率が 0.05 で自由度が 10 の場合、2 尾の値は T_INV_2T(0.05,10) で計算され、2.28139 が返されます。同じ確率と自由度の 1 尾の値は、1.812462* を返す T_INV_2T(2 0.05,10) で計算できます。 </para>
          <para>
            <b>注</b>: 一部の表では、確率は (1-p) と記述されています。</para>
          <para>確率の値を指定T_Inv_2T<b></b>値 x を求め、T_DIST_RT(x, degrees_freedom, 2) = 確率を求める。 したがって、データの精度 <b>T_Inv_2T</b> の精度に依存します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> 。 <b>T_Inv_2T</b> は反復検索手法を使用します。 100 回反復計算を繰り返しても計算結果が収束しない場合、エラー値 #N/A が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Test">
      <MemberSignature Language="C#" Value="public double T_Test (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Test([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Test (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Test(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16925)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 一方の組のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: もう一方の組のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg3">Tails - 配布の末尾の数を指定します。 tails = 1 <b>の場合</b> 、T_Testは 1 尾の分布を使用します。 tails = 2 <b>の場合</b> 、T_Testは 2 尾の分布を使用します。</param>
        <param name="Arg4">検定の種類: 実行する t 検定の種類を数値で指定します。</param>
        <summary>スチューデントの t 分布に従う確率を返します。T_TEST メソッドを利用すると、2 つの標本が平均値の等しい母集団から取り出されたものであるかどうかを確率的に予測することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列 1 と配列 2 のデータ ポイント数が異なる場合に、 <b></b> = 1 (ペア) を入力すると、T_Testエラー値#N返されます。 </para>
          <para>尾部と検定の種類に小数点以下の値を指定しても切り捨てられます。</para>
          <para>末尾または型が数値以外の場合は、T_Test <b>を返</b> #VALUE! が返されます。 </para>
          <para>tails が 1 または 2 以外の値の場合は <b>、T_Test</b> 値を#NUM! が返されます。 </para>
          <para>
            <b>T_Test</b> 配列 1 と配列 2 のデータを使用して、負以外の t 統計量を計算します。 tails=1 の場合 <b>、T_Test</b> は、配列 1 と配列 2 が同じ平均を持つ母集団からのサンプルであるという前提で、t 統計量の値が大きい確率を返します。 tails=2 が 2 倍の場合に <b>T_Test</b> によって返される値は、tails=1 の場合に返される 2 倍であり、「同じ母集団の意味」の前提の下で t 統計量の絶対値が高くなる確率に対応します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public double Tanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Tanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Tanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Tanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 実数を指定します。</param>
        <summary>数値の双曲線正接 (ハイパーボリック タンジェント) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>双曲線正接は、次の数式で表されます。</para>
          <para>図 1: 双曲線正接の数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillEq">
      <MemberSignature Language="C#" Value="public double TBillEq (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillEq([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillEq(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillEq (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16822)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 財務省証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 財務省証券の満期日、つまり財務省証券の支払期日を指定します。</param>
        <param name="Arg3">ImportantDates は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付をテキストとして入力すると、問題が発生する可能性があります。割引 - 財務省の請求書の割引率。</param>
        <summary>米国財務省短期証券 (TB) の債券換算利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日、満期日に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、TBillEq</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>0 の≤場合 <b>、TBillEq</b> は値を返#NUM! が返されます。 </para>
          <para>決済の満期日、または満期日が決済後 1 年以上である場合 &gt; <b>、TBillEq</b> は満期日を#NUM! が返されます。 </para>
          <para>
            <b>TBillEq</b> は TBILLEQ = (365 x rate)/(360-(rate x DSM)) として計算されます。DSM は、1 年あたり 360 日に基づいて計算される決済と満期日の日数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillPrice">
      <MemberSignature Language="C#" Value="public double TBillPrice (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillPrice([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillPrice(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillPrice (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16823)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 財務省証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 財務省証券の満期日、つまり財務省証券の支払期日を指定します。</param>
        <param name="Arg3">割引率: 財務省証券の割引率を指定します。</param>
        <summary>米国財務省短期証券 (TB) の額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日、満期日に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、TBillPrice</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>割引が 0 ≤場合 <b>、TBillPrice は</b> 値を返#NUM! が返されます。 </para>
          <para>決済の満期日、または満期日が決済後 1 年以上である場合 &gt; <b>、TBillPrice</b> は満期日を#NUM! が返されます。 </para>
          <para>
            <b>TBillPrice は</b> 次のように計算されます。 </para>
          <para>図 1: TBillPrice メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>DSM = 決済日から満期日まで日数 (満期日から 1 暦年を超える満期日を除く)。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillYield">
      <MemberSignature Language="C#" Value="public double TBillYield (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillYield([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillYield(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillYield (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16824)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 財務省証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 財務省証券の満期日、つまり財務省証券の支払期日を指定します。</param>
        <param name="Arg3">現在価値: 額面 $ 100 に対する財務省証券の価格を指定します。</param>
        <summary>米国財務省短期証券 (TB) の利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日、満期日に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合は <b>、TBillYield</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>pr ≤ 0 の場合は <b>、TBillYield</b> は値を#NUM! が返されます。 </para>
          <para>満期日≥、または満期日が決済後 1 年以上である場合 <b>、TBillYield</b> は満期日を#NUM! が返されます。 </para>
          <para>
            <b>TBillYield は</b> 次のように計算されます。 </para>
          <para>図 1: TBillYield メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>DSM = 決済日から満期日まで日数 (満期日から 1 暦年を超える満期日を除く)。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TDist">
      <MemberSignature Language="C#" Value="public double TDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16685)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: t 分布を計算する数値を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を整数で指定します。</param>
        <param name="Arg3">尾部: 片側分布を計算するか両側分布を計算するか、数値で指定します。尾部に 1 を指定すると片側分布の値が計算され、2 を指定すると両側分布の値が計算されます。</param>
        <summary>スチューデントの t 分布のパーセンテージ (確率) を返します。数値 (x) は t の計算値で、この t に対してパーセンテージが計算されます。t 分布は、比較的少数の標本から成るデータを対象に仮説検定を行うときに使われます。この関数は、t 分布表の代わりに使用することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> 、「、 、および <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" /> メソッド」を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" /> 参照してください。</para>
          <para>引数が数値以外の場合 <b>、TDist は</b> 引数を返#VALUE! が返されます。 </para>
          <para>1 degrees_freedom &lt; 場合 <b>、TDist は</b> 値を返#NUM! が返されます。 </para>
          <para>自由度、尾部に小数点以下の値を指定しても切り捨てられます。</para>
          <para>tails が 1 または 2 以外の値の場合 <b>、TDist</b> は値を#NUM! が返されます。 </para>
          <para>x &lt; 0 の場合 <b>、TDist は</b> 次の値を#NUM! が返されます。 </para>
          <para>tails = 1 の場合 <b>、TDist は TDIST</b> = P( X x) として計算され、X は t 分布に続く &gt; ランダム変数です。 tails = 2 の場合 <b>、TDist</b> は TDIST = P(|X| &gt; x) = P(X &gt; x または X &lt; -x)。 </para>
          <para>x 0 は使用できないので、x 0 の場合は &lt; <b>TDist</b> を使用するには &lt; 、TDIST(-x,df,1) = 1 – TDIST(x,df,1) = &gt; P(X-x,df,2) = TDIST(-x,df,2) = P(| |X| &gt; x)。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text (object Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Text([in]object Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Text(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Text (Arg1 As Object, Arg2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Text(System::Object ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値、戻り値が数値となる数式、または数値を含むセルの参照を指定します。</param>
        <param name="Arg2">[分類] ボックス ([セルの書式設定] ダイアログ ボックスの [表示形式] タブ) に表示される数値書式を、半角の二重引用符 (") で囲んで指定します。</param>
        <summary>数値を書式設定した文字列に変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDayOfWeek">
      <MemberSignature Language="C#" Value="public string ThaiDayOfWeek (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDayOfWeek([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDayOfWeek(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDayOfWeek (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDayOfWeek(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16753)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のために予約されています。 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDigit">
      <MemberSignature Language="C#" Value="public string ThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDigit (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16754)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のために予約されています。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiMonthOfYear">
      <MemberSignature Language="C#" Value="public string ThaiMonthOfYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiMonthOfYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiMonthOfYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiMonthOfYear (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiMonthOfYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16755)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のために予約されています。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumSound">
      <MemberSignature Language="C#" Value="public string ThaiNumSound (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumSound([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumSound(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumSound (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumSound(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16756)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のために予約されています。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumString">
      <MemberSignature Language="C#" Value="public string ThaiNumString (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumString([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumString (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumString(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16757)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のために予約されています。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiStringLength">
      <MemberSignature Language="C#" Value="public double ThaiStringLength (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiStringLength([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiStringLength(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiStringLength (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiStringLength(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16758)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のために予約されています。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiYear">
      <MemberSignature Language="C#" Value="public double ThaiYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiYear (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16762)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のために予約されています。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TInv">
      <MemberSignature Language="C#" Value="public double TInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: スチューデントの両側 t 分布に従う確率を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を指定します。</param>
        <summary>スチューデントの t 分布の t 値を、確率の関数と自由度で返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、and メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" /> 参照してください。</para>
          <para>いずれかの引数が数値以外の場合 <b>、TInv</b> は引数を返#VALUE! が返されます。 </para>
          <para>確率 &lt; 0 または確率 1 の場合 &gt; <b>、TInv</b> は確率を返#NUM! が返されます。 </para>
          <para>自由度に小数点以下の値を指定しても切り捨てられます。</para>
          <para>1 degrees_freedom &lt; 場合 <b>、TInv は</b> 値を返#NUM! が返されます。 </para>
          <para>
            <b>TInv は</b> 、P(|X| &gt; t) = 確率 X は、t 分布と P(|X| &gt; t) = P(X &lt; -t または X &gt; t)。 </para>
          <para>1 尾の t 値は、確率を 2 確率に置き換える方法で *返されます。確率が 0.05 で自由度が 10 の場合、2 尾の値は TINV(0.05,10) で計算され、2.28139 が返されます。同じ* 確率と自由度の 1 尾の値は、TINV(2 0.05,10) を使用して計算できます。これは 1.812462 を返します。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public object Transpose (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Transpose([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Transpose(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transpose (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Transpose(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 行列変換を行うワークシートの配列またはセル範囲を指定します。配列の行列変換を行うと、元の配列の第 1 行が新しい配列の第 1 列になり、元の配列の第 2 行が新しい配列の第 2 列 (以下同様) になります。</param>
        <summary>配列の縦方向と横方向のセル範囲の変換を行います。Transpose メソッドは、配列の列数および行数とそれぞれ同数の行数および列数のセル範囲に、配列数式として入力する必要があります。Transpose メソッドを利用すると、ワークシート上にある配列の縦と横を逆転させることができます。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trend">
      <MemberSignature Language="C#" Value="public object Trend (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Trend([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trend (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16434)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 既にわかっている y の値の系列で、y = mx + b という関係になります。</param>
        <param name="Arg2">既知の x: 既にわかっている x の値の系列で、y = mx + b という関係になります。</param>
        <param name="Arg3">新しい x: Trend メソッドを利用して、対応する y の値を計算する新しい x の値を指定します。</param>
        <param name="Arg4">定数: 定数 b を 0 にするかどうかを論理値で指定します。</param>
        <summary>回帰直線による予測値を返します。R-2 乗値のメソッドを使って、直線を既知の y と既知の x の配列に当てはめます。その直線上で、指定した新しい x の配列に対応する y の値が返されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>既知の y の配列が 1 つの列に入力されている場合、既知の x の各列はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の y の配列が 1 つの行に入力されている場合、既知の x の各行はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の x の配列には、1 つまたは複数の変数の系列を指定することができます。変数の系列が 1 つである場合、既知の y と既知の x は、両者の次元が同じであれば、どのような形の範囲であってもかまいません。変数の系列が複数である場合、既知の y は 1 行または 1 列のセル範囲でなければなりません。</para>
          <para>既知の x を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>新しい x には、既知の x と同様にそれぞれ独立した変数が入力されている 1 つの列 (または 1 つの行) を指定する必要があります。既知の y が 1 つの列に入力されている場合、既知の x と新しい x は同じ列数でなければなりません。また、既知の y が 1 つの行に入力されている場合は、既知の x と新しい x の行数が同じでなければなりません。</para>
          <para>新しい x を省略すると、既知の x と同じ値を指定したと見なされます。</para>
          <para>既知の x と新しい x の両方を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>const が true <b>または省略</b> された場合、b は通常計算されます。 </para>
          <para>const が <b>false の場合</b>、b は 0 (ゼロ) に設定され、m 値は y = mx に調整されます。 </para>
          <para>データに線をMicrosoft Excelする方法については、を参照してください <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> 。 </para>
          <para>多項式 <b>曲線の</b> 適合には、異なる電力に上げられた同じ変数に対して回帰することで、傾向を使用できます。 たとえば、列 A に y の値、列 B に x の値が含まれているとします。 列 C には「x^2」、列 D には「x^3」などのように入力し、列 B ～ D を列 A に対して回帰推定します。 </para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。</para>
          <para>既知の x のような引数に配列定数を指定するときは、半角のコンマ (,) を使って同じ行の値を区切り、半角のセミコロン (;) を使って各行を区切ります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Trim([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列: 余分なスペースを削除する文字列を指定します。</param>
        <summary>文字列に複数のスペースが連続して含まれている場合、単語間のスペースを 1 つずつ残して、不要なスペースをすべて削除します。Trim メソッドは、他のアプリケーションから読み込んだテキストに不要なスペースが含まれているときなどに使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: <b>Trim 関数は</b> 、7 ビットの ASCII スペース文字 (値 32) をテキストからトリミングするように設計されています。 Unicode 文字セットには、非区切りスペース (値 160) という、別の空白文字もあります。 この文字は、HTML エンティティ nbsp として Web ページでよく<b> &amp; 使用されます</b>。 それ自体では <b>、Trim 関数</b> は、この壊れないスペース文字を削除しません。</para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimMean">
      <MemberSignature Language="C#" Value="public double TrimMean (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TrimMean([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TrimMean(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimMean (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TrimMean(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16715)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 対象となるデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">割合: 平均値の計算から排除するデータの割合を小数で指定します。たとえば、全体で 20 個のデータを含む対象に対して割合に 0.2 を指定した場合、20×0.2 = 4 となり上限から 2 個、下限から 2 個の合計 4 個のデータが排除されることになります。</param>
        <summary>データ全体の上限と下限から一定の割合のデータを切り落とし、残りの項の平均値を返します。この関数は、極端な観察データを分析対象から排除する場合に利用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>パーセント &lt; 0 またはパーセント 1 の場合 &gt; <b>、TrimMean</b> は値を#NUM! が返されます。 </para>
          <para>
            <b>TrimMean は</b> 、除外されたデータ ポイントの数を 2 の最も近い倍数に切り上げします。 パーセント = 0.1 の場合、30 データ ポイントの 10% は 3 ポイントに等しくなります。 対称の場合 <b>、TrimMean は</b> データ セットの上下から 1 つの値を除外します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TTest">
      <MemberSignature Language="C#" Value="public double TTest (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TTest([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TTest(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTest (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TTest(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16700)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 一方の組のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: もう一方の組のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg3">尾部: 片側分布を使用するか、または両側分布を使用するかを数値で指定します。尾部に 1 を指定すると片側分布が使用され、2 を指定すると両側分布が使用されます。</param>
        <param name="Arg4">検定の種類: 実行する t 検定の種類を数値で指定します。</param>
        <summary>スチューデントの t 分布に従う確率を返します。TTest メソッドを利用すると、2 つの標本が平均値の等しい母集団から取り出されたものであるかどうかを確率的に予測することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" /> してください。</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>対をなすデータの t 検定</description>
            </item>
            <item>
              <term>2</term>
              <description>等分散の 2 標本を対象とする t 検定</description>
            </item>
            <item>
              <term>3</term>
              <description>非等分散の 2 標本を対象とする t 検定</description>
            </item>
          </list>
          <para>配列 1 と配列 2 のデータ ポイント数が異なって、型が 1 (ペア) の場合 <b>、TTest</b> はエラー値 #Nを返します。 </para>
          <para>尾部と検定の種類に小数点以下の値を指定しても切り捨てられます。</para>
          <para>末尾または型が数値以外の場合 <b>、TTest</b> は数値を返#VALUE! が返されます。 </para>
          <para>tails が 1 または 2 以外の値の場合 <b>、TTest</b> は値を#NUM! が返されます。 </para>
          <para>
            <b>TTest は</b> 、配列 1 と配列 2 のデータを使用して、負以外の t 統計量を計算します。 tails=1 の場合 <b>、TTest</b> は、配列 1 と配列 2 が同じ平均を持つ母集団からのサンプルであるという前提の下で、t 統計量の値が高い確率を返します。 <b>TTest</b>によって返される値は、tails=2 が tails=1 の場合に返される 2 倍であり、「同じ母集団の意味」の前提の下で t 統計量の絶対値が高くなる確率に対応します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Unichar">
      <MemberSignature Language="C#" Value="public string Unichar (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Unichar([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unichar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unichar (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Unichar(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16964)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字を表す Unicode 数値。</param>
        <summary>特定の数値によって参照されている Unicode 文字を取得します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public double Unicode (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Unicode([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unicode (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Unicode(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16965)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Unicode 値を求める文字の種類。</param>
        <summary>テキストの先頭文字に対応した数値 (コード ポイント) を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="USDollar">
      <MemberSignature Language="C#" Value="public string USDollar (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string USDollar([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.USDollar(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function USDollar (Arg1 As Double, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ USDollar(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16588)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値を含むセルの参照または戻り値が数値となる数式を指定します。</param>
        <param name="Arg2">小数点以下の桁数を指定します。 Arg2 が負の場合、数値は小数点の左側に四捨五入されます。 桁数を省略すると、0 を指定したと見なされます。</param>
        <summary>数値を文字列形式に変換し、通貨記号を適用します。このメソッドの名前および適用される記号は、使用する言語の設定によって異なります。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>USDollar メソッド</b>は、数値を通貨形式を使用してテキストに変換し、小数点は指定した場所に四捨五入されます。 使用される形式は $#,##0.00_);($#,##0.00)。</para>
          <para>[セルの書式設定] コマンドを使用して数値を含むセルを書式設定し、メソッドで数値を直接書式設定する場合の主な違いは、結果をテキストに <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> 変換することです。 A number formatted with the Format Cells command is still a number. 数式で書式設定された数値は、テキスト値として入力Excel数値を計算時に数値に変換するために、引き続き <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> 使用できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public double Var (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16430)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団の標本に対応する数値を指定します。引数は 1 ～ 30 個まで指定できます。数値にはセル参照に対する参照を指定してもかまいません。数値として文字列、論理値、空白セルの参照を指定すると、エラーになります。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を正規母集団の標本と見なし、標本に基づいて母集団の分散の推定値 (不偏分散) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var</b> は、引数が母集団のサンプルと見なされます。 データが母集団全体を表す場合は、 を使用して分散を計算します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 。 </para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>Var は</b> 次の数式を使用します。 </para>
          <para>図 1: Var メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x はサンプル平均 AVERAGE(number1,number2,...)、n はサンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_P">
      <MemberSignature Language="C#" Value="public double Var_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16902)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団全体に対応する数値を指定します。引数は 1 ～ 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を母集団全体と見なし、母集団の分散 (標本分散) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_P</b> 引数が母集団全体と見なされます。 データが母集団のサンプルを表す場合は、 を使用して分散を計算します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 。 </para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>次 <b>に示す</b> Var_P式を示します。 </para>
          <para>図 1: メソッドの数式Var_Pします。</para>
          <para> </para>
          <para> </para>
          <para>ここで、x はサンプル平均 AVERAGE(number1,number2,...)、n はサンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_S">
      <MemberSignature Language="C#" Value="public double Var_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16901)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団の標本に対応する数値を指定します。引数は 1 ～ 30 個まで指定できます。数値にはセル参照に対する参照を指定してもかまいません。数値として文字列、論理値、空白セルの参照を指定すると、エラーになります。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を正規母集団の標本と見なし、標本に基づいて母集団の分散の推定値 (不偏分散) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_S</b> 引数は母集団のサンプルと見なされます。 データが母集団全体を表す場合は、 を使用して分散を計算します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 。 </para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>Var_S</b> は、次の数式を使用します。 </para>
          <para>図 1: メソッドの数式Var_Sします。</para>
          <para> </para>
          <para> </para>
          <para>ここで、x はサンプル平均 AVERAGE(number1,number2,...)、n はサンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public double VarP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 VarP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16578)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団全体に対応する数値を指定します。引数は 1 ～ 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を母集団全体と見なし、母集団の分散 (標本分散) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> してください。</para>
          <para>
            <b>VarP</b> は、引数が母集団全体を前提とします。 データが母集団のサンプルを表す場合は、 を使用して分散を計算します <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 。 </para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para><b>VarP の方程式は次</b>の式です。 </para>
          <para>図 1: VarP メソッドの数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x はサンプル平均 AVERAGE(number1,number2,...)、n はサンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Vdb">
      <MemberSignature Language="C#" Value="public double Vdb (double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Vdb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]float64 Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Vdb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Double, Optional Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Double" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">取得価額: 資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">残存価額: 耐用年数が終了した時点での資産の価格を指定します。0 (ゼロ) を指定することもできます。</param>
        <param name="Arg3">耐用年数: 資産を使用できる年数、つまり償却の対象となる資産の寿命年数を指定します。</param>
        <param name="Arg4">開始期: 減価償却費の計算の対象となる最初の期を指定します。開始期は耐用年数と同じ単位で指定してください。</param>
        <param name="Arg5">終了期: 減価償却費の計算の対象となる最後の期を指定します。終了期は耐用年数と同じ単位で指定してください。</param>
        <param name="Arg6">率: 減価償却率を指定します。 率を省略すると、2 を指定したと見なされ、倍額定率法で計算が行われます。 倍額定率法を使用しない場合は、率を指定します。 二重減少残高の方法の説明については、を参照してください <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" /> 。</param>
        <param name="Arg7">切り替えなし: 減価償却費が定率法による計算の結果より大きくなったときに、自動的に定額法に切り替えるかどうかを、論理値で指定します。</param>
        <summary>倍額定率法または指定された方法を使用して、特定の期における資産の減価償却費を返します。VDB は、Variable Declining Balance の略語です。</summary>
        <returns>To be added.</returns>
        <remarks><para>このno_switch <b>true</b>の場合、Microsoft Excel減価償却費が定率計算よりも大きい場合でも、直線減価償却には切り替えらなかっ </para>
          <para>false または<b>no_switch場合、</b>減価償却Excelが定率計算より大きい場合は、直線減価償却に切り替える必要があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VLookup">
      <MemberSignature Language="C#" Value="public object VLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object VLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16486)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検索値: 範囲の左端の列で検索する値を指定します。検索値には、値またはセル参照を指定します。検索値が範囲の左端の列の最小値より小さい場合、エラー値 #N/A が返されます。</param>
        <param name="Arg2">範囲: 2 列以上のデータ列です。セル範囲の参照、またはセル範囲名を指定します。範囲の左端の列の値が、検索値で検索される値です。これらの値は、文字列、数値、論理値のいずれかであることが必要です。英字の大文字と小文字は区別されません。</param>
        <param name="Arg3">列番号: 範囲内で目的のデータが入力されている列を、左端からの列数で指定します。列番号に 1 を指定すると、範囲の左端の列の値が返され、列番号に 2 を指定すると、範囲の左から 2 列目の値が返されます。</param>
        <param name="Arg4">Range_lookup - メソッドが完全一致または近似一致を検索するかどうかを指定 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> する論理値。</param>
        <summary>指定された範囲の 1 列目で特定の値を検索し、その範囲内の別の列の同じ行にある値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>VLookup</b> メソッドの "V" は、縦方向 (vertical) の検索を意味します。 比較値が検索するデータの左側の列にある場合は、メソッドの代わりに <b>VLookup</b> メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> を使用します。</para>
          <para>Col_index_num が 1 未満の場合、<b>VLookup</b> メソッドはエラーを生成します。</para>
          <para>Col_index_num が table_array の列数より大きい場合、<b>VLookup</b> メソッドはエラーを生成します。</para>
          <para>このRange_lookup <b>true</b> または省略すると、完全一致または近似一致が返されます。 完全一致が見つからない場合は、次に最も大きい値が返lookup_valueされます。 </para>
          <para>列の最初の列の値table_array昇順に並べ替える必要があります。それ以外の場合 <b>、VLookup</b> メソッドは正しい値を指定しない可能性があります。</para>
          <para>このRange_lookup <b>false の場合</b><b>、VLookup</b>メソッドは完全一致のみを検索します。 この場合、table_array の最初の列の値を並べ替える必要はありません。 lookup_value と一致する値が table_array の最初の列に複数ある場合は、最初に検索された値が使用されます。 完全に一致する値が見つからない場合は、エラーが生成されます。。</para>
          <para>table_array の最初の列でテキスト値を検索する場合は、table_array の最初の列のデータに先頭スペース、末尾のスペース、直線 ( ' または " ) の不整合な使用、二重引用符 ( ' または ")、または非印刷文字が含まなかっていなか。 このような場合 <b>、VLookup</b> メソッドは正しくない値または予期しない値を与える可能性があります。 値をクリーンアップまたはトリミングする方法については、and メソッド <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" /> を <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" /> 参照してください。 数値や日付型の値を検索する場合は、table_array の最初の列にあるデータがテキスト値として保存されていないことを確認してください。 これらのデータがテキスト値として保存されていると、<b>VLookup</b> によって正しくない値や予期しない値が返されます。 </para>
          <para>false range_lookup <b>テキスト</b> lookup_value場合は、ワイルドカード文字である疑問符 (?) とアスタリスク (*) を使用lookup_value。 ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。 If you want to find an actual question mark or asterisk, type a tilde (~) preceding the character.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WebService">
      <MemberSignature Language="C#" Value="public object WebService (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object WebService([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WebService(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WebService (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ WebService(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16980)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">HTTP GET 要求の宛先の Web サービスの URL。</param>
        <summary>HTTP GET 要求を使用して Web サービスを非同期で呼び出し、応答を返す基本の関数。</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public double Weekday (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weekday([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weekday(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">シリアル値: 検索する日付のシリアル値を指定します。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。日付を文字列として入力した場合、エラーが発生することがあります。</param>
        <param name="Arg2">種類: 戻り値の種類を数値で指定します。</param>
        <summary>日付を表すシリアル値から、その日付に対応する曜日を返します。既定では、戻り値は 1 (日曜) から 7 (土曜) までの範囲の整数となります。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>1 または省略</term>
              <description>1 (日曜) ～ 7 (土曜) の範囲の整数。以前のバージョンの Excel と結果は同じ。</description>
            </item>
            <item>
              <term>2</term>
              <description>1 (月曜) ～ 7 (日曜) の範囲の整数</description>
            </item>
            <item>
              <term>3</term>
              <description>0 (月曜) ～ 6 (日曜) の範囲の整数</description>
            </item>
            <item>
              <term>11</term>
              <description>1 (月曜) ～ 7 (日曜) の範囲の整数</description>
            </item>
            <item>
              <term>12 </term>
              <description>1 (火曜) ～ 7 (月曜) の範囲の整数</description>
            </item>
            <item>
              <term>13</term>
              <description>1 (水曜) ～ 7 (火曜) の範囲の整数</description>
            </item>
            <item>
              <term>14 </term>
              <description>1 (木曜) ～ 7 (水曜) の範囲の整数</description>
            </item>
            <item>
              <term>15</term>
              <description>1 (金曜) ～ 7 (木曜) の範囲の整数</description>
            </item>
            <item>
              <term>16 </term>
              <description>1 (土曜) ～ 7 (金曜) の範囲の整数</description>
            </item>
            <item>
              <term>17 </term>
              <description>1 (日曜) ～ 7 (土曜) の範囲の整数</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WeekNum">
      <MemberSignature Language="C#" Value="public double WeekNum (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WeekNum([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WeekNum(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekNum (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16849)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">シリアル値: 日付を指定します。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。日付を文字列として入力した場合、エラーが発生することがあります。</param>
        <param name="Arg2">週の基準: 週の始まりを何曜日とするかを数値で指定します。既定値は 1 です。</param>
        <summary>日付がその年の第何週目に当たるかを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: <b>WeekNum 関数</b> は、1 月 1 日を含む週を年の最初の週と見なします。 ただし、ヨーロッパ方式では、曜日の大部分 (4 日以上) を含んだ週が、その年の "最初の週" と定義されています。 つまり、1 月の最初の週に 3 日以下の年の間 <b>、WeekNum</b> 関数は、ヨーロッパ標準に従って正しくない週番号を返します。</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>週の始まりを日曜日とします。曜日には順に 1 ? 7 の番号が対応します。</description>
            </item>
            <item>
              <term>2</term>
              <description>週の始まりを月曜日とします。曜日には順に 1 ? 7 の番号が対応します。</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull">
      <MemberSignature Language="C#" Value="public double Weibull (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16686)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: ガンマ分布のパラメーターを指定します。</param>
        <param name="Arg4">関数形式: 計算に使用する関数の形式を、論理値で指定します。関数形式に TRUE を指定すると累積分布関数の値が計算され、FALSE を指定すると確率密度関数の値が計算されます。</param>
        <summary>ワイブル分布の値を返します。この分布は、機械が故障するまでの平均時間のような信頼性の分析に使用されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> してください。</para>
          <para>x、α、または beta が数値以外の場合 <b>、Weibull</b> は数値を返#VALUE! が返されます。 x &lt; 0 の場合 <b>、Weibull は</b> 値を#NUM! が返されます。 </para>
          <para>アルファ値≤ 0 の場合、または beta ≤ 0 の場合 <b>、Weibull</b> は値を#NUM! が返されます。 </para>
          <para>ワイブル累積分布関数は、次の式で定義されます。 </para>
          <para>図 1: Weibull 累積分布の数式</para>
          <para> </para>
          <para> </para>
          <para>ワイブル確率密度関数は、次の式で定義されます。</para>
          <para>図 2: Weibull 確率密度の数式</para>
          <para> </para>
          <para> </para>
          <para>アルファ = 1 の場合 <b>、Weibull は</b> 指数分布を次の値で返します。</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull_Dist">
      <MemberSignature Language="C#" Value="public double Weibull_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16903)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: 分布のパラメーターを指定します。</param>
        <param name="Arg4">関数形式: 計算に使用する関数の形式を、論理値で指定します。関数形式に TRUE を指定すると累積分布関数の値が計算され、FALSE を指定すると確率密度関数の値が計算されます。</param>
        <summary>ワイブル分布の値を返します。この分布は、機械が故障するまでの平均時間のような信頼性の分析に使用されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>x、α、または beta が数値以外の場合は、Weibull_Dist <b>を返</b> #VALUE! が返されます。 </para>
          <para>x &lt; 0 の場合 <b>、Weibull_Dist</b> を返#NUM! が返されます。 </para>
          <para>アルファ値≤ 0 の場合、または beta ≤ 0 の <b>場合Weibull_Distを</b> 返#NUM! が返されます。 </para>
          <para>ワイブル累積分布関数は、次の式で定義されます。 </para>
          <para>図 1: Weibull 累積分布の数式</para>
          <para> </para>
          <para> </para>
          <para>ワイブル確率密度関数は、次の式で定義されます。</para>
          <para>図 2: Weibull 確率密度の数式</para>
          <para> </para>
          <para> </para>
          <para>アルファ = 1 の場合 <b>、次Weibull_Dist</b> 指数分布を返します。</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay">
      <MemberSignature Language="C#" Value="public double WorkDay (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を表す日付を指定します。</param>
        <param name="Arg2">日数: 開始日から起算して、週末や祭日を除く週日の日数を指定します。日数に正の数を指定すると、起算日より後の日付となり、負の数を指定すると、起算日より前の日付となります。</param>
        <param name="Arg3">祭日: 国民の祝日や夏期休暇など、稼動日数の計算から除外する日付のリストを指定します。この引数は省略することができます。日付のリストには、日付を表すシリアル値が入力されているセル範囲、または配列定数を指定できます。</param>
        <summary>開始日から起算して、指定された稼動日数だけ前または後の日付に対応する値を返します。稼動日とは、土曜、日曜、および指定された祭日を除く日のことです。このメソッドを使用すると、納品書の支払日、発送日、作業日数などを計算するときに、週末や祭日を除くことができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>引数が有効な日付でない場合 <b>、WorkDay</b> は引数を返#VALUE! が返されます。 </para>
          <para>日付start_date日が無効な場合 <b>、WorkDay</b> は日付を返#NUM! が返されます。 </para>
          <para>日数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay_Intl">
      <MemberSignature Language="C#" Value="public double WorkDay_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16905)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を指定します。小数点以下は切り捨てられます。</param>
        <param name="Arg2">日数: 開始日から起算した稼働日の日数を指定します。正の数を指定すると、起算日より後の日付を返し、負の数を指定すると、起算日より前の日付を返します。0 (ゼロ) を指定すると、起算日が返されます。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <param name="Arg3">[週末] - 週末の日であり、営業日とは見なされない週の日数を示します。 週末は、週末が発生する時間を指定する週末番号または文字列です。</param>
        <param name="Arg4">祭日: 稼動日数の計算から除外する日付のセットです。このパラメーターは、日付が入力されているセル範囲、または日付を表すシリアル値の配列定数です。祭日の日付またはシリアル値は任意の順序で指定できます。</param>
        <summary>指定された稼働日の日数だけ前または後の日付に対応するシリアル値を返します。ユーザー設定の週末パラメーターを指定できます。週末パラメーターは、週末の曜日と日数を示します。週末および祝日として指定されている日は、稼働日と見なされません。</summary>
        <returns>To be added.</returns>
        <remarks><para>現在start_date基準値の範囲が外されている場合は、WorkDay_Intl <b>を返</b> #NUM! が返されます。 </para>
          <para>休日の日付が現在の日付基準値の範囲を外している場合は <b>、WorkDay_Intlを返</b> #NUM。 が返されます。 </para>
          <para>日start_dateオフセットが無効な日付を返す場合は、WorkDay_Intl <b>を返</b> #NUM。 が返されます。 </para>
          <para>週末の文字列が無効な長さであるか、無効な文字が含まれている場合は、WorkDay_Intl <b>を返</b> #VALUE! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xirr">
      <MemberSignature Language="C#" Value="public double Xirr (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xirr([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xirr(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xirr (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 収支明細表の日付に対応する一連のキャッシュ フローを指定します。最初の支払いは投資の最初に発生する原価や支払いに対応し、省略することができます。最初のキャッシュ フローが原価や支払いの場合、負の値を指定する必要があります。それ以降の支払いは、1 年の日数を 365 日として割り引かれます。値には、正の値と負の値が少なくとも 1 つずつ含まれている必要があります。</param>
        <param name="Arg2">日付: キャッシュ フローの支払いに対応する支払日を指定します。最初の支払日は、収支明細表の先頭に対応します。残りの支払日には、すべてこの日付より後に発生する日付を指定する必要があります。ただし、残りの支払日の指定順序に制限はありません。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。日付を文字列として入力した場合、エラーが発生することがあります。</param>
        <param name="Arg3">推測 - Xirr の結果に近い数値を <b>推測します</b>。</param>
        <summary>定期的でないキャッシュ フローに対する内部利益率を返します。一連の定期的なキャッシュ フローに対する内部利益率を計算する場合は、IRR 関数を使います。</summary>
        <returns>To be added.</returns>
        <remarks><para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>日付に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>
            <b>Xirr は</b> 、少なくとも 1 つの正のキャッシュ フローと 1 つの負のキャッシュ フローを期待しています。それ以外の <b>場合、Xirr は</b> 値を返#NUM! が返されます。 </para>
          <para>日付の数値が有効な日付でない場合 <b>、Xirr は</b> 日付を返#VALUE! が返されます。 </para>
          <para>日付の任意の番号が開始日より前にある場合 <b>、Xirr は</b> 日付を返#NUM! が返されます。 </para>
          <para>値と日付に異なる数の値が含まれている場合 <b>、Xirr は</b> 値を#NUM! が返されます。 </para>
          <para>ほとんどの場合、Xirr 計算の推測値を指定 <b>する必要</b> があります。 推定値を省略すると、0.1 (10%) が指定されたと見なされます。 </para>
          <para>
            <b>Xirr</b> は、正味現在値 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" /> 関数と密接に関連しています。 <b>Xirr</b>によって計算される戻り率は、XNPV = 0 に対応する利率です。 </para>
          <para>Excelは、Xirr の計算に反復的な手法<b>を使用します</b>。 変化率 (推測から始まる) を使用して <b>、Xirr</b> は計算を繰り返し、結果が 0.000001% 以内に正確になるまで計算を繰り返します。 <b>Xirr が</b>100 回試行した後に動作する結果が見つから#NUM! が返されます。 レートは次の場合まで変更されます。 </para>
          <para>図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各部分の意味は次のとおりです。</para>
          <para>di = ith、 または last, payment date.</para>
          <para>d1 = 0 番目の支払い日。</para>
          <para>Pi = ith、または最後の支払い。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xnpv">
      <MemberSignature Language="C#" Value="public double Xnpv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xnpv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xnpv (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Xnpv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16814)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">収支明細表の日付に対応する一連のキャッシュ フローを指定します。最初の支払いは投資の最初に発生する原価や支払いに対応し、省略することができます。</param>
        <param name="Arg2">日付 キャッシュ フローに対応する一連の支払日を指定します。最初の支払日は、収支明細表の先頭に対応します。残りの支払日には、この日付より後の日付を指定する必要があります。ただし、指定順序は自由です。</param>
        <summary>必ずしも定期的ではないキャッシュ フローのスケジュールの正味現在の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: <b>Xnpv</b> メソッドは、対応する XNPV 関数 (=XNPV(rate, values, dates)) で必要な rate 引数に対応するパラメーターを提供しません。 VBA コードでこの制限を回避するには <b>、Xpnv</b> メソッドを使用する代わりに、メソッドを使用して XNPV 関数を呼び出 <see cref="M:Microsoft.Office.Interop.Excel._Application.Evaluate(System.Object)" /> します。</para>
          <para>定期的な一連のキャッシュ フローの正味現在の値を計算するには、メソッドを使用 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public bool Xor (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Xor([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16953)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg2"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg3"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg4"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg5"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg6"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg7"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg8"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg9"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg10"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg11"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg12"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg13"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg14"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg15"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg16"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg17"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg18"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg19"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg20"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg21"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg22"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg23"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg24"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg25"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg26"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg27"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg28"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg29"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <param name="Arg30"><b>TRUE</b> か <b>FALSE</b> かを調べる論理値、配列、または参照を指定します。引数は 1 ～ 254 個まで指定できます。</param>
        <summary>すべての引数の論理排他 OR を返します。</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YearFrac">
      <MemberSignature Language="C#" Value="public double YearFrac (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YearFrac([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YearFrac(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YearFrac (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16835)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を表す日付を指定します。</param>
        <param name="Arg2">終了日: 対象期間の最終日を表す日付を指定します。</param>
        <param name="Arg3">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>2 つの日付 (開始日と終了日) の間の期間が、1 年間に対して占める割合を返します。このワークシート関数を使用すると、特定の期間に割り当てられる年利や年債の割合を求めることができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>有効start_date日付 <b>end_date、YearFrac</b> は日付を返#VALUE! が返されます。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、YearFrac</b> は値を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldDisc">
      <MemberSignature Language="C#" Value="public double YieldDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16821)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">現在価値: 額面 $ 100 に対する証券の価値を指定します。</param>
        <param name="Arg4">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg5">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>割引債の年利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済または満期日が有効な日付でない場合 <b>、YieldDisc</b> は有効な日付を#VALUE! が返されます。 </para>
          <para>pr ≤が 0 の場合、または引き換≤ 0 の場合 <b>、YieldDisc</b> は値を#NUM! が返されます。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、YieldDisc</b> は値を返#NUM! が返されます。 </para>
          <para>満期日≥場合 <b>、YieldDisc は</b> 満期日を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldMat">
      <MemberSignature Language="C#" Value="public double YieldMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16816)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">発行日: 証券の発行日を指定します。日付にはシリアル値が使用されます。</param>
        <param name="Arg4">利率: 発行日の証券の利率を指定します。</param>
        <param name="Arg5">現在価値: 額面 $ 100 に対する証券の価値を指定します。</param>
        <param name="Arg6">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>満期日に利息が支払われる証券の利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: 日付は、DATE 関数を使用するか、他の数式または関数の結果として入力する必要があります。 たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。 日付を文字列として入力した場合、エラーが発生することがあります。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4 </term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、発行日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>決済、満期日、または発行が有効な日付でない場合 <b>、YieldMat</b> は日付を返#VALUE! が返されます。 </para>
          <para>rate &lt; 0 または pr ≤ 0 の場合 <b>、YieldMat</b> は値を#NUM! が返されます。 </para>
          <para>基準 &lt; 0 または基準 4 の場合 &gt; <b>、YieldMat</b> は値を返#NUM。 が返されます。 </para>
          <para>満期日に≥場合 <b>、YieldMat</b> は満期日を返#NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Z_Test">
      <MemberSignature Language="C#" Value="public double Z_Test (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Z_Test([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Z_Test (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16926)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 母集団平均の検定対象となるデータを含む数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">検定する値を指定します。</param>
        <param name="Arg3">σ: 母集団全体に基づく標準偏差を指定します。省略すると、標本に基づく標準偏差が使用されます。</param>
        <summary>z 検定の片側確率の値を返します。Z_TEST メソッドは、仮説の母集団平均μ0 について、配列で指定されたデータの観測値平均 (観測された標本平均) よりも標本平均が大きくなる確率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合 <b>Z_Test</b> エラー値#Nを返します。 </para>
          <para>
            <b>Z_Test σ</b> を省略しない場合、次のように計算されます。 </para>
          <para>図 1: σ が省略Z_Test場合の数式</para>
          <para> </para>
          <para> </para>
          <para>σが省略されている場合は、次のような計算が行われます。</para>
          <para>図 2: σ を省略Z_Testの数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(配列)、s は標本に基づく標準偏差 STDEV_S(配列)、n は標本内の観測値の個数 COUNT(配列) です。</para>
          <para>
            <b>Z_Test</b> は、基になる母集団平均が μ0 の場合に、サンプル平均が観測値 AVERAGE(array) よりも大きい確率を表します。 正規分布の対称性から、AVERAGE(array) μ0 の場合、Z_Test &lt; 0.5 より大きい値が返されます。 <b></b></para>
          <para>次Excel式を使用して、基になる母集団平均が μ0 の場合に、サンプル平均が AVERAGE(array) よりも μ0 (どちらの方向でも) より大きい 2 尾の確率を計算できます。</para>
          <para>=2 * MIN(Z_TEST(array,μ0,sigma)、1 - Z_TEST(array,μ0,sigma))。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public double ZTest (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ZTest([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ZTest(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16708)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 母集団平均の検定対象となるデータを含む数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">検定する値を指定します。</param>
        <param name="Arg3">σ: 母集団全体に基づく標準偏差を指定します。省略すると、標本に基づく標準偏差が使用されます。</param>
        <summary>z 検定の片側確率の値を返します。 特定の仮説母集団平均の場合、ZTEST は、サンプル平均がデータ セット (配列) の観測値の平均 (観測サンプル平均) よりも大きい確率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は、精度が向上する可能性がある 1 つ以上の新しい関数に置き換え、その名前が使用方法をよりよく反映します。 この関数は旧バージョンの Excel で引き続き利用可能ですが、 下位互換性を確保する必要がない場合には、機能をより正確に表わす新しい関数を今後使用することをご検討ください。 新しい関数の詳細については、メソッドを参照 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" /> してください。</para>
          <para>配列が空の場合 <b>、ZTest</b> はエラー値#N値を返します。 </para>
          <para>
            <b>ZTest</b> は、σ を省略しない場合、次のように計算されます。 </para>
          <para>図 1: σ を省略しない場合の ZTest の数式</para>
          <para> </para>
          <para> </para>
          <para>σが省略されている場合は、次のような計算が行われます。</para>
          <para>図 2: σ を省略した場合の ZTest の数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(配列)、s は標本に基づく標準偏差 STDEV(配列)、n は標本内の観測値の個数 COUNT(配列) です。</para>
          <para>
            <b>ZTest</b> は、基になる母集団平均が μ0 の場合、サンプル平均が観測値 AVERAGE(array) よりも大きい確率を表します。 正規分布の対称性から、AVERAGE(array) μ0 の場合 &lt; 、ZTEST は 0.5 より大きい値を返します。</para>
          <para>次の Excel 式を使用すると、基になる母集団平均が μ0:=2 * MIN(ZTEST(array,μ0,σ)、1 - ZTEST(array,μ0,sigma)の場合、サンプル平均が AVERAGE(array) よりも μ0 (どちらの方向でも) から離れる 2 尾の確率を計算できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>